
ONE_TO_ONE_CONVERSATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000797c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08007b4c  08007b4c  00017b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c2c  08007c2c  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007c2c  08007c2c  00017c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c34  08007c34  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c38  08007c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08007c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008444  200000a0  08007cdc  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200084e4  08007cdc  000284e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a781  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000439f  00000000  00000000  0003a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b4  00000000  00000000  000401d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025702  00000000  00000000  0004128c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf07  00000000  00000000  0006698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce33  00000000  00000000  00082895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b1c  00000000  00000000  0015f6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001651e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007b34 	.word	0x08007b34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08007b34 	.word	0x08007b34

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <UDS_Write_Data_Server>:


/***************************************************************Server**********************************************************************/

void UDS_Write_Data_Server(uint8_t* received_data, uint16_t received_length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
	/*???????????????????????*/
	uint8_t received_data_l = sizeof(received_data);
 8000518:	2304      	movs	r3, #4
 800051a:	73bb      	strb	r3, [r7, #14]
	//	arr[4] = (data >> 16) & 0xFF;
	//	arr[5] = (data >> 8) & 0xFF;
	//	arr[6] = data & 0xFF;		  // Least significant byte of data


	pos_Response.SID = Write_Service ;
 800051c:	4b3f      	ldr	r3, [pc, #252]	; (800061c <UDS_Write_Data_Server+0x110>)
 800051e:	222e      	movs	r2, #46	; 0x2e
 8000520:	709a      	strb	r2, [r3, #2]
	pos_Response.DID[0]=received_data[DID_1];
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3304      	adds	r3, #4
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b25a      	sxtb	r2, r3
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <UDS_Write_Data_Server+0x110>)
 800052c:	711a      	strb	r2, [r3, #4]
	pos_Response.DID[1]=received_data[DID_2];
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3305      	adds	r3, #5
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	b25a      	sxtb	r2, r3
 8000536:	4b39      	ldr	r3, [pc, #228]	; (800061c <UDS_Write_Data_Server+0x110>)
 8000538:	715a      	strb	r2, [r3, #5]
	pos_Response.DID_Length=2;
 800053a:	4b38      	ldr	r3, [pc, #224]	; (800061c <UDS_Write_Data_Server+0x110>)
 800053c:	2202      	movs	r2, #2
 800053e:	719a      	strb	r2, [r3, #6]
	pos_Response.Data_Length = 0;
 8000540:	4b36      	ldr	r3, [pc, #216]	; (800061c <UDS_Write_Data_Server+0x110>)
 8000542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000546:	2200      	movs	r2, #0
 8000548:	71da      	strb	r2, [r3, #7]
	pos_Response.SUB_FUNC = -1;
 800054a:	4b34      	ldr	r3, [pc, #208]	; (800061c <UDS_Write_Data_Server+0x110>)
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	70da      	strb	r2, [r3, #3]

	pos_Response.DID[0] |= 0b10000000;//Original DID
 8000550:	4b32      	ldr	r3, [pc, #200]	; (800061c <UDS_Write_Data_Server+0x110>)
 8000552:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800055a:	b25a      	sxtb	r2, r3
 800055c:	4b2f      	ldr	r3, [pc, #188]	; (800061c <UDS_Write_Data_Server+0x110>)
 800055e:	711a      	strb	r2, [r3, #4]

	if(received_data[DID_1] == Oil_Temp_First_byte && received_data[DID_2] == Oil_Temp_Second_byte){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3304      	adds	r3, #4
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2bf1      	cmp	r3, #241	; 0xf1
 8000568:	d110      	bne.n	800058c <UDS_Write_Data_Server+0x80>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3305      	adds	r3, #5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b3d      	cmp	r3, #61	; 0x3d
 8000572:	d10b      	bne.n	800058c <UDS_Write_Data_Server+0x80>
		Oil_Temp_var = received_data[Data_DID] << 8 | received_data[Data_DID+1];
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3306      	adds	r3, #6
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	021b      	lsls	r3, r3, #8
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	3207      	adds	r2, #7
 8000580:	7812      	ldrb	r2, [r2, #0]
 8000582:	4313      	orrs	r3, r2
 8000584:	461a      	mov	r2, r3
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <UDS_Write_Data_Server+0x114>)
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	e03b      	b.n	8000604 <UDS_Write_Data_Server+0xf8>
	}
	else if(received_data[DID_1] == Oil_Pressure_First_byte && received_data[DID_2] == Oil_Pressure_Second_byte){
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2bf5      	cmp	r3, #245	; 0xf5
 8000594:	d11a      	bne.n	80005cc <UDS_Write_Data_Server+0xc0>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3305      	adds	r3, #5
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b3d      	cmp	r3, #61	; 0x3d
 800059e:	d115      	bne.n	80005cc <UDS_Write_Data_Server+0xc0>
		Oil_Pressure_var = received_data[Data_DID] << 24 | received_data[Data_DID+1] << 16 | received_data[Data_DID+2] << 8 | received_data[Data_DID+3];
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3306      	adds	r3, #6
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	061a      	lsls	r2, r3, #24
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3307      	adds	r3, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	041b      	lsls	r3, r3, #16
 80005b0:	431a      	orrs	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	3308      	adds	r3, #8
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	021b      	lsls	r3, r3, #8
 80005ba:	4313      	orrs	r3, r2
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	3209      	adds	r2, #9
 80005c0:	7812      	ldrb	r2, [r2, #0]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <UDS_Write_Data_Server+0x118>)
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	e01b      	b.n	8000604 <UDS_Write_Data_Server+0xf8>
	}
	else if(received_data[DID_1] == VIN_number_First_byte && received_data[DID_2] == VIN_number_Second_byte){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2bf2      	cmp	r3, #242	; 0xf2
 80005d4:	d116      	bne.n	8000604 <UDS_Write_Data_Server+0xf8>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	3305      	adds	r3, #5
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b3d      	cmp	r3, #61	; 0x3d
 80005de:	d111      	bne.n	8000604 <UDS_Write_Data_Server+0xf8>
		//VIN_number_var = received_data[Data_DID] << 24 | received_data[Data_DID+1] << 16 | received_data[Data_DID+2] << 8 | received_data[Data_DID+3];

		for (uint8_t i=0; i<=16; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	e00b      	b.n	80005fe <UDS_Write_Data_Server+0xf2>
		{
			VIN_number_var[i] = received_data[Data_DID + i];
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	3306      	adds	r3, #6
 80005ea:	461a      	mov	r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	441a      	add	r2, r3
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	7811      	ldrb	r1, [r2, #0]
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <UDS_Write_Data_Server+0x11c>)
 80005f6:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i=0; i<=16; i++)
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	3301      	adds	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b10      	cmp	r3, #16
 8000602:	d9f0      	bls.n	80005e6 <UDS_Write_Data_Server+0xda>
	}
	else
	{
		//Another DID
	}
	if(SupressedPosRes_Server == 1)
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <UDS_Write_Data_Server+0x120>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d103      	bne.n	8000614 <UDS_Write_Data_Server+0x108>
	{
		UDS_Send_Pos_Res(&pos_Response);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <UDS_Write_Data_Server+0x110>)
 800060e:	f000 f80f 	bl	8000630 <UDS_Send_Pos_Res>
		return;
 8000612:	e000      	b.n	8000616 <UDS_Write_Data_Server+0x10a>
	}

	return;
 8000614:	bf00      	nop
	}
	hamada_write.Length = sizeof(arr);

	// Transmit the data through CAN_TP using this function
	CanTP_Transmit(0, &hamada_write);*/
}
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000c8 	.word	0x200000c8
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004
 8000628:	2000000c 	.word	0x2000000c
 800062c:	2000001d 	.word	0x2000001d

08000630 <UDS_Send_Pos_Res>:


/*****************************************************************************/

void UDS_Send_Pos_Res(ServiceInfo* Response)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

	uint8_t PCI = 4 + Response->DID_Length + Response->Data_Length;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799a      	ldrb	r2, [r3, #6]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000642:	79db      	ldrb	r3, [r3, #7]
 8000644:	4413      	add	r3, r2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	3304      	adds	r3, #4
 800064a:	73fb      	strb	r3, [r7, #15]
	msg.Data[SID] = Response->SID + 0x40;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	789b      	ldrb	r3, [r3, #2]
 8000650:	3340      	adds	r3, #64	; 0x40
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 8000656:	70da      	strb	r2, [r3, #3]
	msg.Data[ADD_Source] = Response->ADD_Source;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 800065e:	705a      	strb	r2, [r3, #1]
	msg.Data[ADD_Target] = Response->ADD_Target;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	785a      	ldrb	r2, [r3, #1]
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 8000666:	709a      	strb	r2, [r3, #2]
	uint8_t currentIndex = Sub_F;
 8000668:	2304      	movs	r3, #4
 800066a:	73bb      	strb	r3, [r7, #14]
	if(Response->SUB_FUNC != -1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8000672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000676:	d00d      	beq.n	8000694 <UDS_Send_Pos_Res+0x64>
	{
		PCI++;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	3301      	adds	r3, #1
 800067c:	73fb      	strb	r3, [r7, #15]
		msg.Data[currentIndex++]= Response->SUB_FUNC;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f993 1003 	ldrsb.w	r1, [r3, #3]
 8000684:	7bbb      	ldrb	r3, [r7, #14]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	73ba      	strb	r2, [r7, #14]
 800068a:	461a      	mov	r2, r3
 800068c:	b2c9      	uxtb	r1, r1
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 8000690:	5499      	strb	r1, [r3, r2]
 8000692:	e015      	b.n	80006c0 <UDS_Send_Pos_Res+0x90>
	}
	else
	{
		for(currentIndex = DID_1; currentIndex < Response->DID_Length + 4; currentIndex++)
 8000694:	2304      	movs	r3, #4
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	e00c      	b.n	80006b4 <UDS_Send_Pos_Res+0x84>
		{
			msg.Data[currentIndex] = Response->DID[currentIndex - 4];
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	3b04      	subs	r3, #4
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	4413      	add	r3, r2
 80006a2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	b2d1      	uxtb	r1, r2
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 80006ac:	54d1      	strb	r1, [r2, r3]
		for(currentIndex = DID_1; currentIndex < Response->DID_Length + 4; currentIndex++)
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	3301      	adds	r3, #1
 80006b2:	73bb      	strb	r3, [r7, #14]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	1cda      	adds	r2, r3, #3
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	429a      	cmp	r2, r3
 80006be:	daec      	bge.n	800069a <UDS_Send_Pos_Res+0x6a>
		}
	}

	uint8_t temp = currentIndex;
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	737b      	strb	r3, [r7, #13]
	while(currentIndex < Response->Data_Length + temp)
 80006c4:	e00d      	b.n	80006e2 <UDS_Send_Pos_Res+0xb2>
	{
		msg.Data[currentIndex] = Response->Data[currentIndex - temp];
 80006c6:	7bba      	ldrb	r2, [r7, #14]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	f993 2007 	ldrsb.w	r2, [r3, #7]
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	b2d1      	uxtb	r1, r2
 80006d8:	4a0f      	ldr	r2, [pc, #60]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 80006da:	54d1      	strb	r1, [r2, r3]
		currentIndex++;
 80006dc:	7bbb      	ldrb	r3, [r7, #14]
 80006de:	3301      	adds	r3, #1
 80006e0:	73bb      	strb	r3, [r7, #14]
	while(currentIndex < Response->Data_Length + temp)
 80006e2:	7bba      	ldrb	r2, [r7, #14]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	79db      	ldrb	r3, [r3, #7]
 80006ec:	4619      	mov	r1, r3
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	440b      	add	r3, r1
 80006f2:	429a      	cmp	r2, r3
 80006f4:	dbe7      	blt.n	80006c6 <UDS_Send_Pos_Res+0x96>
	}
	msg.Data[0] = PCI;
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	7013      	strb	r3, [r2, #0]
	msg.Length = PCI;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4a06      	ldr	r2, [pc, #24]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 8000700:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000704:	6013      	str	r3, [r2, #0]

	CanTp_Transmit(0, &msg);
 8000706:	4904      	ldr	r1, [pc, #16]	; (8000718 <UDS_Send_Pos_Res+0xe8>)
 8000708:	2000      	movs	r0, #0
 800070a:	f001 f84b 	bl	80017a4 <CanTp_Transmit>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200020d8 	.word	0x200020d8

0800071c <UDS_Send_Neg_Res>:

void UDS_Send_Neg_Res(uint8_t SID, uint8_t NRC)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	msg.Data[PCI] = 6;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 800072e:	2206      	movs	r2, #6
 8000730:	701a      	strb	r2, [r3, #0]
	msg.Data[Neg_Res_INDEX] = 0x7F;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 8000734:	227f      	movs	r2, #127	; 0x7f
 8000736:	705a      	strb	r2, [r3, #1]
	msg.Data[SID_NR_INDEX] = SID;
 8000738:	4a09      	ldr	r2, [pc, #36]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	7113      	strb	r3, [r2, #4]
	msg.Data[NRC_INDEX] = NRC;
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 8000740:	79bb      	ldrb	r3, [r7, #6]
 8000742:	7153      	strb	r3, [r2, #5]
	msg.Length = 6;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	461a      	mov	r2, r3
 800074c:	2306      	movs	r3, #6
 800074e:	6013      	str	r3, [r2, #0]

	CanTp_Transmit(0, &msg);
 8000750:	4903      	ldr	r1, [pc, #12]	; (8000760 <UDS_Send_Neg_Res+0x44>)
 8000752:	2000      	movs	r0, #0
 8000754:	f001 f826 	bl	80017a4 <CanTp_Transmit>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200020d8 	.word	0x200020d8

08000764 <UDS_Tester_Presenter_Server>:




void UDS_Tester_Presenter_Server(void)//Khaled Waleed
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	//globally in server:  there is a timer >= tout { reset timer + return to default (global ssesion flag in server) ask nour}
	//	reset_timer();
	pos_Response.SID = Tester_Representer_Service ;
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <UDS_Tester_Presenter_Server+0x34>)
 800076a:	223e      	movs	r2, #62	; 0x3e
 800076c:	709a      	strb	r2, [r3, #2]
	pos_Response.DID_Length=0;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <UDS_Tester_Presenter_Server+0x34>)
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
	pos_Response.Data_Length = 0;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <UDS_Tester_Presenter_Server+0x34>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2200      	movs	r2, #0
 800077c:	71da      	strb	r2, [r3, #7]
	pos_Response.SUB_FUNC = 0x00;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <UDS_Tester_Presenter_Server+0x34>)
 8000780:	2200      	movs	r2, #0
 8000782:	70da      	strb	r2, [r3, #3]

	if(SupressedPosRes_Server == 1 )
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <UDS_Tester_Presenter_Server+0x38>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d102      	bne.n	8000792 <UDS_Tester_Presenter_Server+0x2e>
	{
		UDS_Send_Pos_Res(&pos_Response);
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <UDS_Tester_Presenter_Server+0x34>)
 800078e:	f7ff ff4f 	bl	8000630 <UDS_Send_Pos_Res>
	}

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000c8 	.word	0x200000c8
 800079c:	2000001d 	.word	0x2000001d

080007a0 <reset_timer>:

void reset_timer(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6); // Stop Timer6
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <reset_timer+0x14>)
 80007a6:	f004 fa6f 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM6->CNT = 0; // Reset Timer6 counter to 0
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <reset_timer+0x18>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
	//    HAL_TIM_Base_Start_IT(&htim6); // Start Timer6 again
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20004578 	.word	0x20004578
 80007b8:	40001000 	.word	0x40001000

080007bc <stop_timer>:

void stop_timer(TIM_HandleTypeDef* htim){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(htim); // Stop Timer
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f004 fa5f 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <start_timer>:

void start_timer(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	//	HAL_TIM_Base_Start(&htim6);
	HAL_TIM_Base_Start_IT(&htim6);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <start_timer+0x10>)
 80007da:	f004 f9e5 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20004578 	.word	0x20004578

080007e8 <UDS_Control_Session_Server>:

void UDS_Control_Session_Server(uint8_t *Received)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]



	if(Received[Sub_F] == DefaultSession || Received[Sub_F] == ExtendedSession)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3304      	adds	r3, #4
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d004      	beq.n	8000804 <UDS_Control_Session_Server+0x1c>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3304      	adds	r3, #4
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b03      	cmp	r3, #3
 8000802:	d126      	bne.n	8000852 <UDS_Control_Session_Server+0x6a>
	{
		global_session = Received[Sub_F];
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	791a      	ldrb	r2, [r3, #4]
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <UDS_Control_Session_Server+0x84>)
 800080a:	701a      	strb	r2, [r3, #0]
		Control.SID = Received[SID];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	78da      	ldrb	r2, [r3, #3]
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <UDS_Control_Session_Server+0x88>)
 8000812:	709a      	strb	r2, [r3, #2]
		Control.SUB_FUNC = Received[Sub_F];
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3304      	adds	r3, #4
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b25a      	sxtb	r2, r3
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <UDS_Control_Session_Server+0x88>)
 800081e:	70da      	strb	r2, [r3, #3]
		Control.DID_Length = 0;
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <UDS_Control_Session_Server+0x88>)
 8000822:	2200      	movs	r2, #0
 8000824:	719a      	strb	r2, [r3, #6]
		Control.Data_Length = 0;
 8000826:	4b12      	ldr	r3, [pc, #72]	; (8000870 <UDS_Control_Session_Server+0x88>)
 8000828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800082c:	2200      	movs	r2, #0
 800082e:	71da      	strb	r2, [r3, #7]


		if(Received[Sub_F] == ExtendedSession){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3304      	adds	r3, #4
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d103      	bne.n	8000842 <UDS_Control_Session_Server+0x5a>
			reset_timer();
 800083a:	f7ff ffb1 	bl	80007a0 <reset_timer>
			start_timer();
 800083e:	f7ff ffc9 	bl	80007d4 <start_timer>
		}
		if(SupressedPosRes_Server == 1)
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <UDS_Control_Session_Server+0x8c>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10b      	bne.n	8000862 <UDS_Control_Session_Server+0x7a>
		{
			UDS_Send_Pos_Res(&Control);
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <UDS_Control_Session_Server+0x88>)
 800084c:	f7ff fef0 	bl	8000630 <UDS_Send_Pos_Res>
		if(SupressedPosRes_Server == 1)
 8000850:	e007      	b.n	8000862 <UDS_Control_Session_Server+0x7a>
		}

	}
	else
	{
		UDS_Send_Neg_Res(Received[SID], subFunctionNotSupported);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3303      	adds	r3, #3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2112      	movs	r1, #18
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff5e 	bl	800071c <UDS_Send_Neg_Res>
	}
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	200010d0 	.word	0x200010d0
 8000874:	2000001d 	.word	0x2000001d

08000878 <Sec_u32GetSeed>:

void Sec_u32GetSeed (void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	Sec_u32SeedValue = HAL_GetTick();
 800087c:	f002 f932 	bl	8002ae4 <HAL_GetTick>
 8000880:	4603      	mov	r3, r0
 8000882:	4a02      	ldr	r2, [pc, #8]	; (800088c <Sec_u32GetSeed+0x14>)
 8000884:	6013      	str	r3, [r2, #0]
	//	printf("%d",Sec_u32SeedValue) ;
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000c0 	.word	0x200000c0

08000890 <Sec_u32GetAlgorithm>:

uint32_t Sec_u32GetAlgorithm(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	return 5 ;
 8000894:	2305      	movs	r3, #5
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <Sec_u32GetKey>:

uint32_t Sec_u32GetKey (void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint32_t Local_u32KeyValue = 0 ;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
	Local_u32KeyValue = Sec_u32SeedValue + Sec_u32GetAlgorithm() ;
 80008aa:	f7ff fff1 	bl	8000890 <Sec_u32GetAlgorithm>
 80008ae:	4602      	mov	r2, r0
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <Sec_u32GetKey+0x24>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4413      	add	r3, r2
 80008b6:	607b      	str	r3, [r7, #4]
	//	Local_u32KeyValue = 0x01020304 + Sec_u32GetAlgorithm() ;
	return Local_u32KeyValue;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000c0 	.word	0x200000c0

080008c8 <Sec_uint32SecurityAccess>:


uint8_t Sec_uint32SecurityAccess (PduInfoType * Ptr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorStates = E_OK ;
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
	Ptr->Data[Sub_F] &= 0x7F;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	791b      	ldrb	r3, [r3, #4]
 80008d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	711a      	strb	r2, [r3, #4]

	if (Ptr->Data[Sub_F] == Seed)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d128      	bne.n	800093c <Sec_uint32SecurityAccess+0x74>
	{
		/*Generate Seed */
		Sec_u32GetSeed();
 80008ea:	f7ff ffc5 	bl	8000878 <Sec_u32GetSeed>

		/*Send Frame with Positive Response */
		//		Frame_Info Response ;
		pos_Response.SID 		= Security_Service ;
 80008ee:	4b3b      	ldr	r3, [pc, #236]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 80008f0:	2227      	movs	r2, #39	; 0x27
 80008f2:	709a      	strb	r2, [r3, #2]
		pos_Response.SUB_FUNC	= Seed ;
 80008f4:	4b39      	ldr	r3, [pc, #228]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	70da      	strb	r2, [r3, #3]
		pos_Response.DID_Length=0;
 80008fa:	4b38      	ldr	r3, [pc, #224]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	719a      	strb	r2, [r3, #6]
		pos_Response.Data_Length=4;
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 8000902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000906:	2204      	movs	r2, #4
 8000908:	71da      	strb	r2, [r3, #7]
		//		for(int i = 1; i < pos_Response.Data_Length + 1; i++){
		//			pos_Response.Data[i-1] = i;
		//		}
		for(int i =0 ; i< 4; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	e011      	b.n	8000934 <Sec_uint32SecurityAccess+0x6c>
		{
			pos_Response.Data[i]=(uint8_t) (Sec_u32SeedValue>>(24-(i*8))) ;
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <Sec_uint32SecurityAccess+0x118>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	f1c3 0303 	rsb	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	fa22 f303 	lsr.w	r3, r2, r3
 8000920:	b259      	sxtb	r1, r3
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4413      	add	r3, r2
 8000928:	3307      	adds	r3, #7
 800092a:	460a      	mov	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]
		for(int i =0 ; i< 4; i++)
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	3301      	adds	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	2b03      	cmp	r3, #3
 8000938:	ddea      	ble.n	8000910 <Sec_uint32SecurityAccess+0x48>
 800093a:	e046      	b.n	80009ca <Sec_uint32SecurityAccess+0x102>
		}



	}
	else if (Ptr->Data[Sub_F] == Key)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	2b02      	cmp	r3, #2
 8000942:	d13a      	bne.n	80009ba <Sec_uint32SecurityAccess+0xf2>
	{
		uint32_t user_key= Ptr->Data[Data_Sub_Fun]<<24 | Ptr->Data[Data_Sub_Fun+1]<<16 | Ptr->Data[Data_Sub_Fun+2]<<8 |Ptr->Data[Data_Sub_Fun+3];
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795b      	ldrb	r3, [r3, #5]
 8000948:	061a      	lsls	r2, r3, #24
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	041b      	lsls	r3, r3, #16
 8000950:	431a      	orrs	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	79db      	ldrb	r3, [r3, #7]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	4313      	orrs	r3, r2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	7a12      	ldrb	r2, [r2, #8]
 800095e:	4313      	orrs	r3, r2
 8000960:	60fb      	str	r3, [r7, #12]
		/*Check if Key sent is correct or Not */
		if (user_key == Sec_u32GetKey())
 8000962:	f7ff ff9d 	bl	80008a0 <Sec_u32GetKey>
 8000966:	4602      	mov	r2, r0
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4293      	cmp	r3, r2
 800096c:	d115      	bne.n	800099a <Sec_uint32SecurityAccess+0xd2>
		{
			/*Change the state of security */
			Sec_State = Secure ;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <Sec_uint32SecurityAccess+0x11c>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
			global_sec_flag = Secure;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <Sec_uint32SecurityAccess+0x120>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
			/*Send Positive Response */
			pos_Response.SID= Ptr->Data[SID];
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	78da      	ldrb	r2, [r3, #3]
 800097e:	4b17      	ldr	r3, [pc, #92]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 8000980:	709a      	strb	r2, [r3, #2]
			pos_Response.SUB_FUNC = Key;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 8000984:	2202      	movs	r2, #2
 8000986:	70da      	strb	r2, [r3, #3]
			pos_Response.DID_Length = 0;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 800098a:	2200      	movs	r2, #0
 800098c:	719a      	strb	r2, [r3, #6]
			pos_Response.Data_Length = 0;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 8000990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000994:	2200      	movs	r2, #0
 8000996:	71da      	strb	r2, [r3, #7]
 8000998:	e017      	b.n	80009ca <Sec_uint32SecurityAccess+0x102>

		}
		else
		{
			Sec_State = Un_Secure ;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <Sec_uint32SecurityAccess+0x11c>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
			global_sec_flag = Un_Secure;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <Sec_uint32SecurityAccess+0x120>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
			Local_u8ErrorStates = E_NOK ;
 80009a6:	2301      	movs	r3, #1
 80009a8:	75fb      	strb	r3, [r7, #23]
			UDS_Send_Neg_Res(Ptr->Data[SID] , invalidKey) ;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	78db      	ldrb	r3, [r3, #3]
 80009ae:	2135      	movs	r1, #53	; 0x35
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff feb3 	bl	800071c <UDS_Send_Neg_Res>
			return Local_u8ErrorStates;
 80009b6:	7dfb      	ldrb	r3, [r7, #23]
 80009b8:	e00b      	b.n	80009d2 <Sec_uint32SecurityAccess+0x10a>
		}
	}
	else
	{
		Local_u8ErrorStates = E_NOK ;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
		UDS_Send_Neg_Res(Ptr->Data[SID] , subFunctionNotSupported) ;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	78db      	ldrb	r3, [r3, #3]
 80009c2:	2112      	movs	r1, #18
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fea9 	bl	800071c <UDS_Send_Neg_Res>
	}


	UDS_Send_Pos_Res(&pos_Response) ;
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <Sec_uint32SecurityAccess+0x114>)
 80009cc:	f7ff fe30 	bl	8000630 <UDS_Send_Pos_Res>

	return Local_u8ErrorStates ;
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	200000c0 	.word	0x200000c0
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	200000bc 	.word	0x200000bc

080009ec <UDS_Read_Data_Server>:


/***************************************************************************************************/
void UDS_Read_Data_Server(uint8_t* data)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	pos_Response.SUB_FUNC = -1;
 80009f4:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	70da      	strb	r2, [r3, #3]

	//Send +ve responce
	pos_Response.SID = Read_Service ;
 80009fa:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 80009fc:	2222      	movs	r2, #34	; 0x22
 80009fe:	709a      	strb	r2, [r3, #2]
	pos_Response.DID_Length=2;
 8000a00:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	719a      	strb	r2, [r3, #6]
	data[DID_1] |= 0b10000000; //Original DID
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	781a      	ldrb	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3304      	adds	r3, #4
 8000a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	701a      	strb	r2, [r3, #0]

	//if DID --> Oil_Temp
	if((data[DID_1] == Oil_Temp_First_byte) && (data[DID_2] == Oil_Temp_Second_byte) )
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2bf1      	cmp	r3, #241	; 0xf1
 8000a20:	d11b      	bne.n	8000a5a <UDS_Read_Data_Server+0x6e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3305      	adds	r3, #5
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b3d      	cmp	r3, #61	; 0x3d
 8000a2a:	d116      	bne.n	8000a5a <UDS_Read_Data_Server+0x6e>
	{

		pos_Response.DID[0]=Oil_Temp_First_byte;
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a2e:	22f1      	movs	r2, #241	; 0xf1
 8000a30:	711a      	strb	r2, [r3, #4]
		pos_Response.DID[1]=Oil_Temp_Second_byte;
 8000a32:	4b3a      	ldr	r3, [pc, #232]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a34:	223d      	movs	r2, #61	; 0x3d
 8000a36:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[0]=Oil_Temp_var>>8;
 8000a38:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <UDS_Read_Data_Server+0x134>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	b25a      	sxtb	r2, r3
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a42:	71da      	strb	r2, [r3, #7]
		pos_Response.Data[1]=Oil_Temp_var & 0xFF;
 8000a44:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <UDS_Read_Data_Server+0x134>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	b25a      	sxtb	r2, r3
 8000a4a:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a4c:	721a      	strb	r2, [r3, #8]
		pos_Response.Data_Length = 2;
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a54:	2202      	movs	r2, #2
 8000a56:	71da      	strb	r2, [r3, #7]
 8000a58:	e059      	b.n	8000b0e <UDS_Read_Data_Server+0x122>



		//	UDS_Send_Pos_Res(Read_Data_Server);
	}//if DID --> Oil_Pressure
	else if((data[DID_1] == Oil_Pressure_First_byte) && (data[DID_2] == Oil_Pressure_Second_byte) )
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2bf5      	cmp	r3, #245	; 0xf5
 8000a62:	d127      	bne.n	8000ab4 <UDS_Read_Data_Server+0xc8>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3305      	adds	r3, #5
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b3d      	cmp	r3, #61	; 0x3d
 8000a6c:	d122      	bne.n	8000ab4 <UDS_Read_Data_Server+0xc8>
	{
		pos_Response.DID[0]=Oil_Pressure_First_byte;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a70:	22f5      	movs	r2, #245	; 0xf5
 8000a72:	711a      	strb	r2, [r3, #4]
		pos_Response.DID[1]=Oil_Pressure_Second_byte;
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a76:	223d      	movs	r2, #61	; 0x3d
 8000a78:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[0]=Oil_Pressure_var>>24;
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <UDS_Read_Data_Server+0x138>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	0e1b      	lsrs	r3, r3, #24
 8000a80:	b25a      	sxtb	r2, r3
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a84:	71da      	strb	r2, [r3, #7]
		pos_Response.Data[1]=Oil_Pressure_var>>16;
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <UDS_Read_Data_Server+0x138>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	0c1b      	lsrs	r3, r3, #16
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a90:	721a      	strb	r2, [r3, #8]
		pos_Response.Data[2]=Oil_Pressure_var>>8;
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <UDS_Read_Data_Server+0x138>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	0a1b      	lsrs	r3, r3, #8
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000a9c:	725a      	strb	r2, [r3, #9]
		pos_Response.Data[3]=Oil_Pressure_var & 0xFF;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <UDS_Read_Data_Server+0x138>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b25a      	sxtb	r2, r3
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000aa6:	729a      	strb	r2, [r3, #10]

		pos_Response.Data_Length = 4;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aae:	2204      	movs	r2, #4
 8000ab0:	71da      	strb	r2, [r3, #7]
 8000ab2:	e02c      	b.n	8000b0e <UDS_Read_Data_Server+0x122>
		//For Debugging
		//HAL_UART_Transmit(&huart2, "\r\nRead Frame Client DID:", 50, HAL_MAX_DELAY);
		//sendHexArrayAsASCII(Read_Data_Server.DID, Read_Data_Server.DID_Length );
		//HAL_UART_Transmit(&huart2, "\r\n", 50, HAL_MAX_DELAY);
	}
	else if( (data[DID_1] == VIN_number_First_byte) && (data[DID_2] == VIN_number_Second_byte) ){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	3304      	adds	r3, #4
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2bf2      	cmp	r3, #242	; 0xf2
 8000abc:	d123      	bne.n	8000b06 <UDS_Read_Data_Server+0x11a>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3305      	adds	r3, #5
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b3d      	cmp	r3, #61	; 0x3d
 8000ac6:	d11e      	bne.n	8000b06 <UDS_Read_Data_Server+0x11a>
		pos_Response.DID[0] = VIN_number_First_byte;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000aca:	22f2      	movs	r2, #242	; 0xf2
 8000acc:	711a      	strb	r2, [r3, #4]
		pos_Response.DID[1] = VIN_number_Second_byte;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000ad0:	223d      	movs	r2, #61	; 0x3d
 8000ad2:	715a      	strb	r2, [r3, #5]
		pos_Response.Data[2] = (VIN_number_var>>8) & 0xFF;
		pos_Response.Data[3] = VIN_number_var & 0xFF;

		pos_Response.Data_Length = 4;
		 */
		for (uint8_t i=0; i<=16; i++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e00c      	b.n	8000af4 <UDS_Read_Data_Server+0x108>
		{
			pos_Response.Data[/*16-*/i] = VIN_number_var[i] /*(VIN_number_var >> (i*8)) & 0xFF*/ ;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
 8000adc:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <UDS_Read_Data_Server+0x13c>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	b251      	sxtb	r1, r2
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000ae8:	4413      	add	r3, r2
 8000aea:	460a      	mov	r2, r1
 8000aec:	71da      	strb	r2, [r3, #7]
		for (uint8_t i=0; i<=16; i++)
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	3301      	adds	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b10      	cmp	r3, #16
 8000af8:	d9ef      	bls.n	8000ada <UDS_Read_Data_Server+0xee>

		}
		pos_Response.Data_Length = 17;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000b00:	2211      	movs	r2, #17
 8000b02:	71da      	strb	r2, [r3, #7]
 8000b04:	e003      	b.n	8000b0e <UDS_Read_Data_Server+0x122>

	}
	else
	{
		//otherwize: send -ve responce
		UDS_Send_Neg_Res(Read_Service, RequestOutofRange);
 8000b06:	2131      	movs	r1, #49	; 0x31
 8000b08:	2022      	movs	r0, #34	; 0x22
 8000b0a:	f7ff fe07 	bl	800071c <UDS_Send_Neg_Res>
	}


	UDS_Send_Pos_Res(&pos_Response);
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <UDS_Read_Data_Server+0x130>)
 8000b10:	f7ff fd8e 	bl	8000630 <UDS_Send_Pos_Res>

}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000c8 	.word	0x200000c8
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000004 	.word	0x20000004
 8000b28:	2000000c 	.word	0x2000000c

08000b2c <server_call_back>:
 return value	:	void

 ***************************************************/

void server_call_back(uint32_t TxPduId, PduInfoType* ptr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	PduDataPTR = ptr;
 8000b36:	4a6e      	ldr	r2, [pc, #440]	; (8000cf0 <server_call_back+0x1c4>)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	6013      	str	r3, [r2, #0]
	// create flag for check SID this is local bec . every frame i need to check the sid
	uint8_t local_sid_flag = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73bb      	strb	r3, [r7, #14]
	uint8_t local_target_accept = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
	SupressedPosRes_Server = ((ptr->Data[Sub_F] & 0b10000000)>>7) ;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	791b      	ldrb	r3, [r3, #4]
 8000b48:	09db      	lsrs	r3, r3, #7
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b69      	ldr	r3, [pc, #420]	; (8000cf4 <server_call_back+0x1c8>)
 8000b4e:	701a      	strb	r2, [r3, #0]
	pos_Response.ADD_Target = Client_Address;
 8000b50:	4b69      	ldr	r3, [pc, #420]	; (8000cf8 <server_call_back+0x1cc>)
 8000b52:	22f1      	movs	r2, #241	; 0xf1
 8000b54:	705a      	strb	r2, [r3, #1]
	Control.ADD_Target = Client_Address;
 8000b56:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <server_call_back+0x1d0>)
 8000b58:	22f1      	movs	r2, #241	; 0xf1
 8000b5a:	705a      	strb	r2, [r3, #1]
	// this for test only
	//uint8_t ptr->Data[20] = {2 ,Control_Service , 5 };
	// we need to check for address target (ADD_Target) if true this message is for me if not rejected it

	#if (Global_Target == Tempreture_Add )
	if(ptr->Data[ADD_Target] == Tempreture_Address )
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	2b3d      	cmp	r3, #61	; 0x3d
 8000b62:	d10a      	bne.n	8000b7a <server_call_back+0x4e>
	{
		local_target_accept=1;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
		pos_Response.ADD_Source = Tempreture_Address;
 8000b68:	4b63      	ldr	r3, [pc, #396]	; (8000cf8 <server_call_back+0x1cc>)
 8000b6a:	223d      	movs	r2, #61	; 0x3d
 8000b6c:	701a      	strb	r2, [r3, #0]
		Control.ADD_Source = Tempreture_Address;
 8000b6e:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <server_call_back+0x1d0>)
 8000b70:	223d      	movs	r2, #61	; 0x3d
 8000b72:	701a      	strb	r2, [r3, #0]
		msg.Data[ADD_NR_Source] = Tempreture_Address;
 8000b74:	4b62      	ldr	r3, [pc, #392]	; (8000d00 <server_call_back+0x1d4>)
 8000b76:	223d      	movs	r2, #61	; 0x3d
 8000b78:	709a      	strb	r2, [r3, #2]
		msg.Data[ADD_NR_Source] = Functional_Address;

	}
#endif

	if(local_target_accept)
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 80b3 	beq.w	8000ce8 <server_call_back+0x1bc>
	{
		// for SID validation
		if (ptr->Data[SID] == Control_Service || ptr->Data[SID]== Read_Service || ptr->Data[SID] == Write_Service || ptr->Data[SID] == Security_Service || ptr->Data[SID] == Tester_Representer_Service)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	78db      	ldrb	r3, [r3, #3]
 8000b86:	2b10      	cmp	r3, #16
 8000b88:	d00f      	beq.n	8000baa <server_call_back+0x7e>
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	78db      	ldrb	r3, [r3, #3]
 8000b8e:	2b22      	cmp	r3, #34	; 0x22
 8000b90:	d00b      	beq.n	8000baa <server_call_back+0x7e>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	2b2e      	cmp	r3, #46	; 0x2e
 8000b98:	d007      	beq.n	8000baa <server_call_back+0x7e>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	78db      	ldrb	r3, [r3, #3]
 8000b9e:	2b27      	cmp	r3, #39	; 0x27
 8000ba0:	d003      	beq.n	8000baa <server_call_back+0x7e>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	78db      	ldrb	r3, [r3, #3]
 8000ba6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ba8:	d10e      	bne.n	8000bc8 <server_call_back+0x9c>
		{
			// tmam
			reset_timer();
 8000baa:	f7ff fdf9 	bl	80007a0 <reset_timer>
			if(global_session != DefaultSession){
 8000bae:	4b55      	ldr	r3, [pc, #340]	; (8000d04 <server_call_back+0x1d8>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d001      	beq.n	8000bbc <server_call_back+0x90>
				start_timer();
 8000bb8:	f7ff fe0c 	bl	80007d4 <start_timer>
			}
			local_sid_flag = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73bb      	strb	r3, [r7, #14]
			// this mean the SID not supported
			UDS_Send_Neg_Res(ptr->Data[SID],  serviceNotSupported);
			// go out of isr
			return;
		}
		if (local_sid_flag)
 8000bc0:	7bbb      	ldrb	r3, [r7, #14]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d107      	bne.n	8000bd6 <server_call_back+0xaa>
 8000bc6:	e063      	b.n	8000c90 <server_call_back+0x164>
			UDS_Send_Neg_Res(ptr->Data[SID],  serviceNotSupported);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	78db      	ldrb	r3, [r3, #3]
 8000bcc:	2111      	movs	r1, #17
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fda4 	bl	800071c <UDS_Send_Neg_Res>
			return;
 8000bd4:	e088      	b.n	8000ce8 <server_call_back+0x1bc>
		{
			//Check Suppressed Positive Response


			if (ptr->Data[SID] == Control_Service)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	78db      	ldrb	r3, [r3, #3]
 8000bda:	2b10      	cmp	r3, #16
 8000bdc:	d103      	bne.n	8000be6 <server_call_back+0xba>
			{
				flag_sub_fun = 1;
 8000bde:	4b4a      	ldr	r3, [pc, #296]	; (8000d08 <server_call_back+0x1dc>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e054      	b.n	8000c90 <server_call_back+0x164>
			}
			else if (ptr->Data[SID] == Read_Service)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	2b22      	cmp	r3, #34	; 0x22
 8000bec:	d104      	bne.n	8000bf8 <server_call_back+0xcc>
				// send read function (rad resp as the actual ptr->Data of temp or pressure)
				//	HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Read_Data_Server() \r\n", 50, HAL_MAX_DELAY ); // delete ---> after write your func

				//UDS_Read_Data_Server();

				UDS_Read_Data_Server(ptr->Data);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fefb 	bl	80009ec <UDS_Read_Data_Server>
 8000bf6:	e04b      	b.n	8000c90 <server_call_back+0x164>

			}
			else if (ptr->Data[SID] == Security_Service )
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	78db      	ldrb	r3, [r3, #3]
 8000bfc:	2b27      	cmp	r3, #39	; 0x27
 8000bfe:	d105      	bne.n	8000c0c <server_call_back+0xe0>

				//		send_ser_sec() ; // send seed

				// (write here +ive resp for security) ------------------------> here

				Sec_uint32SecurityAccess(PduDataPTR);
 8000c00:	4b3b      	ldr	r3, [pc, #236]	; (8000cf0 <server_call_back+0x1c4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe5f 	bl	80008c8 <Sec_uint32SecurityAccess>
 8000c0a:	e041      	b.n	8000c90 <server_call_back+0x164>
				//			UDS_Send_Pos_Res(&pos_Response) ;
			}


			else if (ptr->Data[SID] == Write_Service && global_sec_flag ==1 && global_session == ExtendedSession)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	2b2e      	cmp	r3, #46	; 0x2e
 8000c12:	d112      	bne.n	8000c3a <server_call_back+0x10e>
 8000c14:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <server_call_back+0x1e0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10d      	bne.n	8000c3a <server_call_back+0x10e>
 8000c1e:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <server_call_back+0x1d8>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d108      	bne.n	8000c3a <server_call_back+0x10e>
				//			HAL_UART_Transmit(&huart2, (const uint8_t*)" UDS_Write_Data_Server() \r\n", 50, 100 ); // delete it after put your func

				// ptr->Data write with +ive resp


				UDS_Write_Data_Server(ptr->Data,  ptr->Data[0]);
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4619      	mov	r1, r3
 8000c32:	4610      	mov	r0, r2
 8000c34:	f7ff fc6a 	bl	800050c <UDS_Write_Data_Server>
 8000c38:	e02a      	b.n	8000c90 <server_call_back+0x164>
			}
			else if (ptr->Data[SID] == Write_Service && global_sec_flag == 0 && global_session == ExtendedSession )
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	78db      	ldrb	r3, [r3, #3]
 8000c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8000c40:	d110      	bne.n	8000c64 <server_call_back+0x138>
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <server_call_back+0x1e0>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10b      	bne.n	8000c64 <server_call_back+0x138>
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <server_call_back+0x1d8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d106      	bne.n	8000c64 <server_call_back+0x138>
				//			// send -ive response
				//			//printf("UDS_Write_Data_Server() \n");
				//			HAL_UART_Transmit(&huart2, (const uint8_t*)"UDS_Write_Data_Server() \r\n", 50, 100 ); // delete this after put your func
				// (write here -ive resp for write security ) ------------------------> here

				UDS_Send_Neg_Res(ptr->Data[SID], securityAccessDenied);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	78db      	ldrb	r3, [r3, #3]
 8000c5a:	2133      	movs	r1, #51	; 0x33
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fd5d 	bl	800071c <UDS_Send_Neg_Res>
 8000c62:	e015      	b.n	8000c90 <server_call_back+0x164>

			}
			else if (ptr->Data[SID] == Write_Service  && global_session == DefaultSession)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	2b2e      	cmp	r3, #46	; 0x2e
 8000c6a:	d10b      	bne.n	8000c84 <server_call_back+0x158>
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <server_call_back+0x1d8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d106      	bne.n	8000c84 <server_call_back+0x158>
			{
				// (write here -ive resp for write session (NRC ) ------------------------> here

				UDS_Send_Neg_Res(ptr->Data[SID], serviceNotSupportedInActiveSession);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	78db      	ldrb	r3, [r3, #3]
 8000c7a:	217f      	movs	r1, #127	; 0x7f
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd4d 	bl	800071c <UDS_Send_Neg_Res>
 8000c82:	e005      	b.n	8000c90 <server_call_back+0x164>

			}
			else if (ptr->Data[SID] == Tester_Representer_Service)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	78db      	ldrb	r3, [r3, #3]
 8000c88:	2b3e      	cmp	r3, #62	; 0x3e
 8000c8a:	d101      	bne.n	8000c90 <server_call_back+0x164>
			{
				//printf("u are in Tester_Representer_Service\n");
				//			HAL_UART_Transmit(&huart2, (const uint8_t*)" u are in Tester_Representer_Service \r\n", 50, 100 );
				// call the fun of tester Representer
				UDS_Tester_Presenter_Server();
 8000c8c:	f7ff fd6a 	bl	8000764 <UDS_Tester_Presenter_Server>

				// (write here +ive resp for  Tester_Representer_Service) ------------------------> here
			}
		}
		// check sub fun
		if (flag_sub_fun== sub_func_control)
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <server_call_back+0x1dc>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d120      	bne.n	8000cdc <server_call_back+0x1b0>
		{
			ptr->Data[Sub_F] &= 0x7F; //Original Sub_Func
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	791b      	ldrb	r3, [r3, #4]
 8000c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	711a      	strb	r2, [r3, #4]
			// true sub fun
			if (ptr->Data[SID]== Control_Service && ptr->Data[Sub_F] == DefaultSession)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	d108      	bne.n	8000cc2 <server_call_back+0x196>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <server_call_back+0x196>

				//HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to DefaultSession \r\n", 50, 100 );
				// (write here +ive resp for  change to def- session ) ------------------------> here

				//global_session = DefaultSession;
				UDS_Control_Session_Server(ptr->Data);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fd94 	bl	80007e8 <UDS_Control_Session_Server>
 8000cc0:	e012      	b.n	8000ce8 <server_call_back+0x1bc>

			}
			else if (ptr->Data[SID] == Control_Service && ptr->Data[Sub_F] == ExtendedSession)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	78db      	ldrb	r3, [r3, #3]
 8000cc6:	2b10      	cmp	r3, #16
 8000cc8:	d10e      	bne.n	8000ce8 <server_call_back+0x1bc>
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d10a      	bne.n	8000ce8 <server_call_back+0x1bc>
				//	printf(" changed to ExtendedSession ");
				//	HAL_UART_Transmit(&huart2, (const uint8_t*)" changed to ExtendedSession \r\n", 50, 100 );

				// (write here +ive resp for  change to ext session ) ------------------------> here
				//global_session = ExtendedSession;
				UDS_Control_Session_Server(ptr->Data);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fd87 	bl	80007e8 <UDS_Control_Session_Server>
 8000cda:	e005      	b.n	8000ce8 <server_call_back+0x1bc>
				// (write here -ive resp for sub servise ) ------------------------> here
			}
		}
		else
		{
			UDS_Send_Neg_Res(ptr->Data[SID], subFunctionNotSupported);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	78db      	ldrb	r3, [r3, #3]
 8000ce0:	2112      	movs	r1, #18
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fd1a 	bl	800071c <UDS_Send_Neg_Res>
	}
	else
	{
		// not the target
	}
}
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200030e0 	.word	0x200030e0
 8000cf4:	2000001d 	.word	0x2000001d
 8000cf8:	200000c8 	.word	0x200000c8
 8000cfc:	200010d0 	.word	0x200010d0
 8000d00:	200020d8 	.word	0x200020d8
 8000d04:	20000000 	.word	0x20000000
 8000d08:	200030dc 	.word	0x200030dc
 8000d0c:	200000bc 	.word	0x200000bc

08000d10 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile int8_t CanIf_Rx;
Std_ReturnType (*CanTp_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr) = NULL;
void (*CanNm_TxCallback)(void) = NULL;
void (*CanNm_RxCallback)(void) = NULL;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, CanIfPduInfo.Data) != HAL_OK) {
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f002 fa1c 	bl	800315c <HAL_CAN_GetRxMessage>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
		// Reception error
		Error_Handler();
 8000d2a:	f001 fadf 	bl	80022ec <Error_Handler>
	}
	CanIf_Rx = 1;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20003100 	.word	0x20003100
 8000d40:	200030e4 	.word	0x200030e4
 8000d44:	2000310c 	.word	0x2000310c

08000d48 <CanIf_Transmit>:
 *  @brief CAN interface transmit function
 *  @param  PduInfoTRx*		: Pointer to message structure contain (Data, Length)
 *  @param  TxPduId	: PDU ID
 *  @return None
 */
void CanIf_Transmit(uint32_t TxPduId, PduInfoTRx* PduInfoPtr){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	if(TxPduId == 0){
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d103      	bne.n	8000d60 <CanIf_Transmit+0x18>
		txHeader.StdId = 0x100;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	e005      	b.n	8000d6c <CanIf_Transmit+0x24>
	}
	else if(TxPduId == 1){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d102      	bne.n	8000d6c <CanIf_Transmit+0x24>
		txHeader.StdId = 0x200;
 8000d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d6a:	613b      	str	r3, [r7, #16]
	}

	txHeader.ExtId = 0x00;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	txHeader.IDE = CAN_ID_STD;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
	txHeader.RTR = CAN_RTR_DATA;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
	txHeader.DLC = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0);
 8000d7c:	bf00      	nop
 8000d7e:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <CanIf_Transmit+0x7c>)
 8000d80:	f002 f9b7 	bl	80030f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0f9      	beq.n	8000d7e <CanIf_Transmit+0x36>
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, PduInfoPtr->Data, &txMailbox) != HAL_OK) {
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	f107 0110 	add.w	r1, r7, #16
 8000d94:	480b      	ldr	r0, [pc, #44]	; (8000dc4 <CanIf_Transmit+0x7c>)
 8000d96:	f002 f8d1 	bl	8002f3c <HAL_CAN_AddTxMessage>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <CanIf_Transmit+0x5e>
		// Transmission error
		Error_Handler();
 8000da0:	f001 faa4 	bl	80022ec <Error_Handler>
	}
	else if(CanNm_TxCallback != NULL && TxPduId == 1){
		CanNm_TxCallback();
	}
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
}
 8000da4:	e009      	b.n	8000dba <CanIf_Transmit+0x72>
	else if(CanNm_TxCallback != NULL && TxPduId == 1){
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <CanIf_Transmit+0x80>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <CanIf_Transmit+0x72>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d102      	bne.n	8000dba <CanIf_Transmit+0x72>
		CanNm_TxCallback();
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <CanIf_Transmit+0x80>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4798      	blx	r3
}
 8000dba:	bf00      	nop
 8000dbc:	3728      	adds	r7, #40	; 0x28
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20004178 	.word	0x20004178
 8000dc8:	20003114 	.word	0x20003114

08000dcc <CanIf_Receive>:
/**
 *  @brief CAN interface receive data
 *  @param  None
 *  @return None
 */
void CanIf_Receive(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	uint32_t PDU_ID;
	while(1){
		if(CanIf_Rx){
 8000dd2:	4b36      	ldr	r3, [pc, #216]	; (8000eac <CanIf_Receive+0xe0>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d062      	beq.n	8000ea2 <CanIf_Receive+0xd6>
			CanIf_Rx = 0;
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <CanIf_Receive+0xe0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
			CanIfPduInfo.Length = rxHeader.DLC;
 8000de2:	4b33      	ldr	r3, [pc, #204]	; (8000eb0 <CanIf_Receive+0xe4>)
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <CanIf_Receive+0xe8>)
 8000de8:	6093      	str	r3, [r2, #8]
			switch(rxHeader.StdId)
 8000dea:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <CanIf_Receive+0xe4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000df2:	d03c      	beq.n	8000e6e <CanIf_Receive+0xa2>
 8000df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000df8:	d83c      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000dfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000dfe:	d033      	beq.n	8000e68 <CanIf_Receive+0x9c>
 8000e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e04:	d836      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000e06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e0a:	d02a      	beq.n	8000e62 <CanIf_Receive+0x96>
 8000e0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000e10:	d830      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000e12:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e16:	d021      	beq.n	8000e5c <CanIf_Receive+0x90>
 8000e18:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e1c:	d82a      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e22:	d018      	beq.n	8000e56 <CanIf_Receive+0x8a>
 8000e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e28:	d824      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e2e:	d00f      	beq.n	8000e50 <CanIf_Receive+0x84>
 8000e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e34:	d81e      	bhi.n	8000e74 <CanIf_Receive+0xa8>
 8000e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e3a:	d003      	beq.n	8000e44 <CanIf_Receive+0x78>
 8000e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e40:	d003      	beq.n	8000e4a <CanIf_Receive+0x7e>
 8000e42:	e017      	b.n	8000e74 <CanIf_Receive+0xa8>
			{
			case 0x100 :PDU_ID = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
			break;
 8000e48:	e014      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x200 :PDU_ID = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
			break;
 8000e4e:	e011      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x300 :PDU_ID = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
			break;
 8000e54:	e00e      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x400 :PDU_ID = 3;
 8000e56:	2303      	movs	r3, #3
 8000e58:	607b      	str	r3, [r7, #4]
			break;
 8000e5a:	e00b      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x500 :PDU_ID = 4;
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	607b      	str	r3, [r7, #4]
			break;
 8000e60:	e008      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x600 :PDU_ID = 5;
 8000e62:	2305      	movs	r3, #5
 8000e64:	607b      	str	r3, [r7, #4]
			break;
 8000e66:	e005      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x700 :PDU_ID = 6;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	607b      	str	r3, [r7, #4]
			break;
 8000e6c:	e002      	b.n	8000e74 <CanIf_Receive+0xa8>
			case 0x800 :PDU_ID = 7;
 8000e6e:	2307      	movs	r3, #7
 8000e70:	607b      	str	r3, [r7, #4]
			break;
 8000e72:	bf00      	nop
			}

			if(CanTp_Callback != NULL && PDU_ID == 0)
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <CanIf_Receive+0xec>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d008      	beq.n	8000e8e <CanIf_Receive+0xc2>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d105      	bne.n	8000e8e <CanIf_Receive+0xc2>
			{
				CanTp_Callback(PDU_ID, &CanIfPduInfo);
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <CanIf_Receive+0xec>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	490b      	ldr	r1, [pc, #44]	; (8000eb4 <CanIf_Receive+0xe8>)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	4798      	blx	r3
 8000e8c:	e009      	b.n	8000ea2 <CanIf_Receive+0xd6>
			}
			else if(CanNm_RxCallback != NULL && PDU_ID == 1){
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <CanIf_Receive+0xf0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d005      	beq.n	8000ea2 <CanIf_Receive+0xd6>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d102      	bne.n	8000ea2 <CanIf_Receive+0xd6>
				CanNm_RxCallback();
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <CanIf_Receive+0xf0>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4798      	blx	r3
			}
		}
		vTaskDelay(10);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f005 fdd2 	bl	8006a4c <vTaskDelay>
		if(CanIf_Rx){
 8000ea8:	e793      	b.n	8000dd2 <CanIf_Receive+0x6>
 8000eaa:	bf00      	nop
 8000eac:	2000310c 	.word	0x2000310c
 8000eb0:	200030e4 	.word	0x200030e4
 8000eb4:	20003100 	.word	0x20003100
 8000eb8:	20003110 	.word	0x20003110
 8000ebc:	20003118 	.word	0x20003118

08000ec0 <CanIf_setCallback>:
	}
}

void CanIf_setCallback(Std_ReturnType (*IF_Callback)(uint32_t RxPduId, PduInfoTRx* PduInfoPtr)){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	if(IF_Callback != NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <CanIf_setCallback+0x14>
	{
		CanTp_Callback = IF_Callback ;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <CanIf_setCallback+0x20>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20003110 	.word	0x20003110

08000ee4 <CanIf_setNmTxCallback>:

void CanIf_setNmTxCallback(void (*PTF)()){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	if(PTF!=NULL){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <CanIf_setNmTxCallback+0x14>
		CanNm_TxCallback= PTF;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <CanIf_setNmTxCallback+0x20>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6013      	str	r3, [r2, #0]
	}
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	20003114 	.word	0x20003114

08000f08 <CanIf_setNmRxCallback>:

void CanIf_setNmRxCallback(void (*PTF)()){
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if(PTF!=NULL){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <CanIf_setNmRxCallback+0x14>
		CanNm_RxCallback= PTF;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <CanIf_setNmRxCallback+0x20>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6013      	str	r3, [r2, #0]
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20003118 	.word	0x20003118

08000f2c <CanNm_Sleep>:

void (*GlobalTxPTF)() = NULL;


void CanNm_Sleep(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	// Set CAN network mode to bus sleep mode
	CanNm_Mode = BUS_SLEEP_MODE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <CanNm_Sleep+0x84>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]

	// Set wake-up event state to sleep
	WakeUp_Event = SLEEP;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <CanNm_Sleep+0x88>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	701a      	strb	r2, [r3, #0]

	// Set network mode state to none
	NetworkModeState = NONE;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <CanNm_Sleep+0x8c>)
 8000f3e:	2203      	movs	r2, #3
 8000f40:	701a      	strb	r2, [r3, #0]

	// Initialize all timers to stopped state
	NM_Timer = STOPPED;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <CanNm_Sleep+0x90>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
	Repeat_Message_Timer = STOPPED;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <CanNm_Sleep+0x94>)
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	701a      	strb	r2, [r3, #0]
	Bus_Sleep_Timer = STOPPED;
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <CanNm_Sleep+0x98>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	701a      	strb	r2, [r3, #0]
	Send_MSG_Timer = STOPPED;
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <CanNm_Sleep+0x9c>)
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
	//reset all timers
	//reset Nm timer

	HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 8000f5a:	481c      	ldr	r0, [pc, #112]	; (8000fcc <CanNm_Sleep+0xa0>)
 8000f5c:	f003 fe94 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM7->CNT = 0; // Reset Timer7 counter to 0
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <CanNm_Sleep+0xa4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
	//reset rep msg timer
	HAL_TIM_Base_Stop_IT(&htim4); // Stop Timer4
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <CanNm_Sleep+0xa8>)
 8000f68:	f003 fe8e 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM4->CNT = 0; // Reset Timer4 counter to 0
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <CanNm_Sleep+0xac>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
	//reset prepare bus sleep timer
	HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer3
 8000f72:	481a      	ldr	r0, [pc, #104]	; (8000fdc <CanNm_Sleep+0xb0>)
 8000f74:	f003 fe88 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM3->CNT = 0; // Reset Timer3 counter to 0
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <CanNm_Sleep+0xb4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
	//reset send msg timer
	HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer12
 8000f7e:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <CanNm_Sleep+0xb8>)
 8000f80:	f003 fe82 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0; // Reset Timer12 counter to 0
 8000f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24

	// Set network state to network released
	Network_State = NETWORK_RELEASED;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <CanNm_Sleep+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

	// Initialize message flags and repeat message states to 0
	NM_MSG_RecFlag = 0;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <CanNm_Sleep+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	NM_MSG_TranFlag = 0;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <CanNm_Sleep+0xc4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
	Rep_MSG_Bit_State = 0;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <CanNm_Sleep+0xc8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	Rep_MSG_State_Req = 0;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <CanNm_Sleep+0xcc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]

	// Enter Sleep Mode
	//	HAL_SuspendTick();
	//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000001e 	.word	0x2000001e
 8000fb4:	2000001f 	.word	0x2000001f
 8000fb8:	20000020 	.word	0x20000020
 8000fbc:	20000021 	.word	0x20000021
 8000fc0:	20000022 	.word	0x20000022
 8000fc4:	20000023 	.word	0x20000023
 8000fc8:	20000024 	.word	0x20000024
 8000fcc:	200045c0 	.word	0x200045c0
 8000fd0:	40001400 	.word	0x40001400
 8000fd4:	20004530 	.word	0x20004530
 8000fd8:	40000800 	.word	0x40000800
 8000fdc:	200044e8 	.word	0x200044e8
 8000fe0:	40000400 	.word	0x40000400
 8000fe4:	200044a0 	.word	0x200044a0
 8000fe8:	2000311c 	.word	0x2000311c
 8000fec:	2000311d 	.word	0x2000311d
 8000ff0:	2000311e 	.word	0x2000311e
 8000ff4:	2000311f 	.word	0x2000311f
 8000ff8:	20003120 	.word	0x20003120

08000ffc <CanNm_Init>:
void CanNm_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	// Initialize the CAN network management to sleep mode and all related variables
	CanIf_setNmTxCallback(CanNm_TxConfirmation);
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <CanNm_Init+0x30>)
 8001002:	f7ff ff6f 	bl	8000ee4 <CanIf_setNmTxCallback>
	CanIf_setNmRxCallback(CanNm_RxIndication);
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <CanNm_Init+0x34>)
 8001008:	f7ff ff7e 	bl	8000f08 <CanIf_setNmRxCallback>

	CanNm_Sleep();
 800100c:	f7ff ff8e 	bl	8000f2c <CanNm_Sleep>
	HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <CanNm_Init+0x38>)
 8001012:	f003 fdc9 	bl	8004ba8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim4); // Start Timer4 again
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <CanNm_Init+0x3c>)
 8001018:	f003 fdc6 	bl	8004ba8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim3); // Start Timer3 again
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <CanNm_Init+0x40>)
 800101e:	f003 fdc3 	bl	8004ba8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Base_Start_IT(&htim2); // Start Timer12 again
 8001022:	4807      	ldr	r0, [pc, #28]	; (8001040 <CanNm_Init+0x44>)
 8001024:	f003 fdc0 	bl	8004ba8 <HAL_TIM_Base_Start_IT>


	// Enter Sleep Mode
	//	HAL_SuspendTick();
	//	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	080014bd 	.word	0x080014bd
 8001030:	080013f9 	.word	0x080013f9
 8001034:	200045c0 	.word	0x200045c0
 8001038:	20004530 	.word	0x20004530
 800103c:	200044e8 	.word	0x200044e8
 8001040:	200044a0 	.word	0x200044a0

08001044 <CanNm_MainFunction>:

void CanNm_MainFunction()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	while(1){
		switch(CanNm_Mode)
 8001048:	4ba6      	ldr	r3, [pc, #664]	; (80012e4 <CanNm_MainFunction+0x2a0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b02      	cmp	r3, #2
 800104e:	f000 8183 	beq.w	8001358 <CanNm_MainFunction+0x314>
 8001052:	2b02      	cmp	r3, #2
 8001054:	f300 81b0 	bgt.w	80013b8 <CanNm_MainFunction+0x374>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d024      	beq.n	80010a6 <CanNm_MainFunction+0x62>
 800105c:	2b01      	cmp	r3, #1
 800105e:	f040 81ab 	bne.w	80013b8 <CanNm_MainFunction+0x374>
		{
		case BUS_SLEEP_MODE:
			HAL_UART_Transmit(&huart2,(uint8_t*) "\r\nBUS_SLEEP_MODE\r\n", strlen("\r\nBUS_SLEEP_MODE\r\n"), HAL_MAX_DELAY);
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2212      	movs	r2, #18
 8001068:	499f      	ldr	r1, [pc, #636]	; (80012e8 <CanNm_MainFunction+0x2a4>)
 800106a:	48a0      	ldr	r0, [pc, #640]	; (80012ec <CanNm_MainFunction+0x2a8>)
 800106c:	f004 fa49 	bl	8005502 <HAL_UART_Transmit>

			if(WakeUp_Event != SLEEP)
 8001070:	4b9f      	ldr	r3, [pc, #636]	; (80012f0 <CanNm_MainFunction+0x2ac>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	f000 81a1 	beq.w	80013bc <CanNm_MainFunction+0x378>
			{
				// 1- Start NM TimeOut Timer
				NM_Timer = RUNNING;
 800107a:	4b9e      	ldr	r3, [pc, #632]	; (80012f4 <CanNm_MainFunction+0x2b0>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
				// Start NM Timer here
				HAL_TIM_Base_Start_IT(&htim7);
 8001080:	489d      	ldr	r0, [pc, #628]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 8001082:	f003 fd91 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				// 2- Start REPEAT_MESSAGE Timer
				Repeat_Message_Timer = RUNNING; //timeout must be less than NM_Timer
 8001086:	4b9d      	ldr	r3, [pc, #628]	; (80012fc <CanNm_MainFunction+0x2b8>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim4);
 800108c:	489c      	ldr	r0, [pc, #624]	; (8001300 <CanNm_MainFunction+0x2bc>)
 800108e:	f003 fd8b 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				// Start REPEAT_MESSAGE Timer here

				// 3- Notify Nm_NetworkMode --> change mode to Networkmode
				CanNm_Mode = NETWORK_MODE;
 8001092:	4b94      	ldr	r3, [pc, #592]	; (80012e4 <CanNm_MainFunction+0x2a0>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
				NetworkModeState = REPEAT_MESSAGE;
 8001098:	4b9a      	ldr	r3, [pc, #616]	; (8001304 <CanNm_MainFunction+0x2c0>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
				SEND_REPEAT_MESSAGE = 1;
 800109e:	4b9a      	ldr	r3, [pc, #616]	; (8001308 <CanNm_MainFunction+0x2c4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				// Do nothing
			}
			break;
 80010a4:	e18a      	b.n	80013bc <CanNm_MainFunction+0x378>
		case NETWORK_MODE:

			switch(NetworkModeState)
 80010a6:	4b97      	ldr	r3, [pc, #604]	; (8001304 <CanNm_MainFunction+0x2c0>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	f000 80c5 	beq.w	800123a <CanNm_MainFunction+0x1f6>
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	f300 8149 	bgt.w	8001348 <CanNm_MainFunction+0x304>
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d002      	beq.n	80010c0 <CanNm_MainFunction+0x7c>
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d056      	beq.n	800116c <CanNm_MainFunction+0x128>

				break;

			default:

				break;
 80010be:	e143      	b.n	8001348 <CanNm_MainFunction+0x304>
				HAL_UART_Transmit(&huart2,(uint8_t*) "\r\nREPEAT_MESSAGE\r\n", strlen("\r\nREPEAT_MESSAGE\r\n"), HAL_MAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	2212      	movs	r2, #18
 80010c6:	4991      	ldr	r1, [pc, #580]	; (800130c <CanNm_MainFunction+0x2c8>)
 80010c8:	4888      	ldr	r0, [pc, #544]	; (80012ec <CanNm_MainFunction+0x2a8>)
 80010ca:	f004 fa1a 	bl	8005502 <HAL_UART_Transmit>
				if(SEND_REPEAT_MESSAGE)
 80010ce:	4b8e      	ldr	r3, [pc, #568]	; (8001308 <CanNm_MainFunction+0x2c4>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <CanNm_MainFunction+0xa0>
					SEND_REPEAT_MESSAGE =0;
 80010d8:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <CanNm_MainFunction+0x2c4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
					GlobalNmPdu.Data[0] = 1;
 80010de:	4b8c      	ldr	r3, [pc, #560]	; (8001310 <CanNm_MainFunction+0x2cc>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
				if(NM_Timer == TIMEOUT || NM_MSG_RecFlag == 1 || NM_MSG_TranFlag == 1 )
 80010e4:	4b83      	ldr	r3, [pc, #524]	; (80012f4 <CanNm_MainFunction+0x2b0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d009      	beq.n	8001100 <CanNm_MainFunction+0xbc>
 80010ec:	4b89      	ldr	r3, [pc, #548]	; (8001314 <CanNm_MainFunction+0x2d0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d004      	beq.n	8001100 <CanNm_MainFunction+0xbc>
 80010f6:	4b88      	ldr	r3, [pc, #544]	; (8001318 <CanNm_MainFunction+0x2d4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10b      	bne.n	8001118 <CanNm_MainFunction+0xd4>
					HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 8001100:	487d      	ldr	r0, [pc, #500]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 8001102:	f003 fdc1 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM7->CNT = 0; // Reset Timer7 counter to 0
 8001106:	4b85      	ldr	r3, [pc, #532]	; (800131c <CanNm_MainFunction+0x2d8>)
 8001108:	2200      	movs	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 800110c:	487a      	ldr	r0, [pc, #488]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800110e:	f003 fd4b 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
					NM_MSG_RecFlag = 0;
 8001112:	4b80      	ldr	r3, [pc, #512]	; (8001314 <CanNm_MainFunction+0x2d0>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
				if(Repeat_Message_Timer == TIMEOUT && NM_Timer == RUNNING)
 8001118:	4b78      	ldr	r3, [pc, #480]	; (80012fc <CanNm_MainFunction+0x2b8>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	f040 8115 	bne.w	800134c <CanNm_MainFunction+0x308>
 8001122:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <CanNm_MainFunction+0x2b0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8110 	bne.w	800134c <CanNm_MainFunction+0x308>
					HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 800112c:	4872      	ldr	r0, [pc, #456]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800112e:	f003 fdab 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM7->CNT = 0; // Reset Timer7 counter to 0
 8001132:	4b7a      	ldr	r3, [pc, #488]	; (800131c <CanNm_MainFunction+0x2d8>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 8001138:	486f      	ldr	r0, [pc, #444]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800113a:	f003 fd35 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
					if(Network_State == NETWORK_RELEASED)
 800113e:	4b78      	ldr	r3, [pc, #480]	; (8001320 <CanNm_MainFunction+0x2dc>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <CanNm_MainFunction+0x110>
						NetworkModeState = READY_SLEEP;
 8001146:	4b6f      	ldr	r3, [pc, #444]	; (8001304 <CanNm_MainFunction+0x2c0>)
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim3);
 800114c:	4875      	ldr	r0, [pc, #468]	; (8001324 <CanNm_MainFunction+0x2e0>)
 800114e:	f003 fd2b 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				break;
 8001152:	e0fb      	b.n	800134c <CanNm_MainFunction+0x308>
					else if(Network_State == NETWORK_REQUESTED)
 8001154:	4b72      	ldr	r3, [pc, #456]	; (8001320 <CanNm_MainFunction+0x2dc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	f040 80f7 	bne.w	800134c <CanNm_MainFunction+0x308>
						HAL_TIM_Base_Start_IT(&htim2);
 800115e:	4872      	ldr	r0, [pc, #456]	; (8001328 <CanNm_MainFunction+0x2e4>)
 8001160:	f003 fd22 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
						NetworkModeState = NORMAL_OPERATION;
 8001164:	4b67      	ldr	r3, [pc, #412]	; (8001304 <CanNm_MainFunction+0x2c0>)
 8001166:	2202      	movs	r2, #2
 8001168:	701a      	strb	r2, [r3, #0]
				break;
 800116a:	e0ef      	b.n	800134c <CanNm_MainFunction+0x308>
				HAL_UART_Transmit(&huart2,(uint8_t*) "\r\nREADY_SLEEP\r\n", strlen("\r\nREADY_SLEEP\r\n"), HAL_MAX_DELAY);
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	220f      	movs	r2, #15
 8001172:	496e      	ldr	r1, [pc, #440]	; (800132c <CanNm_MainFunction+0x2e8>)
 8001174:	485d      	ldr	r0, [pc, #372]	; (80012ec <CanNm_MainFunction+0x2a8>)
 8001176:	f004 f9c4 	bl	8005502 <HAL_UART_Transmit>
				if(NM_MSG_RecFlag == 1)
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <CanNm_MainFunction+0x2d0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d114      	bne.n	80011ae <CanNm_MainFunction+0x16a>
					NM_MSG_RecFlag = 0;
 8001184:	4b63      	ldr	r3, [pc, #396]	; (8001314 <CanNm_MainFunction+0x2d0>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 800118a:	485b      	ldr	r0, [pc, #364]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800118c:	f003 fd7c 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM7->CNT = 0; // Reset Timer7 counter to 0
 8001190:	4b62      	ldr	r3, [pc, #392]	; (800131c <CanNm_MainFunction+0x2d8>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 8001196:	4858      	ldr	r0, [pc, #352]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 8001198:	f003 fd06 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
					if(Rep_MSG_Bit_State){
 800119c:	4b64      	ldr	r3, [pc, #400]	; (8001330 <CanNm_MainFunction+0x2ec>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d014      	beq.n	80011d0 <CanNm_MainFunction+0x18c>
						Rep_MSG_State_Req = 1;
 80011a6:	4b63      	ldr	r3, [pc, #396]	; (8001334 <CanNm_MainFunction+0x2f0>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e010      	b.n	80011d0 <CanNm_MainFunction+0x18c>
				else if(NM_MSG_TranFlag == 1){
 80011ae:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <CanNm_MainFunction+0x2d4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10b      	bne.n	80011d0 <CanNm_MainFunction+0x18c>
					HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 80011b8:	484f      	ldr	r0, [pc, #316]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 80011ba:	f003 fd65 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM7->CNT = 0; // Reset Timer7 counter to 0
 80011be:	4b57      	ldr	r3, [pc, #348]	; (800131c <CanNm_MainFunction+0x2d8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 80011c4:	484c      	ldr	r0, [pc, #304]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 80011c6:	f003 fcef 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
					NetworkModeState = NORMAL_OPERATION;
 80011ca:	4b4e      	ldr	r3, [pc, #312]	; (8001304 <CanNm_MainFunction+0x2c0>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	701a      	strb	r2, [r3, #0]
				if(NM_Timer == TIMEOUT)
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <CanNm_MainFunction+0x2b0>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d114      	bne.n	8001202 <CanNm_MainFunction+0x1be>
					NetworkModeState = NONE;
 80011d8:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <CanNm_MainFunction+0x2c0>)
 80011da:	2203      	movs	r2, #3
 80011dc:	701a      	strb	r2, [r3, #0]
					CanNm_Mode = PREPARE_BUS_SLEEP_MODE;
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <CanNm_MainFunction+0x2a0>)
 80011e0:	2202      	movs	r2, #2
 80011e2:	701a      	strb	r2, [r3, #0]
					Bus_Sleep_Timer = RUNNING; // Start Bus Sleep Timer
 80011e4:	4b54      	ldr	r3, [pc, #336]	; (8001338 <CanNm_MainFunction+0x2f4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
					NM_Timer = STOPPED;
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <CanNm_MainFunction+0x2b0>)
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim3); // Stop Timer3
 80011f0:	484c      	ldr	r0, [pc, #304]	; (8001324 <CanNm_MainFunction+0x2e0>)
 80011f2:	f003 fd49 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM3->CNT = 0; // Reset Timer3 counter to 0
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <CanNm_MainFunction+0x2f8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim3); // Start Timer3 again
 80011fc:	4849      	ldr	r0, [pc, #292]	; (8001324 <CanNm_MainFunction+0x2e0>)
 80011fe:	f003 fcd3 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				if(Rep_MSG_State_Req){
 8001202:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <CanNm_MainFunction+0x2f0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a1 	beq.w	8001350 <CanNm_MainFunction+0x30c>
					Rep_MSG_State_Req = 0;
 800120e:	4b49      	ldr	r3, [pc, #292]	; (8001334 <CanNm_MainFunction+0x2f0>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
					NetworkModeState = REPEAT_MESSAGE;
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <CanNm_MainFunction+0x2c0>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
					SEND_REPEAT_MESSAGE = 1;
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <CanNm_MainFunction+0x2c4>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
					Repeat_Message_Timer = RUNNING;
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <CanNm_MainFunction+0x2b8>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim4); // Stop Timer4
 8001226:	4836      	ldr	r0, [pc, #216]	; (8001300 <CanNm_MainFunction+0x2bc>)
 8001228:	f003 fd2e 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM4->CNT = 0; // Reset Timer4 counter to 0
 800122c:	4b44      	ldr	r3, [pc, #272]	; (8001340 <CanNm_MainFunction+0x2fc>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim4); // Start Timer4 again
 8001232:	4833      	ldr	r0, [pc, #204]	; (8001300 <CanNm_MainFunction+0x2bc>)
 8001234:	f003 fcb8 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				break;
 8001238:	e08a      	b.n	8001350 <CanNm_MainFunction+0x30c>
				HAL_UART_Transmit(&huart2,(uint8_t*) "\r\nNORMAL_OPERATION\r\n", strlen("\r\nNORMAL_OPERATION\r\n"), HAL_MAX_DELAY);
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	2214      	movs	r2, #20
 8001240:	4940      	ldr	r1, [pc, #256]	; (8001344 <CanNm_MainFunction+0x300>)
 8001242:	482a      	ldr	r0, [pc, #168]	; (80012ec <CanNm_MainFunction+0x2a8>)
 8001244:	f004 f95d 	bl	8005502 <HAL_UART_Transmit>
				if(NM_MSG_RecFlag == 1 || NM_MSG_TranFlag == 1)
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <CanNm_MainFunction+0x2d0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d004      	beq.n	800125c <CanNm_MainFunction+0x218>
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <CanNm_MainFunction+0x2d4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d113      	bne.n	8001284 <CanNm_MainFunction+0x240>
					HAL_TIM_Base_Stop_IT(&htim7); // Stop Timer7
 800125c:	4826      	ldr	r0, [pc, #152]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800125e:	f003 fd13 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM7->CNT = 0; // Reset Timer7 counter to 0
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <CanNm_MainFunction+0x2d8>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim7); // Start Timer7 again
 8001268:	4823      	ldr	r0, [pc, #140]	; (80012f8 <CanNm_MainFunction+0x2b4>)
 800126a:	f003 fc9d 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
					NM_MSG_RecFlag = 0;
 800126e:	4b29      	ldr	r3, [pc, #164]	; (8001314 <CanNm_MainFunction+0x2d0>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
					if(Rep_MSG_Bit_State){
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <CanNm_MainFunction+0x2ec>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <CanNm_MainFunction+0x240>
						Rep_MSG_State_Req = 1;
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <CanNm_MainFunction+0x2f0>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
				if(Rep_MSG_State_Req){
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <CanNm_MainFunction+0x2f0>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d015      	beq.n	80012ba <CanNm_MainFunction+0x276>
					Rep_MSG_State_Req = 0;
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <CanNm_MainFunction+0x2f0>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
					NetworkModeState = REPEAT_MESSAGE;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <CanNm_MainFunction+0x2c0>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
					SEND_REPEAT_MESSAGE = 1;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <CanNm_MainFunction+0x2c4>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
					Repeat_Message_Timer = RUNNING;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <CanNm_MainFunction+0x2b8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim4); // Stop Timer4
 80012a6:	4816      	ldr	r0, [pc, #88]	; (8001300 <CanNm_MainFunction+0x2bc>)
 80012a8:	f003 fcee 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
					TIM4->CNT = 0; // Reset Timer4 counter to 0
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <CanNm_MainFunction+0x2fc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim4); // Start Timer4 again
 80012b2:	4813      	ldr	r0, [pc, #76]	; (8001300 <CanNm_MainFunction+0x2bc>)
 80012b4:	f003 fc78 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
				break;
 80012b8:	e04c      	b.n	8001354 <CanNm_MainFunction+0x310>
				else if(Network_State == NETWORK_RELEASED)
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <CanNm_MainFunction+0x2dc>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <CanNm_MainFunction+0x286>
					NetworkModeState = READY_SLEEP;
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <CanNm_MainFunction+0x2c0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
				break;
 80012c8:	e044      	b.n	8001354 <CanNm_MainFunction+0x310>
				else if(NM_MSG_TranFlag == 1){
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <CanNm_MainFunction+0x2d4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d13f      	bne.n	8001354 <CanNm_MainFunction+0x310>
					NM_MSG_TranFlag = 0;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <CanNm_MainFunction+0x2d4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
					GlobalNmPdu.Data[0] = 1;
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <CanNm_MainFunction+0x2cc>)
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
				break;
 80012e0:	e038      	b.n	8001354 <CanNm_MainFunction+0x310>
 80012e2:	bf00      	nop
 80012e4:	2000001e 	.word	0x2000001e
 80012e8:	08007b4c 	.word	0x08007b4c
 80012ec:	20004608 	.word	0x20004608
 80012f0:	2000001f 	.word	0x2000001f
 80012f4:	20000021 	.word	0x20000021
 80012f8:	200045c0 	.word	0x200045c0
 80012fc:	20000022 	.word	0x20000022
 8001300:	20004530 	.word	0x20004530
 8001304:	20000020 	.word	0x20000020
 8001308:	20003121 	.word	0x20003121
 800130c:	08007b60 	.word	0x08007b60
 8001310:	20000028 	.word	0x20000028
 8001314:	2000311d 	.word	0x2000311d
 8001318:	2000311e 	.word	0x2000311e
 800131c:	40001400 	.word	0x40001400
 8001320:	2000311c 	.word	0x2000311c
 8001324:	200044e8 	.word	0x200044e8
 8001328:	200044a0 	.word	0x200044a0
 800132c:	08007b74 	.word	0x08007b74
 8001330:	2000311f 	.word	0x2000311f
 8001334:	20003120 	.word	0x20003120
 8001338:	20000023 	.word	0x20000023
 800133c:	40000400 	.word	0x40000400
 8001340:	40000800 	.word	0x40000800
 8001344:	08007b84 	.word	0x08007b84
				break;
 8001348:	bf00      	nop
 800134a:	e03a      	b.n	80013c2 <CanNm_MainFunction+0x37e>
				break;
 800134c:	bf00      	nop
 800134e:	e038      	b.n	80013c2 <CanNm_MainFunction+0x37e>
				break;
 8001350:	bf00      	nop
 8001352:	e036      	b.n	80013c2 <CanNm_MainFunction+0x37e>
				break;
 8001354:	bf00      	nop
			}
			break;
 8001356:	e034      	b.n	80013c2 <CanNm_MainFunction+0x37e>

			case PREPARE_BUS_SLEEP_MODE:
				HAL_UART_Transmit(&huart2,(uint8_t*) "\r\nPREPARE_BUS_SLEEP_MODE\r\n", strlen("\r\nPREPARE_BUS_SLEEP_MODE\r\n"), HAL_MAX_DELAY);
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	221a      	movs	r2, #26
 800135e:	491b      	ldr	r1, [pc, #108]	; (80013cc <CanNm_MainFunction+0x388>)
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <CanNm_MainFunction+0x38c>)
 8001362:	f004 f8ce 	bl	8005502 <HAL_UART_Transmit>

				if(Bus_Sleep_Timer == TIMEOUT)
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <CanNm_MainFunction+0x390>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d107      	bne.n	800137e <CanNm_MainFunction+0x33a>
				{
					CanNm_Mode = BUS_SLEEP_MODE;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <CanNm_MainFunction+0x394>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
					Bus_Sleep_Timer = STOPPED;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <CanNm_MainFunction+0x390>)
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
					CanNm_Sleep(); //Enter sleep mode
 800137a:	f7ff fdd7 	bl	8000f2c <CanNm_Sleep>
				}
				if(NM_MSG_RecFlag == 1 || NM_MSG_TranFlag == 1)
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <CanNm_MainFunction+0x398>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d004      	beq.n	8001392 <CanNm_MainFunction+0x34e>
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <CanNm_MainFunction+0x39c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b01      	cmp	r3, #1
 8001390:	d116      	bne.n	80013c0 <CanNm_MainFunction+0x37c>
				{
					CanNm_Mode = NETWORK_MODE;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <CanNm_MainFunction+0x394>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
					NM_Timer = RUNNING;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <CanNm_MainFunction+0x3a0>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
					Repeat_Message_Timer = RUNNING;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <CanNm_MainFunction+0x3a4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
					NetworkModeState = REPEAT_MESSAGE;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <CanNm_MainFunction+0x3a8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
					SEND_REPEAT_MESSAGE = 1;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <CanNm_MainFunction+0x3ac>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	701a      	strb	r2, [r3, #0]
					// 1- Start NM TimeOut Timer
//					count4 = 0;
					HAL_TIM_Base_Start_IT(&htim4); // Start Timer4 again
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <CanNm_MainFunction+0x3b0>)
 80013b2:	f003 fbf9 	bl	8004ba8 <HAL_TIM_Base_Start_IT>


				}
				break;
 80013b6:	e003      	b.n	80013c0 <CanNm_MainFunction+0x37c>
			default:

				break;
 80013b8:	bf00      	nop
 80013ba:	e002      	b.n	80013c2 <CanNm_MainFunction+0x37e>
			break;
 80013bc:	bf00      	nop
 80013be:	e000      	b.n	80013c2 <CanNm_MainFunction+0x37e>
				break;
 80013c0:	bf00      	nop
		}
		vTaskDelay(100);
 80013c2:	2064      	movs	r0, #100	; 0x64
 80013c4:	f005 fb42 	bl	8006a4c <vTaskDelay>
		switch(CanNm_Mode)
 80013c8:	e63e      	b.n	8001048 <CanNm_MainFunction+0x4>
 80013ca:	bf00      	nop
 80013cc:	08007b9c 	.word	0x08007b9c
 80013d0:	20004608 	.word	0x20004608
 80013d4:	20000023 	.word	0x20000023
 80013d8:	2000001e 	.word	0x2000001e
 80013dc:	2000311d 	.word	0x2000311d
 80013e0:	2000311e 	.word	0x2000311e
 80013e4:	20000021 	.word	0x20000021
 80013e8:	20000022 	.word	0x20000022
 80013ec:	20000020 	.word	0x20000020
 80013f0:	20003121 	.word	0x20003121
 80013f4:	20004530 	.word	0x20004530

080013f8 <CanNm_RxIndication>:
	}
}
//This should be passed to CanIf_setNmRxCallback()
void CanNm_RxIndication()
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	NM_MSG_RecFlag = 1;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <CanNm_RxIndication+0x24>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	if(CanNm_Mode == BUS_SLEEP_MODE){
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <CanNm_RxIndication+0x28>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d102      	bne.n	8001410 <CanNm_RxIndication+0x18>
		WakeUp_Event = PASSIVE_WAKEUP;
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <CanNm_RxIndication+0x2c>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	}
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000311d 	.word	0x2000311d
 8001420:	2000001e 	.word	0x2000001e
 8001424:	2000001f 	.word	0x2000001f

08001428 <CanNm_NetworkRelease>:

void CanNm_NetworkRelease(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	Network_State = NETWORK_RELEASED;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <CanNm_NetworkRelease+0x28>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	Send_MSG_Timer = STOPPED;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <CanNm_NetworkRelease+0x2c>)
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]
	NM_MSG_TranFlag = 0;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <CanNm_NetworkRelease+0x30>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
	//reset send msg timer
	HAL_TIM_Base_Stop_IT(&htim2); // Stop Timer2
 800143e:	4807      	ldr	r0, [pc, #28]	; (800145c <CanNm_NetworkRelease+0x34>)
 8001440:	f003 fc22 	bl	8004c88 <HAL_TIM_Base_Stop_IT>
	TIM2->CNT = 0; // Reset Timer12 counter to 0
 8001444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	//	HAL_TIM_Base_Start_IT(&htim2); // Start Timer12 again
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000311c 	.word	0x2000311c
 8001454:	20000024 	.word	0x20000024
 8001458:	2000311e 	.word	0x2000311e
 800145c:	200044a0 	.word	0x200044a0

08001460 <CanNm_TimeOut>:

void CanNm_TimeOut(uint8_t timerNum)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	if(timerNum == 4){
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b04      	cmp	r3, #4
 800146e:	d103      	bne.n	8001478 <CanNm_TimeOut+0x18>
		Repeat_Message_Timer = TIMEOUT;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <CanNm_TimeOut+0x4c>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
		Bus_Sleep_Timer = TIMEOUT;
	}
	else if(timerNum == 2){
		Send_MSG_Timer = TIMEOUT;
	}
}
 8001476:	e013      	b.n	80014a0 <CanNm_TimeOut+0x40>
	else if(timerNum == 7){
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d103      	bne.n	8001486 <CanNm_TimeOut+0x26>
		NM_Timer = TIMEOUT;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <CanNm_TimeOut+0x50>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
}
 8001484:	e00c      	b.n	80014a0 <CanNm_TimeOut+0x40>
	else if(timerNum == 3){
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d103      	bne.n	8001494 <CanNm_TimeOut+0x34>
		Bus_Sleep_Timer = TIMEOUT;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <CanNm_TimeOut+0x54>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
}
 8001492:	e005      	b.n	80014a0 <CanNm_TimeOut+0x40>
	else if(timerNum == 2){
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d102      	bne.n	80014a0 <CanNm_TimeOut+0x40>
		Send_MSG_Timer = TIMEOUT;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <CanNm_TimeOut+0x58>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000022 	.word	0x20000022
 80014b0:	20000021 	.word	0x20000021
 80014b4:	20000023 	.word	0x20000023
 80014b8:	20000024 	.word	0x20000024

080014bc <CanNm_TxConfirmation>:
//This should be passed to CanIf_setNmTxCallback()
void CanNm_TxConfirmation(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	//send confirmation
	if(GlobalTxPTF != NULL){
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <CanNm_TxConfirmation+0x18>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <CanNm_TxConfirmation+0x12>
		GlobalTxPTF();
 80014c8:	4b02      	ldr	r3, [pc, #8]	; (80014d4 <CanNm_TxConfirmation+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4798      	blx	r3
	}
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20003124 	.word	0x20003124

080014d8 <CanNm_Transmit>:
	if(PTF != NULL){
		GlobalTxPTF = PTF;
	}
}

void CanNm_Transmit(){
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	Network_State = NETWORK_REQUESTED;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <CanNm_Transmit+0x30>)
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
	NM_MSG_TranFlag = 1;
 80014e2:	4b0a      	ldr	r3, [pc, #40]	; (800150c <CanNm_Transmit+0x34>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
	Send_MSG_Timer = RUNNING;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <CanNm_Transmit+0x38>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]

	if(CanNm_Mode == BUS_SLEEP_MODE){
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <CanNm_Transmit+0x3c>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d102      	bne.n	80014fc <CanNm_Transmit+0x24>
		WakeUp_Event = ACTIVE_WAKEUP;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <CanNm_Transmit+0x40>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
	}
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	2000311c 	.word	0x2000311c
 800150c:	2000311e 	.word	0x2000311e
 8001510:	20000024 	.word	0x20000024
 8001514:	2000001e 	.word	0x2000001e
 8001518:	2000001f 	.word	0x2000001f

0800151c <CanTp_Init>:
volatile int32_t rxCurrentMaxIndex = 0;

volatile uint8_t rxData = 0;
volatile uint8_t rxComplete = 0;

void CanTp_Init(){
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	CanIf_setCallback(CanTp_RxIndication);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <CanTp_Init+0x10>)
 8001522:	f7ff fccd 	bl	8000ec0 <CanIf_setCallback>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	080017dd 	.word	0x080017dd

08001530 <CanTp_MainFunction>:

void CanTp_MainFunction(){
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	while(1){
		if(CanTp_Rx){
 8001536:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <CanTp_MainFunction+0x238>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	b25b      	sxtb	r3, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d07b      	beq.n	8001638 <CanTp_MainFunction+0x108>
			CanTp_Rx = 0;
 8001540:	4b89      	ldr	r3, [pc, #548]	; (8001768 <CanTp_MainFunction+0x238>)
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalRxPduId != 0){
 8001546:	4b89      	ldr	r3, [pc, #548]	; (800176c <CanTp_MainFunction+0x23c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d000      	beq.n	8001550 <CanTp_MainFunction+0x20>
				while(1);
 800154e:	e7fe      	b.n	800154e <CanTp_MainFunction+0x1e>
			}
			//Get the frame type from the
			Frame_Type frame_type = CanTp_GetFrameType(GlobalRxPduInfoPtr->Data[0]);
 8001550:	4b87      	ldr	r3, [pc, #540]	; (8001770 <CanTp_MainFunction+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f95c 	bl	8001814 <CanTp_GetFrameType>
 800155c:	4603      	mov	r3, r0
 800155e:	71bb      	strb	r3, [r7, #6]
			//	Frame_Type frame_type = First_Frame

			//Call the correct decoder depending on the frame type
			//extract the length and save it in numberOfRemainingBytesToReceive and connect the data
			switch(frame_type){
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d84c      	bhi.n	8001600 <CanTp_MainFunction+0xd0>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <CanTp_MainFunction+0x3c>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800157d 	.word	0x0800157d
 8001570:	0800158f 	.word	0x0800158f
 8001574:	080015b7 	.word	0x080015b7
 8001578:	080015ef 	.word	0x080015ef
			case Single_Frame:
				CanTp_decodeSingleFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 800157c:	4b7b      	ldr	r3, [pc, #492]	; (800176c <CanTp_MainFunction+0x23c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a7b      	ldr	r2, [pc, #492]	; (8001770 <CanTp_MainFunction+0x240>)
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fa8e 	bl	8001aa8 <CanTp_decodeSingleFrame>
				break;
 800158c:	e03b      	b.n	8001606 <CanTp_MainFunction+0xd6>
			case First_Frame:
				CanTp_decodeFirstFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <CanTp_MainFunction+0x23c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	; (8001770 <CanTp_MainFunction+0x240>)
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fabb 	bl	8001b14 <CanTp_decodeFirstFrame>
				expectedFrameState = FlowControl_Frame_State;
 800159e:	4b75      	ldr	r3, [pc, #468]	; (8001774 <CanTp_MainFunction+0x244>)
 80015a0:	2202      	movs	r2, #2
 80015a2:	701a      	strb	r2, [r3, #0]
				CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 80015a4:	4b71      	ldr	r3, [pc, #452]	; (800176c <CanTp_MainFunction+0x23c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a71      	ldr	r2, [pc, #452]	; (8001770 <CanTp_MainFunction+0x240>)
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f8f8 	bl	80017a4 <CanTp_Transmit>
				break;
 80015b4:	e027      	b.n	8001606 <CanTp_MainFunction+0xd6>
			case Consecutive_Frame:
				CanTp_decodeConsecutiveFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 80015b6:	4b6d      	ldr	r3, [pc, #436]	; (800176c <CanTp_MainFunction+0x23c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6d      	ldr	r2, [pc, #436]	; (8001770 <CanTp_MainFunction+0x240>)
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fadf 	bl	8001b84 <CanTp_decodeConsecutiveFrame>
				if(numberOfConsecutiveFramesToReceive == 0 && numberOfRemainingBytesToReceive > 0){
 80015c6:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <CanTp_MainFunction+0x248>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11a      	bne.n	8001604 <CanTp_MainFunction+0xd4>
 80015ce:	4b6b      	ldr	r3, [pc, #428]	; (800177c <CanTp_MainFunction+0x24c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d016      	beq.n	8001604 <CanTp_MainFunction+0xd4>
					expectedFrameState = FlowControl_Frame_State;
 80015d6:	4b67      	ldr	r3, [pc, #412]	; (8001774 <CanTp_MainFunction+0x244>)
 80015d8:	2202      	movs	r2, #2
 80015da:	701a      	strb	r2, [r3, #0]
					CanTp_Transmit(GlobalRxPduId, (PduInfoType*) GlobalRxPduInfoPtr);
 80015dc:	4b63      	ldr	r3, [pc, #396]	; (800176c <CanTp_MainFunction+0x23c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a63      	ldr	r2, [pc, #396]	; (8001770 <CanTp_MainFunction+0x240>)
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f8dc 	bl	80017a4 <CanTp_Transmit>
				}
				break;
 80015ec:	e00a      	b.n	8001604 <CanTp_MainFunction+0xd4>
			case FlowControl_Frame:
				//adjust the numberOfConsecutiveFramesToSend variable inside a function
				//based on the number of empty buffers available in the other node
				//as indicated in the BS (block size) byte of the flow control frame
				CanTp_decodeFlowControlFrame(GlobalRxPduId, GlobalRxPduInfoPtr);
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <CanTp_MainFunction+0x23c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <CanTp_MainFunction+0x240>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 fb13 	bl	8001c24 <CanTp_decodeFlowControlFrame>
				break;
 80015fe:	e002      	b.n	8001606 <CanTp_MainFunction+0xd6>
			default:
				break;
 8001600:	bf00      	nop
 8001602:	e000      	b.n	8001606 <CanTp_MainFunction+0xd6>
				break;
 8001604:	bf00      	nop
			}

			if(frame_type == FlowControl_Frame){
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	2b03      	cmp	r3, #3
 800160a:	f000 80a8 	beq.w	800175e <CanTp_MainFunction+0x22e>

			}
			else if(numberOfRemainingBytesToReceive == 0){
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <CanTp_MainFunction+0x24c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 80a3 	bne.w	800175e <CanTp_MainFunction+0x22e>
				if(App_Callback != NULL){
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <CanTp_MainFunction+0x250>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 809e 	beq.w	800175e <CanTp_MainFunction+0x22e>
					currentIndex = 0;
 8001622:	4b58      	ldr	r3, [pc, #352]	; (8001784 <CanTp_MainFunction+0x254>)
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
					App_Callback(GlobalRxPduId, &CompletePduInfo);
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <CanTp_MainFunction+0x250>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a4f      	ldr	r2, [pc, #316]	; (800176c <CanTp_MainFunction+0x23c>)
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	4955      	ldr	r1, [pc, #340]	; (8001788 <CanTp_MainFunction+0x258>)
 8001632:	4610      	mov	r0, r2
 8001634:	4798      	blx	r3
 8001636:	e092      	b.n	800175e <CanTp_MainFunction+0x22e>
				}
			}
		}
		else if(CanTp_Tx){
 8001638:	4b54      	ldr	r3, [pc, #336]	; (800178c <CanTp_MainFunction+0x25c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b25b      	sxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 808d 	beq.w	800175e <CanTp_MainFunction+0x22e>
			//Stop the program if the PduID doesn't equal 0 :)
			if(GlobalTxPduId != 0){
 8001644:	4b52      	ldr	r3, [pc, #328]	; (8001790 <CanTp_MainFunction+0x260>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d000      	beq.n	800164e <CanTp_MainFunction+0x11e>
				while(1);
 800164c:	e7fe      	b.n	800164c <CanTp_MainFunction+0x11c>
			}

			Frame_Type frame_type = None;
 800164e:	2304      	movs	r3, #4
 8001650:	71fb      	strb	r3, [r7, #7]
			if(numberOfRemainingBytesToSend == 0 && expectedFrameState == Any_State){
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <CanTp_MainFunction+0x264>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d11c      	bne.n	8001694 <CanTp_MainFunction+0x164>
 800165a:	4b46      	ldr	r3, [pc, #280]	; (8001774 <CanTp_MainFunction+0x244>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <CanTp_MainFunction+0x164>
				numberOfRemainingBytesToSend = GlobalTxPduInfoPtr->Length;
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <CanTp_MainFunction+0x268>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a49      	ldr	r2, [pc, #292]	; (8001794 <CanTp_MainFunction+0x264>)
 800166e:	6013      	str	r3, [r2, #0]
				CompletePduInfo.Length = numberOfRemainingBytesToSend;
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <CanTp_MainFunction+0x264>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a44      	ldr	r2, [pc, #272]	; (8001788 <CanTp_MainFunction+0x258>)
 8001676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800167a:	6013      	str	r3, [r2, #0]
				if(GlobalTxPduInfoPtr->Length < 8){
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <CanTp_MainFunction+0x268>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b07      	cmp	r3, #7
 8001688:	d802      	bhi.n	8001690 <CanTp_MainFunction+0x160>
					frame_type = Single_Frame;
 800168a:	2300      	movs	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
 800168e:	e001      	b.n	8001694 <CanTp_MainFunction+0x164>
				}
				else{
					frame_type = First_Frame;
 8001690:	2301      	movs	r3, #1
 8001692:	71fb      	strb	r3, [r7, #7]
				}
			}


			if(numberOfRemainingBytesToSend > 0 || expectedFrameState == FlowControl_Frame_State){
 8001694:	4b3f      	ldr	r3, [pc, #252]	; (8001794 <CanTp_MainFunction+0x264>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <CanTp_MainFunction+0x174>
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <CanTp_MainFunction+0x244>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d14e      	bne.n	8001742 <CanTp_MainFunction+0x212>

				if(expectedFrameState == Consecutive_Frame_State){
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <CanTp_MainFunction+0x244>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d102      	bne.n	80016b2 <CanTp_MainFunction+0x182>
					frame_type = Consecutive_Frame;
 80016ac:	2302      	movs	r3, #2
 80016ae:	71fb      	strb	r3, [r7, #7]
 80016b0:	e005      	b.n	80016be <CanTp_MainFunction+0x18e>
				}
				else if(expectedFrameState == FlowControl_Frame_State){
 80016b2:	4b30      	ldr	r3, [pc, #192]	; (8001774 <CanTp_MainFunction+0x244>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d101      	bne.n	80016be <CanTp_MainFunction+0x18e>
					frame_type = FlowControl_Frame;
 80016ba:	2303      	movs	r3, #3
 80016bc:	71fb      	strb	r3, [r7, #7]
				}

				//Call the right encoder function according to the frame type
				//Make sure to adjust the numberOfRemainingBytesToSend variable to know if all the data has been sent
				//Also make sure to call the CanIf_Transmit method at the end of these functions.
				switch(frame_type){
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d83d      	bhi.n	8001740 <CanTp_MainFunction+0x210>
 80016c4:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <CanTp_MainFunction+0x19c>)
 80016c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ca:	bf00      	nop
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016ef 	.word	0x080016ef
 80016d4:	08001705 	.word	0x08001705
 80016d8:	0800172f 	.word	0x0800172f
				case Single_Frame:
					CanTp_encodeSingleFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <CanTp_MainFunction+0x260>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2d      	ldr	r2, [pc, #180]	; (8001798 <CanTp_MainFunction+0x268>)
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	4611      	mov	r1, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f8ba 	bl	8001860 <CanTp_encodeSingleFrame>
					break;
 80016ec:	e029      	b.n	8001742 <CanTp_MainFunction+0x212>
				case First_Frame:
					CanTp_encodeFirstFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 80016ee:	4b28      	ldr	r3, [pc, #160]	; (8001790 <CanTp_MainFunction+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	; (8001798 <CanTp_MainFunction+0x268>)
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f8fb 	bl	80018f4 <CanTp_encodeFirstFrame>
					frame_type = None;
 80016fe:	2304      	movs	r3, #4
 8001700:	71fb      	strb	r3, [r7, #7]
					break;
 8001702:	e01e      	b.n	8001742 <CanTp_MainFunction+0x212>
				case Consecutive_Frame:
					if(numberOfConsecutiveFramesToSend > 0){
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <CanTp_MainFunction+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00d      	beq.n	8001728 <CanTp_MainFunction+0x1f8>
						numberOfConsecutiveFramesToSend--;
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <CanTp_MainFunction+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <CanTp_MainFunction+0x26c>)
 8001714:	6013      	str	r3, [r2, #0]
						CanTp_encodeConsecutiveFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <CanTp_MainFunction+0x260>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <CanTp_MainFunction+0x268>)
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f927 	bl	8001974 <CanTp_encodeConsecutiveFrame>
					}
					else{
						frame_type = None;
						//wait for flow control to reach CanTp_RxIndication in order to change numberOfConsecutiveFramesToSend variable
					}
					break;
 8001726:	e00c      	b.n	8001742 <CanTp_MainFunction+0x212>
						frame_type = None;
 8001728:	2304      	movs	r3, #4
 800172a:	71fb      	strb	r3, [r7, #7]
					break;
 800172c:	e009      	b.n	8001742 <CanTp_MainFunction+0x212>
				case FlowControl_Frame:
					//Check the availableBuffers variable (in our case it's the size of the receive array)
					CanTp_encodeFlowControlFrame(GlobalTxPduId, GlobalTxPduInfoPtr);
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <CanTp_MainFunction+0x260>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a19      	ldr	r2, [pc, #100]	; (8001798 <CanTp_MainFunction+0x268>)
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f981 	bl	8001a40 <CanTp_encodeFlowControlFrame>
					break;
 800173e:	e000      	b.n	8001742 <CanTp_MainFunction+0x212>
				default:
					break;
 8001740:	bf00      	nop
				}
			}

			if(numberOfRemainingBytesToSend == 0){
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <CanTp_MainFunction+0x264>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <CanTp_MainFunction+0x22e>
				//Reset the expected frame
				expectedFrameState = Any_State;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <CanTp_MainFunction+0x244>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
				currentOffset = -1;
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <CanTp_MainFunction+0x270>)
 8001752:	f04f 32ff 	mov.w	r2, #4294967295
 8001756:	601a      	str	r2, [r3, #0]
				CanTp_Tx = 0;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <CanTp_MainFunction+0x25c>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
			}
		}
		vTaskDelay(100);
 800175e:	2064      	movs	r0, #100	; 0x64
 8001760:	f005 f974 	bl	8006a4c <vTaskDelay>
		if(CanTp_Rx){
 8001764:	e6e7      	b.n	8001536 <CanTp_MainFunction+0x6>
 8001766:	bf00      	nop
 8001768:	2000416c 	.word	0x2000416c
 800176c:	20004170 	.word	0x20004170
 8001770:	2000415c 	.word	0x2000415c
 8001774:	2000313c 	.word	0x2000313c
 8001778:	2000312c 	.word	0x2000312c
 800177c:	20003134 	.word	0x20003134
 8001780:	20003138 	.word	0x20003138
 8001784:	20004166 	.word	0x20004166
 8001788:	20003158 	.word	0x20003158
 800178c:	2000416d 	.word	0x2000416d
 8001790:	20004174 	.word	0x20004174
 8001794:	20003130 	.word	0x20003130
 8001798:	20004160 	.word	0x20004160
 800179c:	20003128 	.word	0x20003128
 80017a0:	20000038 	.word	0x20000038

080017a4 <CanTp_Transmit>:
	}
}

Std_ReturnType CanTp_Transmit(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	GlobalTxPduInfoPtr = PduInfoPtr;
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <CanTp_Transmit+0x2c>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	6013      	str	r3, [r2, #0]
	GlobalTxPduId = TxPduId;
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <CanTp_Transmit+0x30>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6013      	str	r3, [r2, #0]
	CanTp_Tx = 1;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <CanTp_Transmit+0x34>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20004160 	.word	0x20004160
 80017d4:	20004174 	.word	0x20004174
 80017d8:	2000416d 	.word	0x2000416d

080017dc <CanTp_RxIndication>:

Std_ReturnType CanTp_RxIndication (uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	GlobalRxPduInfoPtr = PduInfoPtr;
 80017e6:	4a08      	ldr	r2, [pc, #32]	; (8001808 <CanTp_RxIndication+0x2c>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6013      	str	r3, [r2, #0]
	GlobalRxPduId = RxPduId;
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <CanTp_RxIndication+0x30>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
	CanTp_Rx = 1;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <CanTp_RxIndication+0x34>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
	return E_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000415c 	.word	0x2000415c
 800180c:	20004170 	.word	0x20004170
 8001810:	2000416c 	.word	0x2000416c

08001814 <CanTp_GetFrameType>:

Frame_Type CanTp_GetFrameType(uint8_t PCI){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	//Switch case on the PCI to determine the frame type
	PCI >>= 4;
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	71fb      	strb	r3, [r7, #7]
	if(PCI < 4){
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d801      	bhi.n	800182e <CanTp_GetFrameType+0x1a>
		return (Frame_Type) PCI;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	e000      	b.n	8001830 <CanTp_GetFrameType+0x1c>
	}
	else{
		return None;
 800182e:	2304      	movs	r3, #4
	}
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <CanTp_setCallback>:

void CanTp_setCallback(void (*PTF)(uint32_t TxPduId, PduInfoType* PduInfoPtr)){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if(PTF != NULL){
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <CanTp_setCallback+0x14>
		App_Callback = PTF;
 800184a:	4a04      	ldr	r2, [pc, #16]	; (800185c <CanTp_setCallback+0x20>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
	}
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20003138 	.word	0x20003138

08001860 <CanTp_encodeSingleFrame>:


void CanTp_encodeSingleFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
	//	if (PduInfoPtr == NULL ) {
	//		return E_NOK; // Return E_NOK for NULL pointer
	//	}

	// Ensure the data length does not exceed the maximum payload length
	uint32_t dataLength = PduInfoPtr->Length;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	60bb      	str	r3, [r7, #8]
	EncodedPduInfo.Length = PduInfoPtr->Length;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a1b      	ldr	r2, [pc, #108]	; (80018ec <CanTp_encodeSingleFrame+0x8c>)
 800187e:	6093      	str	r3, [r2, #8]
	numberOfRemainingBytesToSend -= dataLength;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <CanTp_encodeSingleFrame+0x90>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a19      	ldr	r2, [pc, #100]	; (80018f0 <CanTp_encodeSingleFrame+0x90>)
 800188a:	6013      	str	r3, [r2, #0]
	//	if (dataLength > CAN_MAX_PAYLOAD_LENGTH) {
	//		return E_NOK; // Return E_NOK for data length exceeding CAN payload length
	//	}

	// The first byte of the CAN frame is reserved for PCI (Protocol Control Information)
	EncodedPduInfo.Data[0] = 0x00 | (dataLength & 0x0F); // PCI is 0x0N where N is the length of the data
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <CanTp_encodeSingleFrame+0x8c>)
 8001898:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	// Copy the data from PduInfoType to the CAN frame manually, starting from the second byte
	for ( i = 0; i < dataLength; i++) {
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e00a      	b.n	80018b6 <CanTp_encodeSingleFrame+0x56>
		EncodedPduInfo.Data[i + 1] = PduInfoPtr->Data[i];
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	440a      	add	r2, r1
 80018aa:	7811      	ldrb	r1, [r2, #0]
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <CanTp_encodeSingleFrame+0x8c>)
 80018ae:	54d1      	strb	r1, [r2, r3]
	for ( i = 0; i < dataLength; i++) {
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3301      	adds	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3f0      	bcc.n	80018a0 <CanTp_encodeSingleFrame+0x40>
	}

	// Fill the rest of the frame with zeros if necessary
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e007      	b.n	80018d6 <CanTp_encodeSingleFrame+0x76>
		EncodedPduInfo.Data[i] = 0;
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <CanTp_encodeSingleFrame+0x8c>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
	for (i = dataLength + 1; i < CAN_FRAME_LENGTH; i++) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d9f4      	bls.n	80018c6 <CanTp_encodeSingleFrame+0x66>
	}

	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 80018dc:	4903      	ldr	r1, [pc, #12]	; (80018ec <CanTp_encodeSingleFrame+0x8c>)
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fa32 	bl	8000d48 <CanIf_Transmit>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20003140 	.word	0x20003140
 80018f0:	20003130 	.word	0x20003130

080018f4 <CanTp_encodeFirstFrame>:
void CanTp_encodeFirstFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	/*** Local Variables ****/
	uint8_t Counter=0;
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
	PduInfoTRx EncodedPduInfo ;
	/************/

	// assume that data is [0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8 0x9 0xA]
	EncodedPduInfo.Data[0] = (0x01 <<4 ) | ((PduInfoPtr->Length)>>8 & 0x0F); // First Frame Should be 10 A 0x1 0x2 0x3 0x4 0x5 0x6
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f043 0310 	orr.w	r3, r3, #16
 8001918:	b2db      	uxtb	r3, r3
 800191a:	723b      	strb	r3, [r7, #8]
	EncodedPduInfo.Data[1] = (PduInfoPtr->Length)& 0xFF;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	727b      	strb	r3, [r7, #9]

	// Form First Frame
	for(Counter=2;Counter<8;Counter++)
 8001928:	2302      	movs	r3, #2
 800192a:	75fb      	strb	r3, [r7, #23]
 800192c:	e00b      	b.n	8001946 <CanTp_encodeFirstFrame+0x52>
	{
		EncodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter - 2];
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	1e9a      	subs	r2, r3, #2
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	6839      	ldr	r1, [r7, #0]
 8001936:	5c8a      	ldrb	r2, [r1, r2]
 8001938:	3318      	adds	r3, #24
 800193a:	443b      	add	r3, r7
 800193c:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(Counter=2;Counter<8;Counter++)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	3301      	adds	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b07      	cmp	r3, #7
 800194a:	d9f0      	bls.n	800192e <CanTp_encodeFirstFrame+0x3a>
	}

	/** Call CanIF_Transmit Function**/
	numberOfRemainingBytesToSend = (PduInfoPtr->Length - 6);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3b06      	subs	r3, #6
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <CanTp_encodeFirstFrame+0x7c>)
 8001958:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff f9f1 	bl	8000d48 <CanIf_Transmit>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20003130 	.word	0x20003130

08001974 <CanTp_encodeConsecutiveFrame>:
void CanTp_encodeConsecutiveFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]
	EncodedPduInfo.Length = numberOfRemainingBytesToSend > 7 ? 7 : numberOfRemainingBytesToSend;
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <CanTp_encodeConsecutiveFrame+0xb8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b07      	cmp	r3, #7
 8001988:	d802      	bhi.n	8001990 <CanTp_encodeConsecutiveFrame+0x1c>
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <CanTp_encodeConsecutiveFrame+0xb8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	e000      	b.n	8001992 <CanTp_encodeConsecutiveFrame+0x1e>
 8001990:	2307      	movs	r3, #7
 8001992:	4a27      	ldr	r2, [pc, #156]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 8001994:	6093      	str	r3, [r2, #8]
	EncodedPduInfo.Data[0]=(0x02 << 4) | ConsecSN;
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	f043 0320 	orr.w	r3, r3, #32
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 80019a4:	701a      	strb	r2, [r3, #0]

	currentOffset = startOffset + ConsecSN * 7;
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	1a9a      	subs	r2, r3, r2
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <CanTp_encodeConsecutiveFrame+0xc4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a20      	ldr	r2, [pc, #128]	; (8001a3c <CanTp_encodeConsecutiveFrame+0xc8>)
 80019bc:	6013      	str	r3, [r2, #0]

	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
 80019c2:	e00c      	b.n	80019de <CanTp_encodeConsecutiveFrame+0x6a>
	{
		EncodedPduInfo.Data[i+1] = PduInfoPtr->Data[i + currentOffset];
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	4b1d      	ldr	r3, [pc, #116]	; (8001a3c <CanTp_encodeConsecutiveFrame+0xc8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	441a      	add	r2, r3
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	3301      	adds	r3, #1
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	5c89      	ldrb	r1, [r1, r2]
 80019d4:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 80019d6:	54d1      	strb	r1, [r2, r3]
	for(i=0 ; i < EncodedPduInfo.Length ; i++)
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	3301      	adds	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3ed      	bcc.n	80019c4 <CanTp_encodeConsecutiveFrame+0x50>
	}

	ConsecSN++;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 80019f4:	701a      	strb	r2, [r3, #0]
	if(ConsecSN > 0xF){
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d906      	bls.n	8001a0e <CanTp_encodeConsecutiveFrame+0x9a>
		startOffset = currentOffset;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <CanTp_encodeConsecutiveFrame+0xc8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0c      	ldr	r2, [pc, #48]	; (8001a38 <CanTp_encodeConsecutiveFrame+0xc4>)
 8001a06:	6013      	str	r3, [r2, #0]
		ConsecSN = 0;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <CanTp_encodeConsecutiveFrame+0xc0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	}
	numberOfRemainingBytesToSend -= EncodedPduInfo.Length;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <CanTp_encodeConsecutiveFrame+0xb8>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <CanTp_encodeConsecutiveFrame+0xb8>)
 8001a1a:	6013      	str	r3, [r2, #0]
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <CanTp_encodeConsecutiveFrame+0xbc>)
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff f992 	bl	8000d48 <CanIf_Transmit>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20003130 	.word	0x20003130
 8001a30:	20003140 	.word	0x20003140
 8001a34:	20004164 	.word	0x20004164
 8001a38:	20004168 	.word	0x20004168
 8001a3c:	20000038 	.word	0x20000038

08001a40 <CanTp_encodeFlowControlFrame>:
void CanTp_encodeFlowControlFrame(uint32_t TxPduId, PduInfoType* PduInfoPtr){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	// Initialize the flow control frame parameters
	// Byte 0: Flow Status (0x30 for continue to send, 0x31 for wait, 0x32 for overflow/abort)
	// Byte 1: Block Size (0 for continuous sending without waiting for flow control)
	// Byte 2: Separation Time (ST, in milliseconds, 0-127, 241-249 are valid values)

	EncodedPduInfo.Data[0] = 0x30;  // Flow Status: Continue to send (CTS)
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <CanTp_encodeFlowControlFrame+0x58>)
 8001a4c:	2230      	movs	r2, #48	; 0x30
 8001a4e:	701a      	strb	r2, [r3, #0]
	EncodedPduInfo.Data[1] = availableBuffers;  // Block Size: 0 (no blocks)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <CanTp_encodeFlowControlFrame+0x5c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <CanTp_encodeFlowControlFrame+0x58>)
 8001a58:	705a      	strb	r2, [r3, #1]
	EncodedPduInfo.Data[2] = 0x00;  // Separation Time: 0 ms (no delay)
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <CanTp_encodeFlowControlFrame+0x58>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	709a      	strb	r2, [r3, #2]
	numberOfConsecutiveFramesToReceive = availableBuffers;
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <CanTp_encodeFlowControlFrame+0x5c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <CanTp_encodeFlowControlFrame+0x60>)
 8001a66:	6013      	str	r3, [r2, #0]
	// The remaining bytes can be set to 0
	for (uint8_t i = 3; i < 8; i++) {
 8001a68:	2303      	movs	r3, #3
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e006      	b.n	8001a7c <CanTp_encodeFlowControlFrame+0x3c>
		EncodedPduInfo.Data[i] = 0x00;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <CanTp_encodeFlowControlFrame+0x58>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 3; i < 8; i++) {
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d9f5      	bls.n	8001a6e <CanTp_encodeFlowControlFrame+0x2e>
	}

	// Set the length of the flow control frame
	//    EncodedPduInfo.Length = 3;
	ConsecSN = 1;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <CanTp_encodeFlowControlFrame+0x64>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
	// Use CanIf_Transmit to send the flow control frame
	CanIf_Transmit(TxPduId, &EncodedPduInfo);
 8001a88:	4903      	ldr	r1, [pc, #12]	; (8001a98 <CanTp_encodeFlowControlFrame+0x58>)
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff f95c 	bl	8000d48 <CanIf_Transmit>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20003140 	.word	0x20003140
 8001a9c:	20000034 	.word	0x20000034
 8001aa0:	2000312c 	.word	0x2000312c
 8001aa4:	20004164 	.word	0x20004164

08001aa8 <CanTp_decodeSingleFrame>:

void CanTp_decodeSingleFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
	// Extract the data length from the first byte of the CAN frame
	uint32_t dataLength = PduInfoPtr->Data[0] & 0x0F;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	60bb      	str	r3, [r7, #8]
	numberOfRemainingBytesToReceive = dataLength;
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <CanTp_decodeSingleFrame+0x60>)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6013      	str	r3, [r2, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <CanTp_decodeSingleFrame+0x60>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <CanTp_decodeSingleFrame+0x64>)
 8001ac8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001acc:	6013      	str	r3, [r2, #0]
	int i;
	// Allocate memory for the data in the PduInfoTRx struct
	for ( i = 0; i < dataLength; i++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e00b      	b.n	8001aec <CanTp_decodeSingleFrame+0x44>
		DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	5cd1      	ldrb	r1, [r2, r3]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <CanTp_decodeSingleFrame+0x68>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	460a      	mov	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < dataLength; i++) {
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d8ef      	bhi.n	8001ad4 <CanTp_decodeSingleFrame+0x2c>
	//		DecodedPduInfo.Length = 0;
	//		return DecodedPduInfo;
	//	}

	// Set the length in the PduInfoType struct
	DecodedPduInfo.Length = dataLength;
 8001af4:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <CanTp_decodeSingleFrame+0x68>)
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	6093      	str	r3, [r2, #8]

	CanTp_ConnectData(&DecodedPduInfo);
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <CanTp_decodeSingleFrame+0x68>)
 8001afc:	f000 f8cc 	bl	8001c98 <CanTp_ConnectData>
}
 8001b00:	bf00      	nop
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20003134 	.word	0x20003134
 8001b0c:	20003158 	.word	0x20003158
 8001b10:	2000314c 	.word	0x2000314c

08001b14 <CanTp_decodeFirstFrame>:
void CanTp_decodeFirstFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	numberOfRemainingBytesToReceive = ((PduInfoPtr->Data[0] & 0x0F) << 8) | PduInfoPtr->Data[1];
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	7852      	ldrb	r2, [r2, #1]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <CanTp_decodeFirstFrame+0x64>)
 8001b32:	601a      	str	r2, [r3, #0]
	CompletePduInfo.Length = numberOfRemainingBytesToReceive;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <CanTp_decodeFirstFrame+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <CanTp_decodeFirstFrame+0x68>)
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]
	DecodedPduInfo.Length=6;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <CanTp_decodeFirstFrame+0x6c>)
 8001b42:	2206      	movs	r2, #6
 8001b44:	609a      	str	r2, [r3, #8]
	uint8_t Counter=0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]

	for(Counter=0;Counter<8;Counter++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e009      	b.n	8001b64 <CanTp_decodeFirstFrame+0x50>
	{
		DecodedPduInfo.Data[Counter]=PduInfoPtr->Data[Counter+2];
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	1c9a      	adds	r2, r3, #2
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	6839      	ldr	r1, [r7, #0]
 8001b58:	5c89      	ldrb	r1, [r1, r2]
 8001b5a:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <CanTp_decodeFirstFrame+0x6c>)
 8001b5c:	54d1      	strb	r1, [r2, r3]
	for(Counter=0;Counter<8;Counter++)
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	3301      	adds	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b07      	cmp	r3, #7
 8001b68:	d9f2      	bls.n	8001b50 <CanTp_decodeFirstFrame+0x3c>
	}
	CanTp_ConnectData(&DecodedPduInfo);
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <CanTp_decodeFirstFrame+0x6c>)
 8001b6c:	f000 f894 	bl	8001c98 <CanTp_ConnectData>
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20003134 	.word	0x20003134
 8001b7c:	20003158 	.word	0x20003158
 8001b80:	2000314c 	.word	0x2000314c

08001b84 <CanTp_decodeConsecutiveFrame>:
void CanTp_decodeConsecutiveFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	numberOfConsecutiveFramesToReceive--;
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <CanTp_decodeConsecutiveFrame+0x90>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <CanTp_decodeConsecutiveFrame+0x90>)
 8001b96:	6013      	str	r3, [r2, #0]
	uint8_t i = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	73fb      	strb	r3, [r7, #15]
	DecodedPduInfo.Length = numberOfRemainingBytesToReceive > 7 ? 7 : numberOfRemainingBytesToReceive;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <CanTp_decodeConsecutiveFrame+0x94>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d802      	bhi.n	8001baa <CanTp_decodeConsecutiveFrame+0x26>
 8001ba4:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <CanTp_decodeConsecutiveFrame+0x94>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	e000      	b.n	8001bac <CanTp_decodeConsecutiveFrame+0x28>
 8001baa:	2307      	movs	r3, #7
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <CanTp_decodeConsecutiveFrame+0x98>)
 8001bae:	6093      	str	r3, [r2, #8]
	if(ConsecSN == (PduInfoPtr->Data[0] & 0x0F)){
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <CanTp_decodeConsecutiveFrame+0x9c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d122      	bne.n	8001c0a <CanTp_decodeConsecutiveFrame+0x86>
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]
 8001bc8:	e009      	b.n	8001bde <CanTp_decodeConsecutiveFrame+0x5a>
		{
			DecodedPduInfo.Data[i] = PduInfoPtr->Data[i+1];
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	1c5a      	adds	r2, r3, #1
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	5c89      	ldrb	r1, [r1, r2]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <CanTp_decodeConsecutiveFrame+0x98>)
 8001bd6:	54d1      	strb	r1, [r2, r3]
		for(i=0 ; i < DecodedPduInfo.Length ; i++)
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <CanTp_decodeConsecutiveFrame+0x98>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d3f0      	bcc.n	8001bca <CanTp_decodeConsecutiveFrame+0x46>
		}
		ConsecSN = ConsecSN + 1 > 0xF ? 0 : ConsecSN + 1;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <CanTp_decodeConsecutiveFrame+0x9c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b0e      	cmp	r3, #14
 8001bf0:	d805      	bhi.n	8001bfe <CanTp_decodeConsecutiveFrame+0x7a>
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <CanTp_decodeConsecutiveFrame+0x9c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	e000      	b.n	8001c00 <CanTp_decodeConsecutiveFrame+0x7c>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <CanTp_decodeConsecutiveFrame+0x9c>)
 8001c02:	7013      	strb	r3, [r2, #0]
		CanTp_ConnectData(&DecodedPduInfo);
 8001c04:	4805      	ldr	r0, [pc, #20]	; (8001c1c <CanTp_decodeConsecutiveFrame+0x98>)
 8001c06:	f000 f847 	bl	8001c98 <CanTp_ConnectData>
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000312c 	.word	0x2000312c
 8001c18:	20003134 	.word	0x20003134
 8001c1c:	2000314c 	.word	0x2000314c
 8001c20:	20004164 	.word	0x20004164

08001c24 <CanTp_decodeFlowControlFrame>:
void CanTp_decodeFlowControlFrame(uint32_t RxPduId, PduInfoTRx* PduInfoPtr){
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
	// Extract the Flow Status, Block Size, and Separation Time from the PDU
	uint8_t flowStatus = PduInfoPtr->Data[0];
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	73fb      	strb	r3, [r7, #15]
	uint8_t blockSize = PduInfoPtr->Data[1];
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	785b      	ldrb	r3, [r3, #1]
 8001c38:	73bb      	strb	r3, [r7, #14]
	//	uint8_t separationTime = PduInfoPtr->Data[2];

	// Update the number of consecutive frames to send based on the Block Size
	//	if (blockSize == 0) {
	// Continuous sending without waiting for further flow control
	numberOfConsecutiveFramesToSend = blockSize;
 8001c3a:	7bbb      	ldrb	r3, [r7, #14]
 8001c3c:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <CanTp_decodeFlowControlFrame+0x60>)
 8001c3e:	6013      	str	r3, [r2, #0]
	//	} else {
	//		numberOfConsecutiveFramesToSend = blockSize;
	//	}

	// Handle different flow statuses
	switch (flowStatus) {
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b32      	cmp	r3, #50	; 0x32
 8001c44:	d015      	beq.n	8001c72 <CanTp_decodeFlowControlFrame+0x4e>
 8001c46:	2b32      	cmp	r3, #50	; 0x32
 8001c48:	dc15      	bgt.n	8001c76 <CanTp_decodeFlowControlFrame+0x52>
 8001c4a:	2b30      	cmp	r3, #48	; 0x30
 8001c4c:	d002      	beq.n	8001c54 <CanTp_decodeFlowControlFrame+0x30>
 8001c4e:	2b31      	cmp	r3, #49	; 0x31
 8001c50:	d00b      	beq.n	8001c6a <CanTp_decodeFlowControlFrame+0x46>
		break;

	default:
		// Invalid flow status, handle as needed (e.g., set an error state)
		//		expectedFrameState = Any_State;
		break;
 8001c52:	e010      	b.n	8001c76 <CanTp_decodeFlowControlFrame+0x52>
		expectedFrameState = Consecutive_Frame_State;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <CanTp_decodeFlowControlFrame+0x64>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		startOffset = currentOffset;
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <CanTp_decodeFlowControlFrame+0x68>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <CanTp_decodeFlowControlFrame+0x6c>)
 8001c60:	6013      	str	r3, [r2, #0]
		ConsecSN = 1;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <CanTp_decodeFlowControlFrame+0x70>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
		break;
 8001c68:	e006      	b.n	8001c78 <CanTp_decodeFlowControlFrame+0x54>
		expectedFrameState = FlowControl_Frame_State;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <CanTp_decodeFlowControlFrame+0x64>)
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	701a      	strb	r2, [r3, #0]
		break;
 8001c70:	e002      	b.n	8001c78 <CanTp_decodeFlowControlFrame+0x54>
		break;
 8001c72:	bf00      	nop
 8001c74:	e000      	b.n	8001c78 <CanTp_decodeFlowControlFrame+0x54>
		break;
 8001c76:	bf00      	nop
	}

}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	20003128 	.word	0x20003128
 8001c88:	2000313c 	.word	0x2000313c
 8001c8c:	20000038 	.word	0x20000038
 8001c90:	20004168 	.word	0x20004168
 8001c94:	20004164 	.word	0x20004164

08001c98 <CanTp_ConnectData>:

void CanTp_ConnectData(PduInfoTRx* PduInfoPtr){
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
	//use CompletePduInfo struct to connect the data received from PduInfoTRx
	uint16_t tempCurrentIndex = currentIndex;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	81fb      	strh	r3, [r7, #14]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 8001ca6:	e014      	b.n	8001cd2 <CanTp_ConnectData+0x3a>
		CompletePduInfo.Data[currentIndex] = PduInfoPtr->Data[currentIndex - tempCurrentIndex];
 8001ca8:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	4611      	mov	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	5cd2      	ldrb	r2, [r2, r3]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <CanTp_ConnectData+0x6c>)
 8001cc2:	545a      	strb	r2, [r3, r1]
		currentIndex++;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001cd0:	801a      	strh	r2, [r3, #0]
	while(currentIndex < PduInfoPtr->Length + tempCurrentIndex){
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <CanTp_ConnectData+0x68>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	89fb      	ldrh	r3, [r7, #14]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4299      	cmp	r1, r3
 8001ce4:	d3e0      	bcc.n	8001ca8 <CanTp_ConnectData+0x10>
	}
	numberOfRemainingBytesToReceive -= PduInfoPtr->Length;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <CanTp_ConnectData+0x70>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <CanTp_ConnectData+0x70>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	20004166 	.word	0x20004166
 8001d04:	20003158 	.word	0x20003158
 8001d08:	20003134 	.word	0x20003134

08001d0c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <MX_CAN1_Init+0xa4>)
 8001d16:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d1a:	2210      	movs	r2, #16
 8001d1c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d30:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d5c:	4813      	ldr	r0, [pc, #76]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d5e:	f000 fecd 	bl	8002afc <HAL_CAN_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d68:	f000 fac0 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  // Configure CAN filter to accept all messages
  	CAN_FilterTypeDef sFilterConfig;
  	sFilterConfig.FilterBank = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d74:	2301      	movs	r3, #1
 8001d76:	61fb      	str	r3, [r7, #28]
  	sFilterConfig.FilterIdHigh = 0x0000;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	603b      	str	r3, [r7, #0]
  	sFilterConfig.FilterIdLow = 0x0000;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  	sFilterConfig.FilterActivation = ENABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	623b      	str	r3, [r7, #32]
  	sFilterConfig.SlaveStartFilterBank = 14; // Filter bank 14 for F303RE
 8001d90:	230e      	movs	r3, #14
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001d9a:	f000 ffab 	bl	8002cf4 <HAL_CAN_ConfigFilter>
  		// Filter configuration error handling
  	}

  	// Start the CAN peripheral
  	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001d9e:	4803      	ldr	r0, [pc, #12]	; (8001dac <MX_CAN1_Init+0xa0>)
 8001da0:	f001 f888 	bl	8002eb4 <HAL_CAN_Start>
  		// Start error handling
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20004178 	.word	0x20004178
 8001db0:	40006400 	.word	0x40006400

08001db4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a21      	ldr	r2, [pc, #132]	; (8001e58 <HAL_CAN_MspInit+0xa4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d13c      	bne.n	8001e50 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_CAN_MspInit+0xa8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e20:	2309      	movs	r3, #9
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <HAL_CAN_MspInit+0xac>)
 8001e2c:	f001 fe72 	bl	8003b14 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2105      	movs	r1, #5
 8001e34:	2014      	movs	r0, #20
 8001e36:	f001 fdb1 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e3a:	2014      	movs	r0, #20
 8001e3c:	f001 fdca 	bl	80039d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2105      	movs	r1, #5
 8001e44:	2015      	movs	r0, #21
 8001e46:	f001 fda9 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e4a:	2015      	movs	r0, #21
 8001e4c:	f001 fdc2 	bl	80039d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40006400 	.word	0x40006400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <vApplicationGetIdleTaskMemory+0x30>)
 8001e7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	200041a4 	.word	0x200041a4
 8001e94:	20004244 	.word	0x20004244

08001e98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001e98:	b5b0      	push	{r4, r5, r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <MX_FREERTOS_Init+0x30>)
 8001ea0:	1d3c      	adds	r4, r7, #4
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f004 fb0a 	bl	80064ce <osThreadCreate>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <MX_FREERTOS_Init+0x34>)
 8001ebe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec8:	08007bc4 	.word	0x08007bc4
 8001ecc:	200041a0 	.word	0x200041a0

08001ed0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f004 fb44 	bl	8006566 <osDelay>
 8001ede:	e7fb      	b.n	8001ed8 <StartDefaultTask+0x8>

08001ee0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a30      	ldr	r2, [pc, #192]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <MX_GPIO_Init+0xe0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2120      	movs	r1, #32
 8001f6a:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <MX_GPIO_Init+0xe4>)
 8001f6c:	f001 ff66 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <MX_GPIO_Init+0xe8>)
 8001f88:	f001 fdc4 	bl	8003b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4808      	ldr	r0, [pc, #32]	; (8001fc4 <MX_GPIO_Init+0xe4>)
 8001fa4:	f001 fdb6 	bl	8003b14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2105      	movs	r1, #5
 8001fac:	2028      	movs	r0, #40	; 0x28
 8001fae:	f001 fcf5 	bl	800399c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fb2:	2028      	movs	r0, #40	; 0x28
 8001fb4:	f001 fd0e 	bl	80039d4 <HAL_NVIC_EnableIRQ>

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020800 	.word	0x40020800

08001fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd2:	f000 fd51 	bl	8002a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fd6:	f000 f855 	bl	8002084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fda:	f7ff ff81 	bl	8001ee0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001fde:	f7ff fe95 	bl	8001d0c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8001fe2:	f000 fca5 	bl	8002930 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001fe6:	f000 fb99 	bl	800271c <MX_TIM6_Init>
  MX_TIM3_Init();
 8001fea:	f000 fafb 	bl	80025e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fee:	f000 fb47 	bl	8002680 <MX_TIM4_Init>
  MX_TIM7_Init();
 8001ff2:	f000 fbc9 	bl	8002788 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001ff6:	f000 faa7 	bl	8002548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4816      	ldr	r0, [pc, #88]	; (8002058 <main+0x8c>)
 8001ffe:	f001 f9bf 	bl	8003380 <HAL_CAN_ActivateNotification>
	Display_Menu();
	HAL_UART_Receive_IT(&huart2, &Menu_Letter, 1);
	CanTp_setCallback(UDS_Client_Callback);
	xTaskCreate(UDS_MainFunction, "UDS_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle3) ;
#else
	CanTp_setCallback(server_call_back);
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <main+0x90>)
 8002004:	f7ff fc1a 	bl	800183c <CanTp_setCallback>
#endif


	xTaskCreate(CanIf_Receive, "CANIf_RX", configMINIMAL_STACK_SIZE,NULL, 2, &xTaskHandle1) ;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <main+0x94>)
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	2302      	movs	r3, #2
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2300      	movs	r3, #0
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	4913      	ldr	r1, [pc, #76]	; (8002064 <main+0x98>)
 8002016:	4814      	ldr	r0, [pc, #80]	; (8002068 <main+0x9c>)
 8002018:	f004 fbca 	bl	80067b0 <xTaskCreate>
	xTaskCreate(CanTp_MainFunction, "CANTp_RX", configMINIMAL_STACK_SIZE,NULL, 3, &xTaskHandle2) ;
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <main+0xa0>)
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2303      	movs	r3, #3
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	4911      	ldr	r1, [pc, #68]	; (8002070 <main+0xa4>)
 800202a:	4812      	ldr	r0, [pc, #72]	; (8002074 <main+0xa8>)
 800202c:	f004 fbc0 	bl	80067b0 <xTaskCreate>
	xTaskCreate(CanNm_MainFunction, "CanNM_MainFunction", configMINIMAL_STACK_SIZE,NULL, 3, &xTaskHandle4) ;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <main+0xac>)
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2303      	movs	r3, #3
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2300      	movs	r3, #0
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	490f      	ldr	r1, [pc, #60]	; (800207c <main+0xb0>)
 800203e:	4810      	ldr	r0, [pc, #64]	; (8002080 <main+0xb4>)
 8002040:	f004 fbb6 	bl	80067b0 <xTaskCreate>
	CanTp_Init();
 8002044:	f7ff fa6a 	bl	800151c <CanTp_Init>
	CanNm_Init();
 8002048:	f7fe ffd8 	bl	8000ffc <CanNm_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800204c:	f7ff ff24 	bl	8001e98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002050:	f004 fa36 	bl	80064c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002054:	e7fe      	b.n	8002054 <main+0x88>
 8002056:	bf00      	nop
 8002058:	20004178 	.word	0x20004178
 800205c:	08000b2d 	.word	0x08000b2d
 8002060:	20004444 	.word	0x20004444
 8002064:	08007be0 	.word	0x08007be0
 8002068:	08000dcd 	.word	0x08000dcd
 800206c:	20004448 	.word	0x20004448
 8002070:	08007bec 	.word	0x08007bec
 8002074:	08001531 	.word	0x08001531
 8002078:	2000444c 	.word	0x2000444c
 800207c:	08007bf8 	.word	0x08007bf8
 8002080:	08001045 	.word	0x08001045

08002084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b094      	sub	sp, #80	; 0x50
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	2234      	movs	r2, #52	; 0x34
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f005 fc72 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <SystemClock_Config+0xd4>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <SystemClock_Config+0xd4>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6413      	str	r3, [r2, #64]	; 0x40
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <SystemClock_Config+0xd4>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <SystemClock_Config+0xd8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d0:	4a22      	ldr	r2, [pc, #136]	; (800215c <SystemClock_Config+0xd8>)
 80020d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <SystemClock_Config+0xd8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020ec:	2310      	movs	r3, #16
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f0:	2302      	movs	r3, #2
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020f4:	2300      	movs	r3, #0
 80020f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80020f8:	2310      	movs	r3, #16
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80020fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002100:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002102:	2304      	movs	r3, #4
 8002104:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002106:	2302      	movs	r3, #2
 8002108:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800210a:	2302      	movs	r3, #2
 800210c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4618      	mov	r0, r3
 8002114:	f002 fa5a 	bl	80045cc <HAL_RCC_OscConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800211e:	f000 f8e5 	bl	80022ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002122:	230f      	movs	r3, #15
 8002124:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002126:	2302      	movs	r3, #2
 8002128:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800212e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002132:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	2102      	movs	r1, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fec8 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800214a:	f000 f8cf 	bl	80022ec <Error_Handler>
  }
}
 800214e:	bf00      	nop
 8002150:	3750      	adds	r7, #80	; 0x50
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_GPIO_EXTI_Callback>:
	}

}
#else
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
	//  HAL_ResumeTick();
	//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
	if(PRESS_FLAG)
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_GPIO_EXTI_Callback+0x38>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		CanNm_Transmit();
 8002174:	f7ff f9b0 	bl	80014d8 <CanNm_Transmit>
 8002178:	e001      	b.n	800217e <HAL_GPIO_EXTI_Callback+0x1e>
	}
	else
	{

		CanNm_NetworkRelease();
 800217a:	f7ff f955 	bl	8001428 <CanNm_NetworkRelease>
	}
	PRESS_FLAG ^= 1;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_GPIO_EXTI_Callback+0x38>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GPIO_EXTI_Callback+0x38>)
 800218c:	701a      	strb	r2, [r3, #0]
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000003c 	.word	0x2000003c

0800219c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a44      	ldr	r2, [pc, #272]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d102      	bne.n	80021b4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80021ae:	f000 fc85 	bl	8002abc <HAL_IncTick>
 80021b2:	e080      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
  }
  /* USER CODE BEGIN Callback 1 */
#if CAN_MODE == Client

#else
	else if(htim->Instance == TIM6){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a41      	ldr	r2, [pc, #260]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d11b      	bne.n	80021f6 <HAL_TIM_PeriodElapsedCallback+0x5a>
		if(count == 0){
 80021be:	4b41      	ldr	r3, [pc, #260]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			count++;
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80021d4:	701a      	strb	r2, [r3, #0]
			return;
 80021d6:	e06e      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}

		//		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
		if (global_session != DefaultSession)
 80021d8:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d002      	beq.n	80021e8 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			global_session = DefaultSession;
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		else
		{
			// do nothing
		}
		//		stop_timer();
		reset_timer();
 80021e8:	f7fe fada 	bl	80007a0 <reset_timer>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80021ec:	2120      	movs	r1, #32
 80021ee:	4837      	ldr	r0, [pc, #220]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x130>)
 80021f0:	f001 fe3d 	bl	8003e6e <HAL_GPIO_TogglePin>
 80021f4:	e05f      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
	}

	else if(htim->Instance == TIM3){
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d113      	bne.n	8002228 <HAL_TIM_PeriodElapsedCallback+0x8c>
		if(count3 == 0){
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x7e>
			count3++;
 800220a:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3301      	adds	r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b2f      	ldr	r3, [pc, #188]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002216:	701a      	strb	r2, [r3, #0]
			return;
 8002218:	e04d      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}

		CanNm_TimeOut(3);
 800221a:	2003      	movs	r0, #3
 800221c:	f7ff f920 	bl	8001460 <CanNm_TimeOut>
		stop_timer(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7fe facb 	bl	80007bc <stop_timer>
 8002226:	e046      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>

	}
	else if(htim->Instance == TIM4){
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d113      	bne.n	800225a <HAL_TIM_PeriodElapsedCallback+0xbe>
		if(count4 == 0){
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_TIM_PeriodElapsedCallback+0xb0>
			count4++;
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4b25      	ldr	r3, [pc, #148]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002248:	701a      	strb	r2, [r3, #0]
			return;
 800224a:	e034      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		CanNm_TimeOut(4);
 800224c:	2004      	movs	r0, #4
 800224e:	f7ff f907 	bl	8001460 <CanNm_TimeOut>
		stop_timer(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe fab2 	bl	80007bc <stop_timer>
 8002258:	e02d      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
	}
	else if(htim->Instance == TIM7){
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d113      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0xf0>
		if(count7 == 0){
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_TIM_PeriodElapsedCallback+0xe2>
			count7++;
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800227a:	701a      	strb	r2, [r3, #0]
			return;
 800227c:	e01b      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		CanNm_TimeOut(7);
 800227e:	2007      	movs	r0, #7
 8002280:	f7ff f8ee 	bl	8001460 <CanNm_TimeOut>
		stop_timer(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7fe fa99 	bl	80007bc <stop_timer>
 800228a:	e014      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
	}
	else if(htim->Instance == TIM2){
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d10f      	bne.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		if(count2 == 0){
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_TIM_PeriodElapsedCallback+0x114>
			count2++;
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80022ac:	701a      	strb	r2, [r3, #0]
			return;
 80022ae:	e002      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		CanNm_TimeOut(2);
 80022b0:	2002      	movs	r0, #2
 80022b2:	f7ff f8d5 	bl	8001460 <CanNm_TimeOut>
	}
#endif
  /* USER CODE END Callback 1 */
}
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40001000 	.word	0x40001000
 80022c4:	20004450 	.word	0x20004450
 80022c8:	20000000 	.word	0x20000000
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40000400 	.word	0x40000400
 80022d4:	20004451 	.word	0x20004451
 80022d8:	40000800 	.word	0x40000800
 80022dc:	20004452 	.word	0x20004452
 80022e0:	40001400 	.word	0x40001400
 80022e4:	20004453 	.word	0x20004453
 80022e8:	20004454 	.word	0x20004454

080022ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022f4:	e7fe      	b.n	80022f4 <Error_Handler+0x8>
	...

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_MspInit+0x54>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_MspInit+0x54>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_MspInit+0x54>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_MspInit+0x54>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_MspInit+0x54>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_MspInit+0x54>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	210f      	movs	r1, #15
 800233a:	f06f 0001 	mvn.w	r0, #1
 800233e:	f001 fb2d 	bl	800399c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08c      	sub	sp, #48	; 0x30
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_InitTick+0xd0>)
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	4a2d      	ldr	r2, [pc, #180]	; (8002420 <HAL_InitTick+0xd0>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6453      	str	r3, [r2, #68]	; 0x44
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <HAL_InitTick+0xd0>)
 8002372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800237c:	f107 020c 	add.w	r2, r7, #12
 8002380:	f107 0310 	add.w	r3, r7, #16
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f001 febe 	bl	8004108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800238c:	f001 fea8 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8002390:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	4a23      	ldr	r2, [pc, #140]	; (8002424 <HAL_InitTick+0xd4>)
 8002396:	fba2 2303 	umull	r2, r3, r2, r3
 800239a:	0c9b      	lsrs	r3, r3, #18
 800239c:	3b01      	subs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <HAL_InitTick+0xd8>)
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_InitTick+0xdc>)
 80023a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_InitTick+0xd8>)
 80023a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_InitTick+0xd8>)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <HAL_InitTick+0xd8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_InitTick+0xd8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_InitTick+0xd8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80023c6:	4818      	ldr	r0, [pc, #96]	; (8002428 <HAL_InitTick+0xd8>)
 80023c8:	f002 fb9e 	bl	8004b08 <HAL_TIM_Base_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80023d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11b      	bne.n	8002412 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80023da:	4813      	ldr	r0, [pc, #76]	; (8002428 <HAL_InitTick+0xd8>)
 80023dc:	f002 fbe4 	bl	8004ba8 <HAL_TIM_Base_Start_IT>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80023e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d111      	bne.n	8002412 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023ee:	2019      	movs	r0, #25
 80023f0:	f001 faf0 	bl	80039d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b0f      	cmp	r3, #15
 80023f8:	d808      	bhi.n	800240c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80023fa:	2200      	movs	r2, #0
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	2019      	movs	r0, #25
 8002400:	f001 facc 	bl	800399c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002404:	4a0a      	ldr	r2, [pc, #40]	; (8002430 <HAL_InitTick+0xe0>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e002      	b.n	8002412 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002416:	4618      	mov	r0, r3
 8002418:	3730      	adds	r7, #48	; 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	431bde83 	.word	0x431bde83
 8002428:	20004458 	.word	0x20004458
 800242c:	40010000 	.word	0x40010000
 8002430:	20000044 	.word	0x20000044

08002434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <NMI_Handler+0x4>

0800243a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <HardFault_Handler+0x4>

08002440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <MemManage_Handler+0x4>

08002446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244a:	e7fe      	b.n	800244a <BusFault_Handler+0x4>

0800244c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <UsageFault_Handler+0x4>

08002452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <CAN1_RX0_IRQHandler+0x10>)
 8002466:	f000 ffb1 	bl	80033cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20004178 	.word	0x20004178

08002474 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <CAN1_RX1_IRQHandler+0x10>)
 800247a:	f000 ffa7 	bl	80033cc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20004178 	.word	0x20004178

08002488 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800248e:	f002 fc2a 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20004458 	.word	0x20004458

0800249c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM2_IRQHandler+0x10>)
 80024a2:	f002 fc20 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200044a0 	.word	0x200044a0

080024b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM3_IRQHandler+0x10>)
 80024b6:	f002 fc16 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200044e8 	.word	0x200044e8

080024c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM4_IRQHandler+0x10>)
 80024ca:	f002 fc0c 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20004530 	.word	0x20004530

080024d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <USART2_IRQHandler+0x10>)
 80024de:	f003 f8a3 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20004608 	.word	0x20004608

080024ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024f4:	f001 fcd6 	bl	8003ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <TIM6_DAC_IRQHandler+0x10>)
 8002502:	f002 fbf0 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20004578 	.word	0x20004578

08002510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <TIM7_IRQHandler+0x10>)
 8002516:	f002 fbe6 	bl	8004ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200045c0 	.word	0x200045c0

08002524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0308 	add.w	r3, r7, #8
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	463b      	mov	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800256a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM2_Init+0x98>)
 800256e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <MX_TIM2_Init+0x98>)
 800257c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_TIM2_Init+0x98>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800258e:	4814      	ldr	r0, [pc, #80]	; (80025e0 <MX_TIM2_Init+0x98>)
 8002590:	f002 faba 	bl	8004b08 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800259a:	f7ff fea7 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a4:	f107 0308 	add.w	r3, r7, #8
 80025a8:	4619      	mov	r1, r3
 80025aa:	480d      	ldr	r0, [pc, #52]	; (80025e0 <MX_TIM2_Init+0x98>)
 80025ac:	f002 fca3 	bl	8004ef6 <HAL_TIM_ConfigClockSource>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80025b6:	f7ff fe99 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c2:	463b      	mov	r3, r7
 80025c4:	4619      	mov	r1, r3
 80025c6:	4806      	ldr	r0, [pc, #24]	; (80025e0 <MX_TIM2_Init+0x98>)
 80025c8:	f002 febe 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80025d2:	f7ff fe8b 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200044a0 	.word	0x200044a0

080025e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0308 	add.w	r3, r7, #8
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_TIM3_Init+0x94>)
 8002602:	4a1e      	ldr	r2, [pc, #120]	; (800267c <MX_TIM3_Init+0x98>)
 8002604:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <MX_TIM3_Init+0x94>)
 8002608:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800260c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_TIM3_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_TIM3_Init+0x94>)
 8002616:	f242 720f 	movw	r2, #9999	; 0x270f
 800261a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_TIM3_Init+0x94>)
 800261e:	2200      	movs	r2, #0
 8002620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <MX_TIM3_Init+0x94>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002628:	4813      	ldr	r0, [pc, #76]	; (8002678 <MX_TIM3_Init+0x94>)
 800262a:	f002 fa6d 	bl	8004b08 <HAL_TIM_Base_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002634:	f7ff fe5a 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800263e:	f107 0308 	add.w	r3, r7, #8
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <MX_TIM3_Init+0x94>)
 8002646:	f002 fc56 	bl	8004ef6 <HAL_TIM_ConfigClockSource>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002650:	f7ff fe4c 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800265c:	463b      	mov	r3, r7
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_TIM3_Init+0x94>)
 8002662:	f002 fe71 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800266c:	f7ff fe3e 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200044e8 	.word	0x200044e8
 800267c:	40000400 	.word	0x40000400

08002680 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	463b      	mov	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_TIM4_Init+0x94>)
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <MX_TIM4_Init+0x98>)
 80026a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_TIM4_Init+0x94>)
 80026a4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80026a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_TIM4_Init+0x94>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <MX_TIM4_Init+0x94>)
 80026b2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80026b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_TIM4_Init+0x94>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_TIM4_Init+0x94>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026c4:	4813      	ldr	r0, [pc, #76]	; (8002714 <MX_TIM4_Init+0x94>)
 80026c6:	f002 fa1f 	bl	8004b08 <HAL_TIM_Base_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80026d0:	f7ff fe0c 	bl	80022ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	4619      	mov	r1, r3
 80026e0:	480c      	ldr	r0, [pc, #48]	; (8002714 <MX_TIM4_Init+0x94>)
 80026e2:	f002 fc08 	bl	8004ef6 <HAL_TIM_ConfigClockSource>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80026ec:	f7ff fdfe 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f8:	463b      	mov	r3, r7
 80026fa:	4619      	mov	r1, r3
 80026fc:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_TIM4_Init+0x94>)
 80026fe:	f002 fe23 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002708:	f7ff fdf0 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20004530 	.word	0x20004530
 8002718:	40000800 	.word	0x40000800

0800271c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002722:	463b      	mov	r3, r7
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <MX_TIM6_Init+0x64>)
 800272c:	4a15      	ldr	r2, [pc, #84]	; (8002784 <MX_TIM6_Init+0x68>)
 800272e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 41999;
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <MX_TIM6_Init+0x64>)
 8002732:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002736:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <MX_TIM6_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <MX_TIM6_Init+0x64>)
 8002740:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002744:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <MX_TIM6_Init+0x64>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800274c:	480c      	ldr	r0, [pc, #48]	; (8002780 <MX_TIM6_Init+0x64>)
 800274e:	f002 f9db 	bl	8004b08 <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002758:	f7ff fdc8 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002764:	463b      	mov	r3, r7
 8002766:	4619      	mov	r1, r3
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <MX_TIM6_Init+0x64>)
 800276a:	f002 fded 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002774:	f7ff fdba 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20004578 	.word	0x20004578
 8002784:	40001000 	.word	0x40001000

08002788 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278e:	463b      	mov	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <MX_TIM7_Init+0x64>)
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <MX_TIM7_Init+0x68>)
 800279a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 41999;
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <MX_TIM7_Init+0x64>)
 800279e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80027a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <MX_TIM7_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <MX_TIM7_Init+0x64>)
 80027ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80027b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <MX_TIM7_Init+0x64>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <MX_TIM7_Init+0x64>)
 80027ba:	f002 f9a5 	bl	8004b08 <HAL_TIM_Base_Init>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80027c4:	f7ff fd92 	bl	80022ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027d0:	463b      	mov	r3, r7
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	; (80027ec <MX_TIM7_Init+0x64>)
 80027d6:	f002 fdb7 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027e0:	f7ff fd84 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200045c0 	.word	0x200045c0
 80027f0:	40001400 	.word	0x40001400

080027f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d116      	bne.n	8002834 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a43      	ldr	r2, [pc, #268]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	201c      	movs	r0, #28
 8002828:	f001 f8b8 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800282c:	201c      	movs	r0, #28
 800282e:	f001 f8d1 	bl	80039d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002832:	e06e      	b.n	8002912 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM3)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_TIM_Base_MspInit+0x12c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d116      	bne.n	800286c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a35      	ldr	r2, [pc, #212]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b33      	ldr	r3, [pc, #204]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2105      	movs	r1, #5
 800285e:	201d      	movs	r0, #29
 8002860:	f001 f89c 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002864:	201d      	movs	r0, #29
 8002866:	f001 f8b5 	bl	80039d4 <HAL_NVIC_EnableIRQ>
}
 800286a:	e052      	b.n	8002912 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_TIM_Base_MspInit+0x130>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d116      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2105      	movs	r1, #5
 8002896:	201e      	movs	r0, #30
 8002898:	f001 f880 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800289c:	201e      	movs	r0, #30
 800289e:	f001 f899 	bl	80039d4 <HAL_NVIC_EnableIRQ>
}
 80028a2:	e036      	b.n	8002912 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_TIM_Base_MspInit+0x134>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d116      	bne.n	80028dc <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a19      	ldr	r2, [pc, #100]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028b8:	f043 0310 	orr.w	r3, r3, #16
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b17      	ldr	r3, [pc, #92]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2105      	movs	r1, #5
 80028ce:	2036      	movs	r0, #54	; 0x36
 80028d0:	f001 f864 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028d4:	2036      	movs	r0, #54	; 0x36
 80028d6:	f001 f87d 	bl	80039d4 <HAL_NVIC_EnableIRQ>
}
 80028da:	e01a      	b.n	8002912 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM7)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_TIM_Base_MspInit+0x138>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d115      	bne.n	8002912 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028f0:	f043 0320 	orr.w	r3, r3, #32
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_Base_MspInit+0x128>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2105      	movs	r1, #5
 8002906:	2037      	movs	r0, #55	; 0x37
 8002908:	f001 f848 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800290c:	2037      	movs	r0, #55	; 0x37
 800290e:	f001 f861 	bl	80039d4 <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40001000 	.word	0x40001000
 800292c:	40001400 	.word	0x40001400

08002930 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002936:	4a12      	ldr	r2, [pc, #72]	; (8002980 <MX_USART2_UART_Init+0x50>)
 8002938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <MX_USART2_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <MX_USART2_UART_Init+0x4c>)
 8002968:	f002 fd7e 	bl	8005468 <HAL_UART_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002972:	f7ff fcbb 	bl	80022ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20004608 	.word	0x20004608
 8002980:	40004400 	.word	0x40004400

08002984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0314 	add.w	r3, r7, #20
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_UART_MspInit+0x94>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d133      	bne.n	8002a0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_UART_MspInit+0x98>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029de:	230c      	movs	r3, #12
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ea:	2303      	movs	r3, #3
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ee:	2307      	movs	r3, #7
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4809      	ldr	r0, [pc, #36]	; (8002a20 <HAL_UART_MspInit+0x9c>)
 80029fa:	f001 f88b 	bl	8003b14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2105      	movs	r1, #5
 8002a02:	2026      	movs	r0, #38	; 0x26
 8002a04:	f000 ffca 	bl	800399c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a08:	2026      	movs	r0, #38	; 0x26
 8002a0a:	f000 ffe3 	bl	80039d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40004400 	.word	0x40004400
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000

08002a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a28:	480d      	ldr	r0, [pc, #52]	; (8002a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2a:	490e      	ldr	r1, [pc, #56]	; (8002a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a2c:	4a0e      	ldr	r2, [pc, #56]	; (8002a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a30:	e002      	b.n	8002a38 <LoopCopyDataInit>

08002a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a36:	3304      	adds	r3, #4

08002a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a3c:	d3f9      	bcc.n	8002a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a3e:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a40:	4c0b      	ldr	r4, [pc, #44]	; (8002a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a44:	e001      	b.n	8002a4a <LoopFillZerobss>

08002a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a48:	3204      	adds	r2, #4

08002a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a4c:	d3fb      	bcc.n	8002a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a4e:	f7ff fd69 	bl	8002524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a52:	f004 fff1 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a56:	f7ff fab9 	bl	8001fcc <main>
  bx  lr    
 8002a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a64:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002a68:	08007c3c 	.word	0x08007c3c
  ldr r2, =_sbss
 8002a6c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002a70:	200084e4 	.word	0x200084e4

08002a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a74:	e7fe      	b.n	8002a74 <ADC_IRQHandler>
	...

08002a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_Init+0x40>)
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_Init+0x40>)
 8002a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_Init+0x40>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <HAL_Init+0x40>)
 8002a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 ff70 	bl	8003986 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aa6:	200f      	movs	r0, #15
 8002aa8:	f7ff fc52 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aac:	f7ff fc24 	bl	80022f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023c00 	.word	0x40023c00

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	20000048 	.word	0x20000048
 8002ae0:	2000464c 	.word	0x2000464c

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	; (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	2000464c 	.word	0x2000464c

08002afc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0ed      	b.n	8002cea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff f94a 	bl	8001db4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b30:	f7ff ffd8 	bl	8002ae4 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b36:	e012      	b.n	8002b5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b38:	f7ff ffd4 	bl	8002ae4 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b0a      	cmp	r3, #10
 8002b44:	d90b      	bls.n	8002b5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2205      	movs	r2, #5
 8002b56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0c5      	b.n	8002cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0e5      	beq.n	8002b38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0202 	bic.w	r2, r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7ff ffb2 	bl	8002ae4 <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b82:	e012      	b.n	8002baa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b84:	f7ff ffae 	bl	8002ae4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b0a      	cmp	r3, #10
 8002b90:	d90b      	bls.n	8002baa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e09f      	b.n	8002cea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e1b      	ldrb	r3, [r3, #24]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d108      	bne.n	8002bd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e007      	b.n	8002be2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7e5b      	ldrb	r3, [r3, #25]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d108      	bne.n	8002bfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e007      	b.n	8002c0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7e9b      	ldrb	r3, [r3, #26]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0220 	bic.w	r2, r2, #32
 8002c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7edb      	ldrb	r3, [r3, #27]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d108      	bne.n	8002c50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0210 	bic.w	r2, r2, #16
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e007      	b.n	8002c60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0210 	orr.w	r2, r2, #16
 8002c5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7f1b      	ldrb	r3, [r3, #28]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0208 	orr.w	r2, r2, #8
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e007      	b.n	8002c8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0208 	bic.w	r2, r2, #8
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	7f5b      	ldrb	r3, [r3, #29]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d108      	bne.n	8002ca4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0204 	orr.w	r2, r2, #4
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e007      	b.n	8002cb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	ea42 0103 	orr.w	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d0a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d003      	beq.n	8002d1a <HAL_CAN_ConfigFilter+0x26>
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	f040 80be 	bne.w	8002e96 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_CAN_ConfigFilter+0x1bc>)
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d123      	bne.n	8002dc4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	3248      	adds	r2, #72	; 0x48
 8002da4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002db8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dba:	6979      	ldr	r1, [r7, #20]
 8002dbc:	3348      	adds	r3, #72	; 0x48
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d122      	bne.n	8002e12 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002dec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	3248      	adds	r2, #72	; 0x48
 8002df2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	3348      	adds	r3, #72	; 0x48
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	401a      	ands	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e2c:	e007      	b.n	8002e3e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e58:	e007      	b.n	8002e6a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e88:	f023 0201 	bic.w	r2, r3, #1
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e006      	b.n	8002ea4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
  }
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	40006400 	.word	0x40006400

08002eb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d12e      	bne.n	8002f26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7ff fe00 	bl	8002ae4 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ee6:	e012      	b.n	8002f0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ee8:	f7ff fdfc 	bl	8002ae4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b0a      	cmp	r3, #10
 8002ef4:	d90b      	bls.n	8002f0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2205      	movs	r2, #5
 8002f06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e012      	b.n	8002f34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e006      	b.n	8002f34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d003      	beq.n	8002f68 <HAL_CAN_AddTxMessage+0x2c>
 8002f60:	7ffb      	ldrb	r3, [r7, #31]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f040 80b8 	bne.w	80030d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80a0 	beq.w	80030c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e09e      	b.n	80030e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fa8:	2201      	movs	r2, #1
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	409a      	lsls	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	6809      	ldr	r1, [r1, #0]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	440b      	add	r3, r1
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3318      	adds	r3, #24
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	440b      	add	r3, r1
 8002ff4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	3318      	adds	r3, #24
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	440b      	add	r3, r1
 8003006:	3304      	adds	r3, #4
 8003008:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	7d1b      	ldrb	r3, [r3, #20]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d111      	bne.n	8003036 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3318      	adds	r3, #24
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	6811      	ldr	r1, [r2, #0]
 8003026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3318      	adds	r3, #24
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	440b      	add	r3, r1
 8003032:	3304      	adds	r3, #4
 8003034:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3307      	adds	r3, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	061a      	lsls	r2, r3, #24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3306      	adds	r3, #6
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3305      	adds	r3, #5
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	021b      	lsls	r3, r3, #8
 8003050:	4313      	orrs	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	3204      	adds	r2, #4
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	4610      	mov	r0, r2
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	6811      	ldr	r1, [r2, #0]
 800305e:	ea43 0200 	orr.w	r2, r3, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	440b      	add	r3, r1
 8003068:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800306c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3303      	adds	r3, #3
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	061a      	lsls	r2, r3, #24
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3302      	adds	r3, #2
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3301      	adds	r3, #1
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4313      	orrs	r3, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	7812      	ldrb	r2, [r2, #0]
 800308e:	4610      	mov	r0, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	6811      	ldr	r1, [r2, #0]
 8003094:	ea43 0200 	orr.w	r2, r3, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	440b      	add	r3, r1
 800309e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	3318      	adds	r3, #24
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	4413      	add	r3, r2
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	6811      	ldr	r1, [r2, #0]
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3318      	adds	r3, #24
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	440b      	add	r3, r1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e00e      	b.n	80030e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e006      	b.n	80030e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d002      	beq.n	8003112 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800310c:	7afb      	ldrb	r3, [r7, #11]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d11d      	bne.n	800314e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3301      	adds	r3, #1
 8003138:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003170:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003172:	7dfb      	ldrb	r3, [r7, #23]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d003      	beq.n	8003180 <HAL_CAN_GetRxMessage+0x24>
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b02      	cmp	r3, #2
 800317c:	f040 80f3 	bne.w	8003366 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d116      	bne.n	80031c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0e7      	b.n	8003374 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0d8      	b.n	8003374 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	331b      	adds	r3, #27
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	4413      	add	r3, r2
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0204 	and.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10c      	bne.n	80031fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	331b      	adds	r3, #27
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0d5b      	lsrs	r3, r3, #21
 80031f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e00b      	b.n	8003212 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	331b      	adds	r3, #27
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	4413      	add	r3, r2
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	331b      	adds	r3, #27
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	4413      	add	r3, r2
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0202 	and.w	r2, r3, #2
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	331b      	adds	r3, #27
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	331b      	adds	r3, #27
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	b2da      	uxtb	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	331b      	adds	r3, #27
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	b29a      	uxth	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	4413      	add	r3, r2
 800327a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0a1a      	lsrs	r2, r3, #8
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	3301      	adds	r3, #1
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0c1a      	lsrs	r2, r3, #16
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	3302      	adds	r3, #2
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e1a      	lsrs	r2, r3, #24
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	3303      	adds	r3, #3
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	3304      	adds	r3, #4
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0a1a      	lsrs	r2, r3, #8
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3305      	adds	r3, #5
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	4413      	add	r3, r2
 8003310:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	0c1a      	lsrs	r2, r3, #16
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	3306      	adds	r3, #6
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4413      	add	r3, r2
 800332a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e1a      	lsrs	r2, r3, #24
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	3307      	adds	r3, #7
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	e007      	b.n	8003362 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0220 	orr.w	r2, r2, #32
 8003360:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e006      	b.n	8003374 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	371c      	adds	r7, #28
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003390:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <HAL_CAN_ActivateNotification+0x1e>
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d109      	bne.n	80033b2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6959      	ldr	r1, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e006      	b.n	80033c0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
  }
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3714      	adds	r7, #20
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	; 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d07c      	beq.n	800350c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2201      	movs	r2, #1
 8003422:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f983 	bl	800373a <HAL_CAN_TxMailbox0CompleteCallback>
 8003434:	e016      	b.n	8003464 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	e00c      	b.n	8003464 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d004      	beq.n	800345e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
 800345c:	e002      	b.n	8003464 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f989 	bl	8003776 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d024      	beq.n	80034b8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003476:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f963 	bl	800374e <HAL_CAN_TxMailbox1CompleteCallback>
 8003488:	e016      	b.n	80034b8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
 800349c:	e00c      	b.n	80034b8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d004      	beq.n	80034b2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	e002      	b.n	80034b8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f969 	bl	800378a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f943 	bl	8003762 <HAL_CAN_TxMailbox2CompleteCallback>
 80034dc:	e016      	b.n	800350c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d004      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
 80034f0:	e00c      	b.n	800350c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e002      	b.n	800350c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f949 	bl	800379e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2208      	movs	r2, #8
 800354a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f930 	bl	80037b2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fbd0 	bl	8000d10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800358a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d006      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2208      	movs	r2, #8
 80035ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f912 	bl	80037da <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80035b6:	6a3b      	ldr	r3, [r7, #32]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8f9 	bl	80037c6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d006      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2210      	movs	r2, #16
 80035ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f8fc 	bl	80037ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2208      	movs	r2, #8
 8003610:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8f5 	bl	8003802 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d07b      	beq.n	800371a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d072      	beq.n	8003712 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	f043 0302 	orr.w	r3, r3, #2
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d043      	beq.n	8003712 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d03e      	beq.n	8003712 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800369a:	2b60      	cmp	r3, #96	; 0x60
 800369c:	d02b      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x32a>
 800369e:	2b60      	cmp	r3, #96	; 0x60
 80036a0:	d82e      	bhi.n	8003700 <HAL_CAN_IRQHandler+0x334>
 80036a2:	2b50      	cmp	r3, #80	; 0x50
 80036a4:	d022      	beq.n	80036ec <HAL_CAN_IRQHandler+0x320>
 80036a6:	2b50      	cmp	r3, #80	; 0x50
 80036a8:	d82a      	bhi.n	8003700 <HAL_CAN_IRQHandler+0x334>
 80036aa:	2b40      	cmp	r3, #64	; 0x40
 80036ac:	d019      	beq.n	80036e2 <HAL_CAN_IRQHandler+0x316>
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d826      	bhi.n	8003700 <HAL_CAN_IRQHandler+0x334>
 80036b2:	2b30      	cmp	r3, #48	; 0x30
 80036b4:	d010      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x30c>
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d822      	bhi.n	8003700 <HAL_CAN_IRQHandler+0x334>
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d002      	beq.n	80036c4 <HAL_CAN_IRQHandler+0x2f8>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d005      	beq.n	80036ce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80036c2:	e01d      	b.n	8003700 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	f043 0308 	orr.w	r3, r3, #8
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036cc:	e019      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	f043 0310 	orr.w	r3, r3, #16
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036d6:	e014      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036e0:	e00f      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ea:	e00a      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036f4:	e005      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036fe:	e000      	b.n	8003702 <HAL_CAN_IRQHandler+0x336>
            break;
 8003700:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699a      	ldr	r2, [r3, #24]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003710:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2204      	movs	r2, #4
 8003718:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f872 	bl	8003816 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003732:	bf00      	nop
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003848:	4013      	ands	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800385c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <__NVIC_SetPriorityGrouping+0x44>)
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	60d3      	str	r3, [r2, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <__NVIC_GetPriorityGrouping+0x18>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 0307 	and.w	r3, r3, #7
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	db0b      	blt.n	80038ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4907      	ldr	r1, [pc, #28]	; (80038c8 <__NVIC_EnableIRQ+0x38>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2001      	movs	r0, #1
 80038b2:	fa00 f202 	lsl.w	r2, r0, r2
 80038b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e100 	.word	0xe000e100

080038cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	6039      	str	r1, [r7, #0]
 80038d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db0a      	blt.n	80038f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	490c      	ldr	r1, [pc, #48]	; (8003918 <__NVIC_SetPriority+0x4c>)
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	0112      	lsls	r2, r2, #4
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	440b      	add	r3, r1
 80038f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f4:	e00a      	b.n	800390c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4908      	ldr	r1, [pc, #32]	; (800391c <__NVIC_SetPriority+0x50>)
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	3b04      	subs	r3, #4
 8003904:	0112      	lsls	r2, r2, #4
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	440b      	add	r3, r1
 800390a:	761a      	strb	r2, [r3, #24]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000e100 	.word	0xe000e100
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f1c3 0307 	rsb	r3, r3, #7
 800393a:	2b04      	cmp	r3, #4
 800393c:	bf28      	it	cs
 800393e:	2304      	movcs	r3, #4
 8003940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3304      	adds	r3, #4
 8003946:	2b06      	cmp	r3, #6
 8003948:	d902      	bls.n	8003950 <NVIC_EncodePriority+0x30>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3b03      	subs	r3, #3
 800394e:	e000      	b.n	8003952 <NVIC_EncodePriority+0x32>
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43da      	mvns	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	401a      	ands	r2, r3
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003968:	f04f 31ff 	mov.w	r1, #4294967295
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa01 f303 	lsl.w	r3, r1, r3
 8003972:	43d9      	mvns	r1, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	4313      	orrs	r3, r2
         );
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff4c 	bl	800382c <__NVIC_SetPriorityGrouping>
}
 8003994:	bf00      	nop
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ae:	f7ff ff61 	bl	8003874 <__NVIC_GetPriorityGrouping>
 80039b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	6978      	ldr	r0, [r7, #20]
 80039ba:	f7ff ffb1 	bl	8003920 <NVIC_EncodePriority>
 80039be:	4602      	mov	r2, r0
 80039c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff80 	bl	80038cc <__NVIC_SetPriority>
}
 80039cc:	bf00      	nop
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ff54 	bl	8003890 <__NVIC_EnableIRQ>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039fe:	f7ff f871 	bl	8002ae4 <HAL_GetTick>
 8003a02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d008      	beq.n	8003a22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e052      	b.n	8003ac8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0216 	bic.w	r2, r2, #22
 8003a30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_DMA_Abort+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0208 	bic.w	r2, r2, #8
 8003a60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a72:	e013      	b.n	8003a9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a74:	f7ff f836 	bl	8002ae4 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d90c      	bls.n	8003a9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e015      	b.n	8003ac8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e4      	bne.n	8003a74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	223f      	movs	r2, #63	; 0x3f
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d004      	beq.n	8003aee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2280      	movs	r2, #128	; 0x80
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e00c      	b.n	8003b08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2205      	movs	r2, #5
 8003af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	e165      	b.n	8003dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b30:	2201      	movs	r2, #1
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	f040 8154 	bne.w	8003df6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d005      	beq.n	8003b66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d130      	bne.n	8003bc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	2203      	movs	r2, #3
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43db      	mvns	r3, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 0201 	and.w	r2, r3, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d017      	beq.n	8003c04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	4013      	ands	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d123      	bne.n	8003c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	08da      	lsrs	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3208      	adds	r2, #8
 8003c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	220f      	movs	r2, #15
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	08da      	lsrs	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3208      	adds	r2, #8
 8003c52:	69b9      	ldr	r1, [r7, #24]
 8003c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80ae 	beq.w	8003df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <HAL_GPIO_Init+0x300>)
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_GPIO_Init+0x300>)
 8003ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8003caa:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <HAL_GPIO_Init+0x300>)
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cb6:	4a58      	ldr	r2, [pc, #352]	; (8003e18 <HAL_GPIO_Init+0x304>)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	220f      	movs	r2, #15
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <HAL_GPIO_Init+0x308>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d025      	beq.n	8003d2e <HAL_GPIO_Init+0x21a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	; (8003e20 <HAL_GPIO_Init+0x30c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01f      	beq.n	8003d2a <HAL_GPIO_Init+0x216>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4d      	ldr	r2, [pc, #308]	; (8003e24 <HAL_GPIO_Init+0x310>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d019      	beq.n	8003d26 <HAL_GPIO_Init+0x212>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_GPIO_Init+0x314>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_GPIO_Init+0x20e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <HAL_GPIO_Init+0x318>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00d      	beq.n	8003d1e <HAL_GPIO_Init+0x20a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4a      	ldr	r2, [pc, #296]	; (8003e30 <HAL_GPIO_Init+0x31c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <HAL_GPIO_Init+0x206>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a49      	ldr	r2, [pc, #292]	; (8003e34 <HAL_GPIO_Init+0x320>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_GPIO_Init+0x202>
 8003d12:	2306      	movs	r3, #6
 8003d14:	e00c      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d16:	2307      	movs	r3, #7
 8003d18:	e00a      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	e008      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	e006      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d22:	2303      	movs	r3, #3
 8003d24:	e004      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_GPIO_Init+0x21c>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f002 0203 	and.w	r2, r2, #3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_GPIO_Init+0x304>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b3a      	ldr	r3, [pc, #232]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a31      	ldr	r2, [pc, #196]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a26      	ldr	r2, [pc, #152]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df0:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <HAL_GPIO_Init+0x324>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f67f ae96 	bls.w	8003b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40013c00 	.word	0x40013c00

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e58:	e003      	b.n	8003e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e5a:	887b      	ldrh	r3, [r7, #2]
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	619a      	str	r2, [r3, #24]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b085      	sub	sp, #20
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e80:	887a      	ldrh	r2, [r7, #2]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4013      	ands	r3, r2
 8003e86:	041a      	lsls	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	400b      	ands	r3, r1
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	619a      	str	r2, [r3, #24]
}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003eae:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eba:	4a05      	ldr	r2, [pc, #20]	; (8003ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe f94c 	bl	8002160 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40013c00 	.word	0x40013c00

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fd8e 	bl	8002ae4 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe fd8a 	bl	8002ae4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f887 	bl	800416c <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe f968 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	08007c14 	.word	0x08007c14
 8004098:	20000040 	.word	0x20000040
 800409c:	20000044 	.word	0x20000044

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000040 	.word	0x20000040

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08007c24 	.word	0x08007c24

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	08007c24 	.word	0x08007c24

08004108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	220f      	movs	r2, #15
 8004116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004118:	4b12      	ldr	r3, [pc, #72]	; (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 0203 	and.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_RCC_GetClockConfig+0x5c>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	08db      	lsrs	r3, r3, #3
 8004142:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800414a:	4b07      	ldr	r3, [pc, #28]	; (8004168 <HAL_RCC_GetClockConfig+0x60>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40023c00 	.word	0x40023c00

0800416c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b0ae      	sub	sp, #184	; 0xb8
 8004172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004192:	4bcb      	ldr	r3, [pc, #812]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b0c      	cmp	r3, #12
 800419c:	f200 8206 	bhi.w	80045ac <HAL_RCC_GetSysClockFreq+0x440>
 80041a0:	a201      	add	r2, pc, #4	; (adr r2, 80041a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80041a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a6:	bf00      	nop
 80041a8:	080041dd 	.word	0x080041dd
 80041ac:	080045ad 	.word	0x080045ad
 80041b0:	080045ad 	.word	0x080045ad
 80041b4:	080045ad 	.word	0x080045ad
 80041b8:	080041e5 	.word	0x080041e5
 80041bc:	080045ad 	.word	0x080045ad
 80041c0:	080045ad 	.word	0x080045ad
 80041c4:	080045ad 	.word	0x080045ad
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080045ad 	.word	0x080045ad
 80041d0:	080045ad 	.word	0x080045ad
 80041d4:	080045ad 	.word	0x080045ad
 80041d8:	080043dd 	.word	0x080043dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4bb9      	ldr	r3, [pc, #740]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80041de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80041e2:	e1e7      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e4:	4bb8      	ldr	r3, [pc, #736]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041ea:	e1e3      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ec:	4bb4      	ldr	r3, [pc, #720]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f8:	4bb1      	ldr	r3, [pc, #708]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d071      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004204:	4bae      	ldr	r3, [pc, #696]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	099b      	lsrs	r3, r3, #6
 800420a:	2200      	movs	r2, #0
 800420c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004210:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800422a:	4622      	mov	r2, r4
 800422c:	462b      	mov	r3, r5
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800423c:	0150      	lsls	r0, r2, #5
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4621      	mov	r1, r4
 8004244:	1a51      	subs	r1, r2, r1
 8004246:	6439      	str	r1, [r7, #64]	; 0x40
 8004248:	4629      	mov	r1, r5
 800424a:	eb63 0301 	sbc.w	r3, r3, r1
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800425c:	4649      	mov	r1, r9
 800425e:	018b      	lsls	r3, r1, #6
 8004260:	4641      	mov	r1, r8
 8004262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004266:	4641      	mov	r1, r8
 8004268:	018a      	lsls	r2, r1, #6
 800426a:	4641      	mov	r1, r8
 800426c:	1a51      	subs	r1, r2, r1
 800426e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004270:	4649      	mov	r1, r9
 8004272:	eb63 0301 	sbc.w	r3, r3, r1
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004284:	4649      	mov	r1, r9
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4641      	mov	r1, r8
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4641      	mov	r1, r8
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4622      	mov	r2, r4
 800429a:	189b      	adds	r3, r3, r2
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
 800429e:	462b      	mov	r3, r5
 80042a0:	460a      	mov	r2, r1
 80042a2:	eb42 0303 	adc.w	r3, r2, r3
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042b4:	4629      	mov	r1, r5
 80042b6:	024b      	lsls	r3, r1, #9
 80042b8:	4621      	mov	r1, r4
 80042ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042be:	4621      	mov	r1, r4
 80042c0:	024a      	lsls	r2, r1, #9
 80042c2:	4610      	mov	r0, r2
 80042c4:	4619      	mov	r1, r3
 80042c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042d8:	f7fb ff9a 	bl	8000210 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4613      	mov	r3, r2
 80042e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e6:	e067      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	099b      	lsrs	r3, r3, #6
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042f4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80042f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004300:	67bb      	str	r3, [r7, #120]	; 0x78
 8004302:	2300      	movs	r3, #0
 8004304:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004306:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800430a:	4622      	mov	r2, r4
 800430c:	462b      	mov	r3, r5
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4621      	mov	r1, r4
 8004324:	1a51      	subs	r1, r2, r1
 8004326:	62b9      	str	r1, [r7, #40]	; 0x28
 8004328:	4629      	mov	r1, r5
 800432a:	eb63 0301 	sbc.w	r3, r3, r1
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800433c:	4649      	mov	r1, r9
 800433e:	018b      	lsls	r3, r1, #6
 8004340:	4641      	mov	r1, r8
 8004342:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004346:	4641      	mov	r1, r8
 8004348:	018a      	lsls	r2, r1, #6
 800434a:	4641      	mov	r1, r8
 800434c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004350:	4649      	mov	r1, r9
 8004352:	eb63 0b01 	sbc.w	fp, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004362:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800436a:	4692      	mov	sl, r2
 800436c:	469b      	mov	fp, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb1a 0303 	adds.w	r3, sl, r3
 8004374:	623b      	str	r3, [r7, #32]
 8004376:	462b      	mov	r3, r5
 8004378:	eb4b 0303 	adc.w	r3, fp, r3
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800438a:	4629      	mov	r1, r5
 800438c:	028b      	lsls	r3, r1, #10
 800438e:	4621      	mov	r1, r4
 8004390:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004394:	4621      	mov	r1, r4
 8004396:	028a      	lsls	r2, r1, #10
 8004398:	4610      	mov	r0, r2
 800439a:	4619      	mov	r1, r3
 800439c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a0:	2200      	movs	r2, #0
 80043a2:	673b      	str	r3, [r7, #112]	; 0x70
 80043a4:	677a      	str	r2, [r7, #116]	; 0x74
 80043a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043aa:	f7fb ff31 	bl	8000210 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4613      	mov	r3, r2
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	3301      	adds	r3, #1
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80043ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043da:	e0eb      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043dc:	4b38      	ldr	r3, [pc, #224]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e8:	4b35      	ldr	r3, [pc, #212]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d06b      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f4:	4b32      	ldr	r3, [pc, #200]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x354>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	2200      	movs	r2, #0
 80043fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80043fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
 8004408:	2300      	movs	r3, #0
 800440a:	667b      	str	r3, [r7, #100]	; 0x64
 800440c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004410:	4622      	mov	r2, r4
 8004412:	462b      	mov	r3, r5
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 0100 	mov.w	r1, #0
 800441c:	0159      	lsls	r1, r3, #5
 800441e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004422:	0150      	lsls	r0, r2, #5
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4621      	mov	r1, r4
 800442a:	1a51      	subs	r1, r2, r1
 800442c:	61b9      	str	r1, [r7, #24]
 800442e:	4629      	mov	r1, r5
 8004430:	eb63 0301 	sbc.w	r3, r3, r1
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004442:	4659      	mov	r1, fp
 8004444:	018b      	lsls	r3, r1, #6
 8004446:	4651      	mov	r1, sl
 8004448:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800444c:	4651      	mov	r1, sl
 800444e:	018a      	lsls	r2, r1, #6
 8004450:	4651      	mov	r1, sl
 8004452:	ebb2 0801 	subs.w	r8, r2, r1
 8004456:	4659      	mov	r1, fp
 8004458:	eb63 0901 	sbc.w	r9, r3, r1
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800446c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004470:	4690      	mov	r8, r2
 8004472:	4699      	mov	r9, r3
 8004474:	4623      	mov	r3, r4
 8004476:	eb18 0303 	adds.w	r3, r8, r3
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	462b      	mov	r3, r5
 800447e:	eb49 0303 	adc.w	r3, r9, r3
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004490:	4629      	mov	r1, r5
 8004492:	024b      	lsls	r3, r1, #9
 8004494:	4621      	mov	r1, r4
 8004496:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800449a:	4621      	mov	r1, r4
 800449c:	024a      	lsls	r2, r1, #9
 800449e:	4610      	mov	r0, r2
 80044a0:	4619      	mov	r1, r3
 80044a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044a6:	2200      	movs	r2, #0
 80044a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80044aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044b0:	f7fb feae 	bl	8000210 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044be:	e065      	b.n	800458c <HAL_RCC_GetSysClockFreq+0x420>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044cc:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x458>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	2200      	movs	r2, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	4611      	mov	r1, r2
 80044d8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
 80044de:	2300      	movs	r3, #0
 80044e0:	657b      	str	r3, [r7, #84]	; 0x54
 80044e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80044e6:	4642      	mov	r2, r8
 80044e8:	464b      	mov	r3, r9
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	0159      	lsls	r1, r3, #5
 80044f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f8:	0150      	lsls	r0, r2, #5
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4641      	mov	r1, r8
 8004500:	1a51      	subs	r1, r2, r1
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	4649      	mov	r1, r9
 8004506:	eb63 0301 	sbc.w	r3, r3, r1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004518:	4659      	mov	r1, fp
 800451a:	018b      	lsls	r3, r1, #6
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004522:	4651      	mov	r1, sl
 8004524:	018a      	lsls	r2, r1, #6
 8004526:	4651      	mov	r1, sl
 8004528:	1a54      	subs	r4, r2, r1
 800452a:	4659      	mov	r1, fp
 800452c:	eb63 0501 	sbc.w	r5, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	00eb      	lsls	r3, r5, #3
 800453a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453e:	00e2      	lsls	r2, r4, #3
 8004540:	4614      	mov	r4, r2
 8004542:	461d      	mov	r5, r3
 8004544:	4643      	mov	r3, r8
 8004546:	18e3      	adds	r3, r4, r3
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	464b      	mov	r3, r9
 800454c:	eb45 0303 	adc.w	r3, r5, r3
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455e:	4629      	mov	r1, r5
 8004560:	028b      	lsls	r3, r1, #10
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004568:	4621      	mov	r1, r4
 800456a:	028a      	lsls	r2, r1, #10
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004574:	2200      	movs	r2, #0
 8004576:	64bb      	str	r3, [r7, #72]	; 0x48
 8004578:	64fa      	str	r2, [r7, #76]	; 0x4c
 800457a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800457e:	f7fb fe47 	bl	8000210 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4613      	mov	r3, r2
 8004588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x458>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	0f1b      	lsrs	r3, r3, #28
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800459a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800459e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045aa:	e003      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	37b8      	adds	r7, #184	; 0xb8
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400

080045cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e28d      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8083 	beq.w	80046f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045ec:	4b94      	ldr	r3, [pc, #592]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d019      	beq.n	800462c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045f8:	4b91      	ldr	r3, [pc, #580]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004600:	2b08      	cmp	r3, #8
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004604:	4b8e      	ldr	r3, [pc, #568]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	d00c      	beq.n	800462c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004612:	4b8b      	ldr	r3, [pc, #556]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d112      	bne.n	8004644 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461e:	4b88      	ldr	r3, [pc, #544]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800462a:	d10b      	bne.n	8004644 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	4b84      	ldr	r3, [pc, #528]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d05b      	beq.n	80046f0 <HAL_RCC_OscConfig+0x124>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d157      	bne.n	80046f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e25a      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x90>
 800464e:	4b7c      	ldr	r3, [pc, #496]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a7b      	ldr	r2, [pc, #492]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e01d      	b.n	8004698 <HAL_RCC_OscConfig+0xcc>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0xb4>
 8004666:	4b76      	ldr	r3, [pc, #472]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a75      	ldr	r2, [pc, #468]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800466c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a72      	ldr	r2, [pc, #456]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e00b      	b.n	8004698 <HAL_RCC_OscConfig+0xcc>
 8004680:	4b6f      	ldr	r3, [pc, #444]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6e      	ldr	r2, [pc, #440]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	4b6c      	ldr	r3, [pc, #432]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a6b      	ldr	r2, [pc, #428]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d013      	beq.n	80046c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fe fa20 	bl	8002ae4 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fe fa1c 	bl	8002ae4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e21f      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0xdc>
 80046c6:	e014      	b.n	80046f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c8:	f7fe fa0c 	bl	8002ae4 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d0:	f7fe fa08 	bl	8002ae4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b64      	cmp	r3, #100	; 0x64
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e20b      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e2:	4b57      	ldr	r3, [pc, #348]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x104>
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d06f      	beq.n	80047de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046fe:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	2b00      	cmp	r3, #0
 8004708:	d017      	beq.n	800473a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800470a:	4b4d      	ldr	r3, [pc, #308]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004712:	2b08      	cmp	r3, #8
 8004714:	d105      	bne.n	8004722 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004716:	4b4a      	ldr	r3, [pc, #296]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800472a:	2b0c      	cmp	r3, #12
 800472c:	d11c      	bne.n	8004768 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800472e:	4b44      	ldr	r3, [pc, #272]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_RCC_OscConfig+0x186>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e1d3      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4937      	ldr	r1, [pc, #220]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	e03a      	b.n	80047de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004770:	4b34      	ldr	r3, [pc, #208]	; (8004844 <HAL_RCC_OscConfig+0x278>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fe f9b5 	bl	8002ae4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800477e:	f7fe f9b1 	bl	8002ae4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e1b4      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b28      	ldr	r3, [pc, #160]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4925      	ldr	r1, [pc, #148]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	e015      	b.n	80047de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b2:	4b24      	ldr	r3, [pc, #144]	; (8004844 <HAL_RCC_OscConfig+0x278>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe f994 	bl	8002ae4 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fe f990 	bl	8002ae4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e193      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	4b1b      	ldr	r3, [pc, #108]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d036      	beq.n	8004858 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f8:	f7fe f974 	bl	8002ae4 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004800:	f7fe f970 	bl	8002ae4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e173      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_OscConfig+0x274>)
 8004814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x234>
 800481e:	e01b      	b.n	8004858 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004820:	4b09      	ldr	r3, [pc, #36]	; (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004826:	f7fe f95d 	bl	8002ae4 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800482c:	e00e      	b.n	800484c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482e:	f7fe f959 	bl	8002ae4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d907      	bls.n	800484c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e15c      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
 8004840:	40023800 	.word	0x40023800
 8004844:	42470000 	.word	0x42470000
 8004848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484c:	4b8a      	ldr	r3, [pc, #552]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1ea      	bne.n	800482e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8097 	beq.w	8004994 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486a:	4b83      	ldr	r3, [pc, #524]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	4b7f      	ldr	r3, [pc, #508]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	4a7e      	ldr	r2, [pc, #504]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004884:	6413      	str	r3, [r2, #64]	; 0x40
 8004886:	4b7c      	ldr	r3, [pc, #496]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004892:	2301      	movs	r3, #1
 8004894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004896:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <HAL_RCC_OscConfig+0x4b0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d118      	bne.n	80048d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a2:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x4b0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x4b0>)
 80048a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ae:	f7fe f919 	bl	8002ae4 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fe f915 	bl	8002ae4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e118      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c8:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x4b0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d106      	bne.n	80048ea <HAL_RCC_OscConfig+0x31e>
 80048dc:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	; 0x70
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x358>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0x340>
 80048f2:	4b61      	ldr	r3, [pc, #388]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a60      	ldr	r2, [pc, #384]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70
 80048fe:	4b5e      	ldr	r3, [pc, #376]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a5d      	ldr	r2, [pc, #372]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	e00b      	b.n	8004924 <HAL_RCC_OscConfig+0x358>
 800490c:	4b5a      	ldr	r3, [pc, #360]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	4a59      	ldr	r2, [pc, #356]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	6713      	str	r3, [r2, #112]	; 0x70
 8004918:	4b57      	ldr	r3, [pc, #348]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800491a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800491c:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800491e:	f023 0304 	bic.w	r3, r3, #4
 8004922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d015      	beq.n	8004958 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fe f8da 	bl	8002ae4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004932:	e00a      	b.n	800494a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004934:	f7fe f8d6 	bl	8002ae4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004942:	4293      	cmp	r3, r2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0d7      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494a:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0ee      	beq.n	8004934 <HAL_RCC_OscConfig+0x368>
 8004956:	e014      	b.n	8004982 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004958:	f7fe f8c4 	bl	8002ae4 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800495e:	e00a      	b.n	8004976 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f7fe f8c0 	bl	8002ae4 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	; 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0c1      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004976:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ee      	bne.n	8004960 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004982:	7dfb      	ldrb	r3, [r7, #23]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004988:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	4a3a      	ldr	r2, [pc, #232]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 800498e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80ad 	beq.w	8004af8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d060      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d145      	bne.n	8004a3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b2:	4b33      	ldr	r3, [pc, #204]	; (8004a80 <HAL_RCC_OscConfig+0x4b4>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fe f894 	bl	8002ae4 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fe f890 	bl	8002ae4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e093      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	041b      	lsls	r3, r3, #16
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	061b      	lsls	r3, r3, #24
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	071b      	lsls	r3, r3, #28
 8004a0a:	491b      	ldr	r1, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a10:	4b1b      	ldr	r3, [pc, #108]	; (8004a80 <HAL_RCC_OscConfig+0x4b4>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fe f865 	bl	8002ae4 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe f861 	bl	8002ae4 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e064      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x452>
 8004a3c:	e05c      	b.n	8004af8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCC_OscConfig+0x4b4>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fe f84e 	bl	8002ae4 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fe f84a 	bl	8002ae4 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e04d      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x480>
 8004a6a:	e045      	b.n	8004af8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d107      	bne.n	8004a84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e040      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <HAL_RCC_OscConfig+0x538>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d030      	beq.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d129      	bne.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d122      	bne.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004aba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d119      	bne.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	085b      	lsrs	r3, r3, #1
 8004acc:	3b01      	subs	r3, #1
 8004ace:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d10f      	bne.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800

08004b08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e041      	b.n	8004b9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fe60 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 fac4 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d001      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e04e      	b.n	8004c5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d01d      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a1f      	ldr	r2, [pc, #124]	; (8004c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1c      	ldr	r2, [pc, #112]	; (8004c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1b      	ldr	r2, [pc, #108]	; (8004c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_Base_Start_IT+0x80>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d111      	bne.n	8004c4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d010      	beq.n	8004c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	e007      	b.n	8004c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800

08004c88 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6a1a      	ldr	r2, [r3, #32]
 8004ca6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	f240 4344 	movw	r3, #1092	; 0x444
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_Base_Stop_IT+0x48>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0201 	bic.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d122      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d11b      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f06f 0202 	mvn.w	r2, #2
 8004d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f9b5 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004d2e:	e005      	b.n	8004d3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f9a7 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9b8 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d122      	bne.n	8004d96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d11b      	bne.n	8004d96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f06f 0204 	mvn.w	r2, #4
 8004d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f98b 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004d82:	e005      	b.n	8004d90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f97d 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f98e 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d122      	bne.n	8004dea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d11b      	bne.n	8004dea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f06f 0208 	mvn.w	r2, #8
 8004dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2204      	movs	r2, #4
 8004dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f961 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004dd6:	e005      	b.n	8004de4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f953 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f964 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0310 	and.w	r3, r3, #16
 8004df4:	2b10      	cmp	r3, #16
 8004df6:	d122      	bne.n	8004e3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d11b      	bne.n	8004e3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0210 	mvn.w	r2, #16
 8004e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2208      	movs	r2, #8
 8004e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f937 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004e2a:	e005      	b.n	8004e38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f929 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f93a 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10e      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f06f 0201 	mvn.w	r2, #1
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd f999 	bl	800219c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d10e      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d107      	bne.n	8004e96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fadf 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d107      	bne.n	8004ec2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8ff 	bl	80050c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f003 0320 	and.w	r3, r3, #32
 8004ecc:	2b20      	cmp	r3, #32
 8004ece:	d10e      	bne.n	8004eee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d107      	bne.n	8004eee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f06f 0220 	mvn.w	r2, #32
 8004ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 faa9 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e0b4      	b.n	800507c <HAL_TIM_ConfigClockSource+0x186>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f38:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4a:	d03e      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xd4>
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f50:	f200 8087 	bhi.w	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f58:	f000 8086 	beq.w	8005068 <HAL_TIM_ConfigClockSource+0x172>
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	d87f      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f62:	2b70      	cmp	r3, #112	; 0x70
 8004f64:	d01a      	beq.n	8004f9c <HAL_TIM_ConfigClockSource+0xa6>
 8004f66:	2b70      	cmp	r3, #112	; 0x70
 8004f68:	d87b      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	2b60      	cmp	r3, #96	; 0x60
 8004f6c:	d050      	beq.n	8005010 <HAL_TIM_ConfigClockSource+0x11a>
 8004f6e:	2b60      	cmp	r3, #96	; 0x60
 8004f70:	d877      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f72:	2b50      	cmp	r3, #80	; 0x50
 8004f74:	d03c      	beq.n	8004ff0 <HAL_TIM_ConfigClockSource+0xfa>
 8004f76:	2b50      	cmp	r3, #80	; 0x50
 8004f78:	d873      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d058      	beq.n	8005030 <HAL_TIM_ConfigClockSource+0x13a>
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d86f      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f82:	2b30      	cmp	r3, #48	; 0x30
 8004f84:	d064      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x15a>
 8004f86:	2b30      	cmp	r3, #48	; 0x30
 8004f88:	d86b      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d060      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8e:	2b20      	cmp	r3, #32
 8004f90:	d867      	bhi.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d05c      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x15a>
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d05a      	beq.n	8005050 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9a:	e062      	b.n	8005062 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	6899      	ldr	r1, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f000 f9ac 	bl	8005308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
      break;
 8004fc8:	e04f      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6899      	ldr	r1, [r3, #8]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f000 f995 	bl	8005308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fec:	609a      	str	r2, [r3, #8]
      break;
 8004fee:	e03c      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6859      	ldr	r1, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f000 f909 	bl	8005214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2150      	movs	r1, #80	; 0x50
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f962 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800500e:	e02c      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	461a      	mov	r2, r3
 800501e:	f000 f928 	bl	8005272 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2160      	movs	r1, #96	; 0x60
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f952 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800502e:	e01c      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	461a      	mov	r2, r3
 800503e:	f000 f8e9 	bl	8005214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2140      	movs	r1, #64	; 0x40
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f942 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800504e:	e00c      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f000 f939 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 8005060:	e003      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
      break;
 8005066:	e000      	b.n	800506a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800507a:	7bfb      	ldrb	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3d      	ldr	r2, [pc, #244]	; (80051ec <TIM_Base_SetConfig+0x118>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3b      	ldr	r2, [pc, #236]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d027      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <TIM_Base_SetConfig+0x118>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d023      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a29      	ldr	r2, [pc, #164]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <TIM_Base_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a27      	ldr	r2, [pc, #156]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a24      	ldr	r2, [pc, #144]	; (800520c <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40010400 	.word	0x40010400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800
 8005208:	40001800 	.word	0x40001800
 800520c:	40001c00 	.word	0x40001c00
 8005210:	40002000 	.word	0x40002000

08005214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 030a 	bic.w	r3, r3, #10
 8005250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800529c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e05a      	b.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10c      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e03f      	b.n	80054fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fd fa78 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fd7b 	bl	8005fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b08a      	sub	sp, #40	; 0x28
 8005506:	af02      	add	r7, sp, #8
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b20      	cmp	r3, #32
 8005520:	d17c      	bne.n	800561c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_UART_Transmit+0x2c>
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e075      	b.n	800561e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_UART_Transmit+0x3e>
 800553c:	2302      	movs	r3, #2
 800553e:	e06e      	b.n	800561e <HAL_UART_Transmit+0x11c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2221      	movs	r2, #33	; 0x21
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005556:	f7fd fac5 	bl	8002ae4 <HAL_GetTick>
 800555a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005570:	d108      	bne.n	8005584 <HAL_UART_Transmit+0x82>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	e003      	b.n	800558c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005588:	2300      	movs	r3, #0
 800558a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005594:	e02a      	b.n	80055ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 faf9 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e036      	b.n	800561e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	3302      	adds	r3, #2
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e007      	b.n	80055de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1cf      	bne.n	8005596 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 fac9 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0ba      	sub	sp, #232	; 0xe8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005654:	2300      	movs	r3, #0
 8005656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
 800567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fbd3 	bl	8005e32 <UART_Receive_IT>
      return;
 800568c:	e256      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800568e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80de 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
 8005698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80d1 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
 8005706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 81ed 	beq.w	8005b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb5e 	bl	8005e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <HAL_UART_IRQHandler+0x17a>
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04f      	beq.n	8005842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa66 	bl	8005c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d141      	bne.n	800583a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	4a7d      	ldr	r2, [pc, #500]	; (8005a04 <HAL_UART_IRQHandler+0x3dc>)
 8005810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	4618      	mov	r0, r3
 8005818:	f7fe f95a 	bl	8003ad0 <HAL_DMA_Abort_IT>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00e      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f99a 	bl	8005b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e00a      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f996 	bl	8005b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	e006      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f992 	bl	8005b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800584e:	e170      	b.n	8005b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	bf00      	nop
    return;
 8005852:	e16e      	b.n	8005b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 814a 	bne.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8143 	beq.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 813c 	beq.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	f040 80b4 	bne.w	8005a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8140 	beq.w	8005b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058be:	429a      	cmp	r2, r3
 80058c0:	f080 8139 	bcs.w	8005b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d6:	f000 8088 	beq.w	80059ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800590a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800594e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e3      	bne.n	80059a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fe f803 	bl	80039f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8c0 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a00:	e099      	b.n	8005b36 <HAL_UART_IRQHandler+0x50e>
 8005a02:	bf00      	nop
 8005a04:	08005d3b 	.word	0x08005d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 808b 	beq.w	8005b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8086 	beq.w	8005b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a52:	647a      	str	r2, [r7, #68]	; 0x44
 8005a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e3      	bne.n	8005a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	623b      	str	r3, [r7, #32]
   return(result);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e3      	bne.n	8005a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0310 	bic.w	r3, r3, #16
 8005ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ad0:	61fa      	str	r2, [r7, #28]
 8005ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e3      	bne.n	8005aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f848 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af0:	e023      	b.n	8005b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_UART_IRQHandler+0x4ea>
 8005afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f929 	bl	8005d62 <UART_Transmit_IT>
    return;
 8005b10:	e014      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <HAL_UART_IRQHandler+0x514>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f969 	bl	8005e02 <UART_EndTransmit_IT>
    return;
 8005b30:	e004      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
    return;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
      return;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
      return;
 8005b3a:	bf00      	nop
  }
}
 8005b3c:	37e8      	adds	r7, #232	; 0xe8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop

08005b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b090      	sub	sp, #64	; 0x40
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba8:	e050      	b.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d04c      	beq.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bb8:	f7fc ff94 	bl	8002ae4 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d241      	bcs.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005be8:	637a      	str	r2, [r7, #52]	; 0x34
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	623a      	str	r2, [r7, #32]
 8005c1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	69f9      	ldr	r1, [r7, #28]
 8005c22:	6a3a      	ldr	r2, [r7, #32]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e00f      	b.n	8005c6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d09f      	beq.n	8005baa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3740      	adds	r7, #64	; 0x40
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b095      	sub	sp, #84	; 0x54
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d119      	bne.n	8005d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	61ba      	str	r2, [r7, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d2e:	bf00      	nop
 8005d30:	3754      	adds	r7, #84	; 0x54
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff ff09 	bl	8005b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b21      	cmp	r3, #33	; 0x21
 8005d74:	d13e      	bne.n	8005df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	d114      	bne.n	8005daa <UART_Transmit_IT+0x48>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d110      	bne.n	8005daa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	621a      	str	r2, [r3, #32]
 8005da8:	e008      	b.n	8005dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6211      	str	r1, [r2, #32]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10f      	bne.n	8005df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68da      	ldr	r2, [r3, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fe8e 	bl	8005b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b08c      	sub	sp, #48	; 0x30
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	f040 80ab 	bne.w	8005f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e50:	d117      	bne.n	8005e82 <UART_Receive_IT+0x50>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d113      	bne.n	8005e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	1c9a      	adds	r2, r3, #2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e80:	e026      	b.n	8005ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d007      	beq.n	8005ea6 <UART_Receive_IT+0x74>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10a      	bne.n	8005eb4 <UART_Receive_IT+0x82>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e008      	b.n	8005ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4619      	mov	r1, r3
 8005ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d15a      	bne.n	8005f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0220 	bic.w	r2, r2, #32
 8005ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d135      	bne.n	8005f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e853 3f00 	ldrex	r3, [r3]
 8005f38:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f023 0310 	bic.w	r3, r3, #16
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4a:	623a      	str	r2, [r7, #32]
 8005f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4e:	69f9      	ldr	r1, [r7, #28]
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e5      	bne.n	8005f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d10a      	bne.n	8005f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fdf9 	bl	8005b80 <HAL_UARTEx_RxEventCallback>
 8005f8e:	e002      	b.n	8005f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fde1 	bl	8005b58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e002      	b.n	8005fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3730      	adds	r7, #48	; 0x30
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b0c0      	sub	sp, #256	; 0x100
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	68d9      	ldr	r1, [r3, #12]
 8005fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	ea40 0301 	orr.w	r3, r0, r1
 8005fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	431a      	orrs	r2, r3
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006000:	f021 010c 	bic.w	r1, r1, #12
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800600e:	430b      	orrs	r3, r1
 8006010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	6999      	ldr	r1, [r3, #24]
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	ea40 0301 	orr.w	r3, r0, r1
 800602e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	4b8f      	ldr	r3, [pc, #572]	; (8006274 <UART_SetConfig+0x2cc>)
 8006038:	429a      	cmp	r2, r3
 800603a:	d005      	beq.n	8006048 <UART_SetConfig+0xa0>
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b8d      	ldr	r3, [pc, #564]	; (8006278 <UART_SetConfig+0x2d0>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d104      	bne.n	8006052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006048:	f7fe f84a 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 800604c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006050:	e003      	b.n	800605a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7fe f831 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8006056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	69db      	ldr	r3, [r3, #28]
 8006060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006064:	f040 810c 	bne.w	8006280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800607a:	4622      	mov	r2, r4
 800607c:	462b      	mov	r3, r5
 800607e:	1891      	adds	r1, r2, r2
 8006080:	65b9      	str	r1, [r7, #88]	; 0x58
 8006082:	415b      	adcs	r3, r3
 8006084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800608a:	4621      	mov	r1, r4
 800608c:	eb12 0801 	adds.w	r8, r2, r1
 8006090:	4629      	mov	r1, r5
 8006092:	eb43 0901 	adc.w	r9, r3, r1
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060aa:	4690      	mov	r8, r2
 80060ac:	4699      	mov	r9, r3
 80060ae:	4623      	mov	r3, r4
 80060b0:	eb18 0303 	adds.w	r3, r8, r3
 80060b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b8:	462b      	mov	r3, r5
 80060ba:	eb49 0303 	adc.w	r3, r9, r3
 80060be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80060d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80060d6:	460b      	mov	r3, r1
 80060d8:	18db      	adds	r3, r3, r3
 80060da:	653b      	str	r3, [r7, #80]	; 0x50
 80060dc:	4613      	mov	r3, r2
 80060de:	eb42 0303 	adc.w	r3, r2, r3
 80060e2:	657b      	str	r3, [r7, #84]	; 0x54
 80060e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060ec:	f7fa f890 	bl	8000210 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b61      	ldr	r3, [pc, #388]	; (800627c <UART_SetConfig+0x2d4>)
 80060f6:	fba3 2302 	umull	r2, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	011c      	lsls	r4, r3, #4
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800610c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	64b9      	str	r1, [r7, #72]	; 0x48
 8006118:	415b      	adcs	r3, r3
 800611a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800611c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006120:	4641      	mov	r1, r8
 8006122:	eb12 0a01 	adds.w	sl, r2, r1
 8006126:	4649      	mov	r1, r9
 8006128:	eb43 0b01 	adc.w	fp, r3, r1
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800613c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006140:	4692      	mov	sl, r2
 8006142:	469b      	mov	fp, r3
 8006144:	4643      	mov	r3, r8
 8006146:	eb1a 0303 	adds.w	r3, sl, r3
 800614a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800614e:	464b      	mov	r3, r9
 8006150:	eb4b 0303 	adc.w	r3, fp, r3
 8006154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800616c:	460b      	mov	r3, r1
 800616e:	18db      	adds	r3, r3, r3
 8006170:	643b      	str	r3, [r7, #64]	; 0x40
 8006172:	4613      	mov	r3, r2
 8006174:	eb42 0303 	adc.w	r3, r2, r3
 8006178:	647b      	str	r3, [r7, #68]	; 0x44
 800617a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800617e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006182:	f7fa f845 	bl	8000210 <__aeabi_uldivmod>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4611      	mov	r1, r2
 800618c:	4b3b      	ldr	r3, [pc, #236]	; (800627c <UART_SetConfig+0x2d4>)
 800618e:	fba3 2301 	umull	r2, r3, r3, r1
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2264      	movs	r2, #100	; 0x64
 8006196:	fb02 f303 	mul.w	r3, r2, r3
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061a2:	4b36      	ldr	r3, [pc, #216]	; (800627c <UART_SetConfig+0x2d4>)
 80061a4:	fba3 2302 	umull	r2, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80061c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	1891      	adds	r1, r2, r2
 80061ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80061cc:	415b      	adcs	r3, r3
 80061ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80061d4:	4641      	mov	r1, r8
 80061d6:	1851      	adds	r1, r2, r1
 80061d8:	6339      	str	r1, [r7, #48]	; 0x30
 80061da:	4649      	mov	r1, r9
 80061dc:	414b      	adcs	r3, r1
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061ec:	4659      	mov	r1, fp
 80061ee:	00cb      	lsls	r3, r1, #3
 80061f0:	4651      	mov	r1, sl
 80061f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f6:	4651      	mov	r1, sl
 80061f8:	00ca      	lsls	r2, r1, #3
 80061fa:	4610      	mov	r0, r2
 80061fc:	4619      	mov	r1, r3
 80061fe:	4603      	mov	r3, r0
 8006200:	4642      	mov	r2, r8
 8006202:	189b      	adds	r3, r3, r2
 8006204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006208:	464b      	mov	r3, r9
 800620a:	460a      	mov	r2, r1
 800620c:	eb42 0303 	adc.w	r3, r2, r3
 8006210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006228:	460b      	mov	r3, r1
 800622a:	18db      	adds	r3, r3, r3
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
 800622e:	4613      	mov	r3, r2
 8006230:	eb42 0303 	adc.w	r3, r2, r3
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800623a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800623e:	f7f9 ffe7 	bl	8000210 <__aeabi_uldivmod>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4b0d      	ldr	r3, [pc, #52]	; (800627c <UART_SetConfig+0x2d4>)
 8006248:	fba3 1302 	umull	r1, r3, r3, r2
 800624c:	095b      	lsrs	r3, r3, #5
 800624e:	2164      	movs	r1, #100	; 0x64
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	3332      	adds	r3, #50	; 0x32
 800625a:	4a08      	ldr	r2, [pc, #32]	; (800627c <UART_SetConfig+0x2d4>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	f003 0207 	and.w	r2, r3, #7
 8006266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4422      	add	r2, r4
 800626e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006270:	e106      	b.n	8006480 <UART_SetConfig+0x4d8>
 8006272:	bf00      	nop
 8006274:	40011000 	.word	0x40011000
 8006278:	40011400 	.word	0x40011400
 800627c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006284:	2200      	movs	r2, #0
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800628a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800628e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006292:	4642      	mov	r2, r8
 8006294:	464b      	mov	r3, r9
 8006296:	1891      	adds	r1, r2, r2
 8006298:	6239      	str	r1, [r7, #32]
 800629a:	415b      	adcs	r3, r3
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a2:	4641      	mov	r1, r8
 80062a4:	1854      	adds	r4, r2, r1
 80062a6:	4649      	mov	r1, r9
 80062a8:	eb43 0501 	adc.w	r5, r3, r1
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	00eb      	lsls	r3, r5, #3
 80062b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ba:	00e2      	lsls	r2, r4, #3
 80062bc:	4614      	mov	r4, r2
 80062be:	461d      	mov	r5, r3
 80062c0:	4643      	mov	r3, r8
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062c8:	464b      	mov	r3, r9
 80062ca:	eb45 0303 	adc.w	r3, r5, r3
 80062ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ee:	4629      	mov	r1, r5
 80062f0:	008b      	lsls	r3, r1, #2
 80062f2:	4621      	mov	r1, r4
 80062f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f8:	4621      	mov	r1, r4
 80062fa:	008a      	lsls	r2, r1, #2
 80062fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006300:	f7f9 ff86 	bl	8000210 <__aeabi_uldivmod>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4b60      	ldr	r3, [pc, #384]	; (800648c <UART_SetConfig+0x4e4>)
 800630a:	fba3 2302 	umull	r2, r3, r3, r2
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	011c      	lsls	r4, r3, #4
 8006312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006316:	2200      	movs	r2, #0
 8006318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800631c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	61b9      	str	r1, [r7, #24]
 800632c:	415b      	adcs	r3, r3
 800632e:	61fb      	str	r3, [r7, #28]
 8006330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6139      	str	r1, [r7, #16]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006368:	464b      	mov	r3, r9
 800636a:	460a      	mov	r2, r1
 800636c:	eb42 0303 	adc.w	r3, r2, r3
 8006370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	67bb      	str	r3, [r7, #120]	; 0x78
 800637e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800638c:	4649      	mov	r1, r9
 800638e:	008b      	lsls	r3, r1, #2
 8006390:	4641      	mov	r1, r8
 8006392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006396:	4641      	mov	r1, r8
 8006398:	008a      	lsls	r2, r1, #2
 800639a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800639e:	f7f9 ff37 	bl	8000210 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	4b38      	ldr	r3, [pc, #224]	; (800648c <UART_SetConfig+0x4e4>)
 80063aa:	fba3 2301 	umull	r2, r3, r3, r1
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2264      	movs	r2, #100	; 0x64
 80063b2:	fb02 f303 	mul.w	r3, r2, r3
 80063b6:	1acb      	subs	r3, r1, r3
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a33      	ldr	r2, [pc, #204]	; (800648c <UART_SetConfig+0x4e4>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063c8:	441c      	add	r4, r3
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	673b      	str	r3, [r7, #112]	; 0x70
 80063d2:	677a      	str	r2, [r7, #116]	; 0x74
 80063d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	1891      	adds	r1, r2, r2
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	415b      	adcs	r3, r3
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e8:	4641      	mov	r1, r8
 80063ea:	1851      	adds	r1, r2, r1
 80063ec:	6039      	str	r1, [r7, #0]
 80063ee:	4649      	mov	r1, r9
 80063f0:	414b      	adcs	r3, r1
 80063f2:	607b      	str	r3, [r7, #4]
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006400:	4659      	mov	r1, fp
 8006402:	00cb      	lsls	r3, r1, #3
 8006404:	4651      	mov	r1, sl
 8006406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640a:	4651      	mov	r1, sl
 800640c:	00ca      	lsls	r2, r1, #3
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	4603      	mov	r3, r0
 8006414:	4642      	mov	r2, r8
 8006416:	189b      	adds	r3, r3, r2
 8006418:	66bb      	str	r3, [r7, #104]	; 0x68
 800641a:	464b      	mov	r3, r9
 800641c:	460a      	mov	r2, r1
 800641e:	eb42 0303 	adc.w	r3, r2, r3
 8006422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	663b      	str	r3, [r7, #96]	; 0x60
 800642e:	667a      	str	r2, [r7, #100]	; 0x64
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	f04f 0300 	mov.w	r3, #0
 8006438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800643c:	4649      	mov	r1, r9
 800643e:	008b      	lsls	r3, r1, #2
 8006440:	4641      	mov	r1, r8
 8006442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006446:	4641      	mov	r1, r8
 8006448:	008a      	lsls	r2, r1, #2
 800644a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800644e:	f7f9 fedf 	bl	8000210 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <UART_SetConfig+0x4e4>)
 8006458:	fba3 1302 	umull	r1, r3, r3, r2
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	2164      	movs	r1, #100	; 0x64
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	3332      	adds	r3, #50	; 0x32
 800646a:	4a08      	ldr	r2, [pc, #32]	; (800648c <UART_SetConfig+0x4e4>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	095b      	lsrs	r3, r3, #5
 8006472:	f003 020f 	and.w	r2, r3, #15
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4422      	add	r2, r4
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800648c:	51eb851f 	.word	0x51eb851f

08006490 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800649e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064a2:	2b84      	cmp	r3, #132	; 0x84
 80064a4:	d005      	beq.n	80064b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	3303      	adds	r3, #3
 80064b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064b2:	68fb      	ldr	r3, [r7, #12]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064c4:	f000 faf6 	bl	8006ab4 <vTaskStartScheduler>
  
  return osOK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	bd80      	pop	{r7, pc}

080064ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064d0:	b089      	sub	sp, #36	; 0x24
 80064d2:	af04      	add	r7, sp, #16
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <osThreadCreate+0x54>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01c      	beq.n	8006522 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685c      	ldr	r4, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691e      	ldr	r6, [r3, #16]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffc8 	bl	8006490 <makeFreeRtosPriority>
 8006500:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	9100      	str	r1, [sp, #0]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	4632      	mov	r2, r6
 8006514:	4629      	mov	r1, r5
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f8ed 	bl	80066f6 <xTaskCreateStatic>
 800651c:	4603      	mov	r3, r0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e01c      	b.n	800655c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685c      	ldr	r4, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800652e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff ffaa 	bl	8006490 <makeFreeRtosPriority>
 800653c:	4602      	mov	r2, r0
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	9200      	str	r2, [sp, #0]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4632      	mov	r2, r6
 800654a:	4629      	mov	r1, r5
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f92f 	bl	80067b0 <xTaskCreate>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	e000      	b.n	800655e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006566 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <osDelay+0x16>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	e000      	b.n	800657e <osDelay+0x18>
 800657c:	2301      	movs	r3, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fa64 	bl	8006a4c <vTaskDelay>
  
  return osOK;
 8006584:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f103 0208 	add.w	r2, r3, #8
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f04f 32ff 	mov.w	r2, #4294967295
 80065a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f103 0208 	add.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f103 0208 	add.w	r2, r3, #8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
}
 8006624:	bf00      	nop
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d103      	bne.n	8006650 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	60fb      	str	r3, [r7, #12]
 800664e:	e00c      	b.n	800666a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3308      	adds	r3, #8
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e002      	b.n	800665e <vListInsert+0x2e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	429a      	cmp	r2, r3
 8006668:	d2f6      	bcs.n	8006658 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6892      	ldr	r2, [r2, #8]
 80066b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6852      	ldr	r2, [r2, #4]
 80066c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d103      	bne.n	80066d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1e5a      	subs	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08e      	sub	sp, #56	; 0x38
 80066fa:	af04      	add	r7, sp, #16
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
 8006702:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xTaskCreateStatic+0x46>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	61fb      	str	r3, [r7, #28]
}
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800673c:	23a0      	movs	r3, #160	; 0xa0
 800673e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2ba0      	cmp	r3, #160	; 0xa0
 8006744:	d00a      	beq.n	800675c <xTaskCreateStatic+0x66>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	61bb      	str	r3, [r7, #24]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800675c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01e      	beq.n	80067a2 <xTaskCreateStatic+0xac>
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01b      	beq.n	80067a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006772:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006776:	2202      	movs	r2, #2
 8006778:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800677c:	2300      	movs	r3, #0
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	9302      	str	r3, [sp, #8]
 8006784:	f107 0314 	add.w	r3, r7, #20
 8006788:	9301      	str	r3, [sp, #4]
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f851 	bl	800683c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800679a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800679c:	f000 f8ec 	bl	8006978 <prvAddNewTaskToReadyList>
 80067a0:	e001      	b.n	80067a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067a6:	697b      	ldr	r3, [r7, #20]
	}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	; 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08c      	sub	sp, #48	; 0x30
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 feef 	bl	80075a8 <pvPortMalloc>
 80067ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00e      	beq.n	80067f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80067d2:	20a0      	movs	r0, #160	; 0xa0
 80067d4:	f000 fee8 	bl	80075a8 <pvPortMalloc>
 80067d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
 80067e6:	e005      	b.n	80067f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80067e8:	6978      	ldr	r0, [r7, #20]
 80067ea:	f000 ffa9 	bl	8007740 <vPortFree>
 80067ee:	e001      	b.n	80067f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d017      	beq.n	800682a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	2300      	movs	r3, #0
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	9302      	str	r3, [sp, #8]
 800680c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f80f 	bl	800683c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800681e:	69f8      	ldr	r0, [r7, #28]
 8006820:	f000 f8aa 	bl	8006978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006824:	2301      	movs	r3, #1
 8006826:	61bb      	str	r3, [r7, #24]
 8006828:	e002      	b.n	8006830 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006830:	69bb      	ldr	r3, [r7, #24]
	}
 8006832:	4618      	mov	r0, r3
 8006834:	3720      	adds	r7, #32
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	607a      	str	r2, [r7, #4]
 8006848:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006854:	3b01      	subs	r3, #1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800685c:	69bb      	ldr	r3, [r7, #24]
 800685e:	f023 0307 	bic.w	r3, r3, #7
 8006862:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0307 	and.w	r3, r3, #7
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <prvInitialiseNewTask+0x48>
	__asm volatile
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	617b      	str	r3, [r7, #20]
}
 8006880:	bf00      	nop
 8006882:	e7fe      	b.n	8006882 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d01f      	beq.n	80068ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e012      	b.n	80068b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	4413      	add	r3, r2
 8006896:	7819      	ldrb	r1, [r3, #0]
 8006898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	3334      	adds	r3, #52	; 0x34
 80068a0:	460a      	mov	r2, r1
 80068a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	4413      	add	r3, r2
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	3301      	adds	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d9e9      	bls.n	8006890 <prvInitialiseNewTask+0x54>
 80068bc:	e000      	b.n	80068c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80068be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068c8:	e003      	b.n	80068d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	2b06      	cmp	r3, #6
 80068d6:	d901      	bls.n	80068dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80068d8:	2306      	movs	r3, #6
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	2200      	movs	r2, #0
 80068ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3304      	adds	r3, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fe6b 	bl	80065ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	3318      	adds	r3, #24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff fe66 	bl	80065ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006906:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	f1c3 0207 	rsb	r2, r3, #7
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006916:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	2200      	movs	r2, #0
 8006924:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	334c      	adds	r3, #76	; 0x4c
 800692c:	224c      	movs	r2, #76	; 0x4c
 800692e:	2100      	movs	r1, #0
 8006930:	4618      	mov	r0, r3
 8006932:	f001 f823 	bl	800797c <memset>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <prvInitialiseNewTask+0x130>)
 800693a:	651a      	str	r2, [r3, #80]	; 0x50
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	4a0c      	ldr	r2, [pc, #48]	; (8006970 <prvInitialiseNewTask+0x134>)
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <prvInitialiseNewTask+0x138>)
 8006946:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	69b8      	ldr	r0, [r7, #24]
 800694e:	f000 fc1f 	bl	8007190 <pxPortInitialiseStack>
 8006952:	4602      	mov	r2, r0
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006962:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006964:	bf00      	nop
 8006966:	3720      	adds	r7, #32
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	200083a4 	.word	0x200083a4
 8006970:	2000840c 	.word	0x2000840c
 8006974:	20008474 	.word	0x20008474

08006978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006980:	f000 fd30 	bl	80073e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006984:	4b2a      	ldr	r3, [pc, #168]	; (8006a30 <prvAddNewTaskToReadyList+0xb8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <prvAddNewTaskToReadyList+0xb8>)
 800698c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800698e:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <prvAddNewTaskToReadyList+0xbc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006996:	4a27      	ldr	r2, [pc, #156]	; (8006a34 <prvAddNewTaskToReadyList+0xbc>)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800699c:	4b24      	ldr	r3, [pc, #144]	; (8006a30 <prvAddNewTaskToReadyList+0xb8>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d110      	bne.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069a4:	f000 facc 	bl	8006f40 <prvInitialiseTaskLists>
 80069a8:	e00d      	b.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <prvAddNewTaskToReadyList+0xc0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <prvAddNewTaskToReadyList+0xbc>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	429a      	cmp	r2, r3
 80069be:	d802      	bhi.n	80069c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069c0:	4a1c      	ldr	r2, [pc, #112]	; (8006a34 <prvAddNewTaskToReadyList+0xbc>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069c6:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <prvAddNewTaskToReadyList+0xc4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <prvAddNewTaskToReadyList+0xc4>)
 80069ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	2201      	movs	r2, #1
 80069d6:	409a      	lsls	r2, r3
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4313      	orrs	r3, r2
 80069de:	4a18      	ldr	r2, [pc, #96]	; (8006a40 <prvAddNewTaskToReadyList+0xc8>)
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <prvAddNewTaskToReadyList+0xcc>)
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4619      	mov	r1, r3
 80069f8:	4610      	mov	r0, r2
 80069fa:	f7ff fdf5 	bl	80065e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80069fe:	f000 fd21 	bl	8007444 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a02:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <prvAddNewTaskToReadyList+0xc0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00e      	beq.n	8006a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <prvAddNewTaskToReadyList+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d207      	bcs.n	8006a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <prvAddNewTaskToReadyList+0xd0>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	20004750 	.word	0x20004750
 8006a34:	20004650 	.word	0x20004650
 8006a38:	2000475c 	.word	0x2000475c
 8006a3c:	2000476c 	.word	0x2000476c
 8006a40:	20004758 	.word	0x20004758
 8006a44:	20004654 	.word	0x20004654
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <vTaskDelay+0x60>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <vTaskDelay+0x30>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60bb      	str	r3, [r7, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a7c:	f000 f884 	bl	8006b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a80:	2100      	movs	r1, #0
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb1e 	bl	80070c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a88:	f000 f88c 	bl	8006ba4 <xTaskResumeAll>
 8006a8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d107      	bne.n	8006aa4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <vTaskDelay+0x64>)
 8006a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20004778 	.word	0x20004778
 8006ab0:	e000ed04 	.word	0xe000ed04

08006ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08a      	sub	sp, #40	; 0x28
 8006ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	1d39      	adds	r1, r7, #4
 8006ac6:	f107 0308 	add.w	r3, r7, #8
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fb f9ca 	bl	8001e64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	9202      	str	r2, [sp, #8]
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	4921      	ldr	r1, [pc, #132]	; (8006b68 <vTaskStartScheduler+0xb4>)
 8006ae4:	4821      	ldr	r0, [pc, #132]	; (8006b6c <vTaskStartScheduler+0xb8>)
 8006ae6:	f7ff fe06 	bl	80066f6 <xTaskCreateStatic>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <vTaskStartScheduler+0xbc>)
 8006aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006af0:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <vTaskStartScheduler+0xbc>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006af8:	2301      	movs	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	e001      	b.n	8006b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d11b      	bne.n	8006b40 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	613b      	str	r3, [r7, #16]
}
 8006b1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b1c:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <vTaskStartScheduler+0xc0>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	334c      	adds	r3, #76	; 0x4c
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <vTaskStartScheduler+0xc4>)
 8006b24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b26:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <vTaskStartScheduler+0xc8>)
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b2e:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <vTaskStartScheduler+0xcc>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b34:	4b13      	ldr	r3, [pc, #76]	; (8006b84 <vTaskStartScheduler+0xd0>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b3a:	f000 fbb1 	bl	80072a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b3e:	e00e      	b.n	8006b5e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d10a      	bne.n	8006b5e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4c:	f383 8811 	msr	BASEPRI, r3
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	60fb      	str	r3, [r7, #12]
}
 8006b5a:	bf00      	nop
 8006b5c:	e7fe      	b.n	8006b5c <vTaskStartScheduler+0xa8>
}
 8006b5e:	bf00      	nop
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	08007c0c 	.word	0x08007c0c
 8006b6c:	08006f11 	.word	0x08006f11
 8006b70:	20004774 	.word	0x20004774
 8006b74:	20004650 	.word	0x20004650
 8006b78:	2000009c 	.word	0x2000009c
 8006b7c:	20004770 	.word	0x20004770
 8006b80:	2000475c 	.word	0x2000475c
 8006b84:	20004754 	.word	0x20004754

08006b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b8c:	4b04      	ldr	r3, [pc, #16]	; (8006ba0 <vTaskSuspendAll+0x18>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3301      	adds	r3, #1
 8006b92:	4a03      	ldr	r2, [pc, #12]	; (8006ba0 <vTaskSuspendAll+0x18>)
 8006b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20004778 	.word	0x20004778

08006ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bb2:	4b41      	ldr	r3, [pc, #260]	; (8006cb8 <xTaskResumeAll+0x114>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	603b      	str	r3, [r7, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006bd0:	f000 fc08 	bl	80073e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006bd4:	4b38      	ldr	r3, [pc, #224]	; (8006cb8 <xTaskResumeAll+0x114>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	4a37      	ldr	r2, [pc, #220]	; (8006cb8 <xTaskResumeAll+0x114>)
 8006bdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bde:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <xTaskResumeAll+0x114>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d161      	bne.n	8006caa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006be6:	4b35      	ldr	r3, [pc, #212]	; (8006cbc <xTaskResumeAll+0x118>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d05d      	beq.n	8006caa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bee:	e02e      	b.n	8006c4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf0:	4b33      	ldr	r3, [pc, #204]	; (8006cc0 <xTaskResumeAll+0x11c>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3318      	adds	r3, #24
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fd50 	bl	80066a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fd4b 	bl	80066a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	2201      	movs	r2, #1
 8006c12:	409a      	lsls	r2, r3
 8006c14:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <xTaskResumeAll+0x120>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	4a2a      	ldr	r2, [pc, #168]	; (8006cc4 <xTaskResumeAll+0x120>)
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a27      	ldr	r2, [pc, #156]	; (8006cc8 <xTaskResumeAll+0x124>)
 8006c2c:	441a      	add	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3304      	adds	r3, #4
 8006c32:	4619      	mov	r1, r3
 8006c34:	4610      	mov	r0, r2
 8006c36:	f7ff fcd7 	bl	80065e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <xTaskResumeAll+0x128>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c48:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <xTaskResumeAll+0x12c>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <xTaskResumeAll+0x11c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1cc      	bne.n	8006bf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c5c:	f000 fa12 	bl	8007084 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c60:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <xTaskResumeAll+0x130>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006c6c:	f000 f836 	bl	8006cdc <xTaskIncrementTick>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006c76:	4b16      	ldr	r3, [pc, #88]	; (8006cd0 <xTaskResumeAll+0x12c>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1f1      	bne.n	8006c6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <xTaskResumeAll+0x130>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c8e:	4b10      	ldr	r3, [pc, #64]	; (8006cd0 <xTaskResumeAll+0x12c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c96:	2301      	movs	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c9a:	4b0f      	ldr	r3, [pc, #60]	; (8006cd8 <xTaskResumeAll+0x134>)
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f000 fbcb 	bl	8007444 <vPortExitCritical>

	return xAlreadyYielded;
 8006cae:	68bb      	ldr	r3, [r7, #8]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20004778 	.word	0x20004778
 8006cbc:	20004750 	.word	0x20004750
 8006cc0:	20004710 	.word	0x20004710
 8006cc4:	20004758 	.word	0x20004758
 8006cc8:	20004654 	.word	0x20004654
 8006ccc:	20004650 	.word	0x20004650
 8006cd0:	20004764 	.word	0x20004764
 8006cd4:	20004760 	.word	0x20004760
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ce6:	4b4e      	ldr	r3, [pc, #312]	; (8006e20 <xTaskIncrementTick+0x144>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 808e 	bne.w	8006e0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006cf0:	4b4c      	ldr	r3, [pc, #304]	; (8006e24 <xTaskIncrementTick+0x148>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006cf8:	4a4a      	ldr	r2, [pc, #296]	; (8006e24 <xTaskIncrementTick+0x148>)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d120      	bne.n	8006d46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d04:	4b48      	ldr	r3, [pc, #288]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	603b      	str	r3, [r7, #0]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <xTaskIncrementTick+0x46>
 8006d24:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3e      	ldr	r2, [pc, #248]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	4a3e      	ldr	r2, [pc, #248]	; (8006e2c <xTaskIncrementTick+0x150>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6013      	str	r3, [r2, #0]
 8006d38:	4b3d      	ldr	r3, [pc, #244]	; (8006e30 <xTaskIncrementTick+0x154>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	4a3c      	ldr	r2, [pc, #240]	; (8006e30 <xTaskIncrementTick+0x154>)
 8006d40:	6013      	str	r3, [r2, #0]
 8006d42:	f000 f99f 	bl	8007084 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d46:	4b3b      	ldr	r3, [pc, #236]	; (8006e34 <xTaskIncrementTick+0x158>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d348      	bcc.n	8006de2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d50:	4b35      	ldr	r3, [pc, #212]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d104      	bne.n	8006d64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d5a:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <xTaskIncrementTick+0x158>)
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	601a      	str	r2, [r3, #0]
					break;
 8006d62:	e03e      	b.n	8006de2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <xTaskIncrementTick+0x14c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d203      	bcs.n	8006d84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d7c:	4a2d      	ldr	r2, [pc, #180]	; (8006e34 <xTaskIncrementTick+0x158>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d82:	e02e      	b.n	8006de2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff fc8a 	bl	80066a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3318      	adds	r3, #24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fc81 	bl	80066a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	2201      	movs	r2, #1
 8006da6:	409a      	lsls	r2, r3
 8006da8:	4b23      	ldr	r3, [pc, #140]	; (8006e38 <xTaskIncrementTick+0x15c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	4a22      	ldr	r2, [pc, #136]	; (8006e38 <xTaskIncrementTick+0x15c>)
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4a1f      	ldr	r2, [pc, #124]	; (8006e3c <xTaskIncrementTick+0x160>)
 8006dc0:	441a      	add	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7ff fc0d 	bl	80065e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <xTaskIncrementTick+0x164>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d3b9      	bcc.n	8006d50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006de0:	e7b6      	b.n	8006d50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006de2:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <xTaskIncrementTick+0x164>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4914      	ldr	r1, [pc, #80]	; (8006e3c <xTaskIncrementTick+0x160>)
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d901      	bls.n	8006dfe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006dfe:	4b11      	ldr	r3, [pc, #68]	; (8006e44 <xTaskIncrementTick+0x168>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	e004      	b.n	8006e16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <xTaskIncrementTick+0x16c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3301      	adds	r3, #1
 8006e12:	4a0d      	ldr	r2, [pc, #52]	; (8006e48 <xTaskIncrementTick+0x16c>)
 8006e14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e16:	697b      	ldr	r3, [r7, #20]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20004778 	.word	0x20004778
 8006e24:	20004754 	.word	0x20004754
 8006e28:	20004708 	.word	0x20004708
 8006e2c:	2000470c 	.word	0x2000470c
 8006e30:	20004768 	.word	0x20004768
 8006e34:	20004770 	.word	0x20004770
 8006e38:	20004758 	.word	0x20004758
 8006e3c:	20004654 	.word	0x20004654
 8006e40:	20004650 	.word	0x20004650
 8006e44:	20004764 	.word	0x20004764
 8006e48:	20004760 	.word	0x20004760

08006e4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <vTaskSwitchContext+0xac>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e5a:	4b28      	ldr	r3, [pc, #160]	; (8006efc <vTaskSwitchContext+0xb0>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e60:	e044      	b.n	8006eec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006e62:	4b26      	ldr	r3, [pc, #152]	; (8006efc <vTaskSwitchContext+0xb0>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <vTaskSwitchContext+0xb4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	fab3 f383 	clz	r3, r3
 8006e74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	f1c3 031f 	rsb	r3, r3, #31
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	4921      	ldr	r1, [pc, #132]	; (8006f04 <vTaskSwitchContext+0xb8>)
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4613      	mov	r3, r2
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	607b      	str	r3, [r7, #4]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vTaskSwitchContext+0x5a>
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4a14      	ldr	r2, [pc, #80]	; (8006f04 <vTaskSwitchContext+0xb8>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d104      	bne.n	8006ed8 <vTaskSwitchContext+0x8c>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	4a0a      	ldr	r2, [pc, #40]	; (8006f08 <vTaskSwitchContext+0xbc>)
 8006ee0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ee2:	4b09      	ldr	r3, [pc, #36]	; (8006f08 <vTaskSwitchContext+0xbc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	334c      	adds	r3, #76	; 0x4c
 8006ee8:	4a08      	ldr	r2, [pc, #32]	; (8006f0c <vTaskSwitchContext+0xc0>)
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20004778 	.word	0x20004778
 8006efc:	20004764 	.word	0x20004764
 8006f00:	20004758 	.word	0x20004758
 8006f04:	20004654 	.word	0x20004654
 8006f08:	20004650 	.word	0x20004650
 8006f0c:	2000009c 	.word	0x2000009c

08006f10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f18:	f000 f852 	bl	8006fc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <prvIdleTask+0x28>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d9f9      	bls.n	8006f18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <prvIdleTask+0x2c>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f34:	e7f0      	b.n	8006f18 <prvIdleTask+0x8>
 8006f36:	bf00      	nop
 8006f38:	20004654 	.word	0x20004654
 8006f3c:	e000ed04 	.word	0xe000ed04

08006f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f46:	2300      	movs	r3, #0
 8006f48:	607b      	str	r3, [r7, #4]
 8006f4a:	e00c      	b.n	8006f66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4a12      	ldr	r2, [pc, #72]	; (8006fa0 <prvInitialiseTaskLists+0x60>)
 8006f58:	4413      	add	r3, r2
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7ff fb17 	bl	800658e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3301      	adds	r3, #1
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b06      	cmp	r3, #6
 8006f6a:	d9ef      	bls.n	8006f4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f6c:	480d      	ldr	r0, [pc, #52]	; (8006fa4 <prvInitialiseTaskLists+0x64>)
 8006f6e:	f7ff fb0e 	bl	800658e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f72:	480d      	ldr	r0, [pc, #52]	; (8006fa8 <prvInitialiseTaskLists+0x68>)
 8006f74:	f7ff fb0b 	bl	800658e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f78:	480c      	ldr	r0, [pc, #48]	; (8006fac <prvInitialiseTaskLists+0x6c>)
 8006f7a:	f7ff fb08 	bl	800658e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f7e:	480c      	ldr	r0, [pc, #48]	; (8006fb0 <prvInitialiseTaskLists+0x70>)
 8006f80:	f7ff fb05 	bl	800658e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f84:	480b      	ldr	r0, [pc, #44]	; (8006fb4 <prvInitialiseTaskLists+0x74>)
 8006f86:	f7ff fb02 	bl	800658e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <prvInitialiseTaskLists+0x78>)
 8006f8c:	4a05      	ldr	r2, [pc, #20]	; (8006fa4 <prvInitialiseTaskLists+0x64>)
 8006f8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f90:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <prvInitialiseTaskLists+0x7c>)
 8006f92:	4a05      	ldr	r2, [pc, #20]	; (8006fa8 <prvInitialiseTaskLists+0x68>)
 8006f94:	601a      	str	r2, [r3, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20004654 	.word	0x20004654
 8006fa4:	200046e0 	.word	0x200046e0
 8006fa8:	200046f4 	.word	0x200046f4
 8006fac:	20004710 	.word	0x20004710
 8006fb0:	20004724 	.word	0x20004724
 8006fb4:	2000473c 	.word	0x2000473c
 8006fb8:	20004708 	.word	0x20004708
 8006fbc:	2000470c 	.word	0x2000470c

08006fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fc6:	e019      	b.n	8006ffc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fc8:	f000 fa0c 	bl	80073e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fcc:	4b10      	ldr	r3, [pc, #64]	; (8007010 <prvCheckTasksWaitingTermination+0x50>)
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff fb62 	bl	80066a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fde:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <prvCheckTasksWaitingTermination+0x54>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	4a0b      	ldr	r2, [pc, #44]	; (8007014 <prvCheckTasksWaitingTermination+0x54>)
 8006fe6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <prvCheckTasksWaitingTermination+0x58>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4a0a      	ldr	r2, [pc, #40]	; (8007018 <prvCheckTasksWaitingTermination+0x58>)
 8006ff0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ff2:	f000 fa27 	bl	8007444 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f810 	bl	800701c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <prvCheckTasksWaitingTermination+0x58>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e1      	bne.n	8006fc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20004724 	.word	0x20004724
 8007014:	20004750 	.word	0x20004750
 8007018:	20004738 	.word	0x20004738

0800701c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	334c      	adds	r3, #76	; 0x4c
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fcaf 	bl	800798c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007034:	2b00      	cmp	r3, #0
 8007036:	d108      	bne.n	800704a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fb7f 	bl	8007740 <vPortFree>
				vPortFree( pxTCB );
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fb7c 	bl	8007740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007048:	e018      	b.n	800707c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007050:	2b01      	cmp	r3, #1
 8007052:	d103      	bne.n	800705c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fb73 	bl	8007740 <vPortFree>
	}
 800705a:	e00f      	b.n	800707c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007062:	2b02      	cmp	r3, #2
 8007064:	d00a      	beq.n	800707c <prvDeleteTCB+0x60>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	60fb      	str	r3, [r7, #12]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <prvDeleteTCB+0x5e>
	}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800709c:	e008      	b.n	80070b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709e:	4b07      	ldr	r3, [pc, #28]	; (80070bc <prvResetNextTaskUnblockTime+0x38>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <prvResetNextTaskUnblockTime+0x3c>)
 80070ae:	6013      	str	r3, [r2, #0]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20004708 	.word	0x20004708
 80070c0:	20004770 	.word	0x20004770

080070c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070ce:	4b29      	ldr	r3, [pc, #164]	; (8007174 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070d4:	4b28      	ldr	r3, [pc, #160]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fae1 	bl	80066a2 <uxListRemove>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070e6:	4b24      	ldr	r3, [pc, #144]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	2201      	movs	r2, #1
 80070ee:	fa02 f303 	lsl.w	r3, r2, r3
 80070f2:	43da      	mvns	r2, r3
 80070f4:	4b21      	ldr	r3, [pc, #132]	; (800717c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4013      	ands	r3, r2
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <prvAddCurrentTaskToDelayedList+0xb8>)
 80070fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d10a      	bne.n	800711c <prvAddCurrentTaskToDelayedList+0x58>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800710c:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	481a      	ldr	r0, [pc, #104]	; (8007180 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007116:	f7ff fa67 	bl	80065e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800711a:	e026      	b.n	800716a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4413      	add	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	429a      	cmp	r2, r3
 8007132:	d209      	bcs.n	8007148 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007134:	4b13      	ldr	r3, [pc, #76]	; (8007184 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7ff fa75 	bl	8006630 <vListInsert>
}
 8007146:	e010      	b.n	800716a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007148:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f7ff fa6b 	bl	8006630 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <prvAddCurrentTaskToDelayedList+0xc8>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d202      	bcs.n	800716a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007164:	4a09      	ldr	r2, [pc, #36]	; (800718c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	6013      	str	r3, [r2, #0]
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	20004754 	.word	0x20004754
 8007178:	20004650 	.word	0x20004650
 800717c:	20004758 	.word	0x20004758
 8007180:	2000473c 	.word	0x2000473c
 8007184:	2000470c 	.word	0x2000470c
 8007188:	20004708 	.word	0x20004708
 800718c:	20004770 	.word	0x20004770

08007190 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3b04      	subs	r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3b04      	subs	r3, #4
 80071ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3b04      	subs	r3, #4
 80071be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071c0:	4a0c      	ldr	r2, [pc, #48]	; (80071f4 <pxPortInitialiseStack+0x64>)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3b14      	subs	r3, #20
 80071ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f06f 0202 	mvn.w	r2, #2
 80071de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	3b20      	subs	r3, #32
 80071e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071e6:	68fb      	ldr	r3, [r7, #12]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	080071f9 	.word	0x080071f9

080071f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007202:	4b12      	ldr	r3, [pc, #72]	; (800724c <prvTaskExitError+0x54>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720a:	d00a      	beq.n	8007222 <prvTaskExitError+0x2a>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <prvTaskExitError+0x28>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	60bb      	str	r3, [r7, #8]
}
 8007234:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007236:	bf00      	nop
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0fc      	beq.n	8007238 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800723e:	bf00      	nop
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	2000004c 	.word	0x2000004c

08007250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007250:	4b07      	ldr	r3, [pc, #28]	; (8007270 <pxCurrentTCBConst2>)
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	6808      	ldr	r0, [r1, #0]
 8007256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800725a:	f380 8809 	msr	PSP, r0
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f04f 0000 	mov.w	r0, #0
 8007266:	f380 8811 	msr	BASEPRI, r0
 800726a:	4770      	bx	lr
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst2>:
 8007270:	20004650 	.word	0x20004650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007278:	4808      	ldr	r0, [pc, #32]	; (800729c <prvPortStartFirstTask+0x24>)
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	6800      	ldr	r0, [r0, #0]
 800727e:	f380 8808 	msr	MSP, r0
 8007282:	f04f 0000 	mov.w	r0, #0
 8007286:	f380 8814 	msr	CONTROL, r0
 800728a:	b662      	cpsie	i
 800728c:	b661      	cpsie	f
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	df00      	svc	0
 8007298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800729a:	bf00      	nop
 800729c:	e000ed08 	.word	0xe000ed08

080072a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072a6:	4b46      	ldr	r3, [pc, #280]	; (80073c0 <xPortStartScheduler+0x120>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a46      	ldr	r2, [pc, #280]	; (80073c4 <xPortStartScheduler+0x124>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10a      	bne.n	80072c6 <xPortStartScheduler+0x26>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	613b      	str	r3, [r7, #16]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072c6:	4b3e      	ldr	r3, [pc, #248]	; (80073c0 <xPortStartScheduler+0x120>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3f      	ldr	r2, [pc, #252]	; (80073c8 <xPortStartScheduler+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d10a      	bne.n	80072e6 <xPortStartScheduler+0x46>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	60fb      	str	r3, [r7, #12]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072e6:	4b39      	ldr	r3, [pc, #228]	; (80073cc <xPortStartScheduler+0x12c>)
 80072e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	22ff      	movs	r2, #255	; 0xff
 80072f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007308:	b2da      	uxtb	r2, r3
 800730a:	4b31      	ldr	r3, [pc, #196]	; (80073d0 <xPortStartScheduler+0x130>)
 800730c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xPortStartScheduler+0x134>)
 8007310:	2207      	movs	r2, #7
 8007312:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007314:	e009      	b.n	800732a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007316:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <xPortStartScheduler+0x134>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3b01      	subs	r3, #1
 800731c:	4a2d      	ldr	r2, [pc, #180]	; (80073d4 <xPortStartScheduler+0x134>)
 800731e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007332:	2b80      	cmp	r3, #128	; 0x80
 8007334:	d0ef      	beq.n	8007316 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007336:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <xPortStartScheduler+0x134>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1c3 0307 	rsb	r3, r3, #7
 800733e:	2b04      	cmp	r3, #4
 8007340:	d00a      	beq.n	8007358 <xPortStartScheduler+0xb8>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	60bb      	str	r3, [r7, #8]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007358:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <xPortStartScheduler+0x134>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	4a1d      	ldr	r2, [pc, #116]	; (80073d4 <xPortStartScheduler+0x134>)
 8007360:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <xPortStartScheduler+0x134>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800736a:	4a1a      	ldr	r2, [pc, #104]	; (80073d4 <xPortStartScheduler+0x134>)
 800736c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007376:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <xPortStartScheduler+0x138>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <xPortStartScheduler+0x138>)
 800737c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <xPortStartScheduler+0x138>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <xPortStartScheduler+0x138>)
 8007388:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800738c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800738e:	f000 f8dd 	bl	800754c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007392:	4b12      	ldr	r3, [pc, #72]	; (80073dc <xPortStartScheduler+0x13c>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007398:	f000 f8fc 	bl	8007594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xPortStartScheduler+0x140>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <xPortStartScheduler+0x140>)
 80073a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073a8:	f7ff ff66 	bl	8007278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073ac:	f7ff fd4e 	bl	8006e4c <vTaskSwitchContext>
	prvTaskExitError();
 80073b0:	f7ff ff22 	bl	80071f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	410fc271 	.word	0x410fc271
 80073c8:	410fc270 	.word	0x410fc270
 80073cc:	e000e400 	.word	0xe000e400
 80073d0:	2000477c 	.word	0x2000477c
 80073d4:	20004780 	.word	0x20004780
 80073d8:	e000ed20 	.word	0xe000ed20
 80073dc:	2000004c 	.word	0x2000004c
 80073e0:	e000ef34 	.word	0xe000ef34

080073e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	b083      	sub	sp, #12
 80073e8:	af00      	add	r7, sp, #0
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	607b      	str	r3, [r7, #4]
}
 80073fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	; (800743c <vPortEnterCritical+0x58>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	4a0d      	ldr	r2, [pc, #52]	; (800743c <vPortEnterCritical+0x58>)
 8007406:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <vPortEnterCritical+0x58>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d10f      	bne.n	8007430 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <vPortEnterCritical+0x5c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <vPortEnterCritical+0x4c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	603b      	str	r3, [r7, #0]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <vPortEnterCritical+0x4a>
	}
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	2000004c 	.word	0x2000004c
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800744a:	4b12      	ldr	r3, [pc, #72]	; (8007494 <vPortExitCritical+0x50>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10a      	bne.n	8007468 <vPortExitCritical+0x24>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	607b      	str	r3, [r7, #4]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <vPortExitCritical+0x50>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3b01      	subs	r3, #1
 800746e:	4a09      	ldr	r2, [pc, #36]	; (8007494 <vPortExitCritical+0x50>)
 8007470:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <vPortExitCritical+0x50>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <vPortExitCritical+0x42>
 800747a:	2300      	movs	r3, #0
 800747c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007484:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000004c 	.word	0x2000004c
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <pxCurrentTCBConst>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f01e 0f10 	tst.w	lr, #16
 80074b0:	bf08      	it	eq
 80074b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074c4:	f380 8811 	msr	BASEPRI, r0
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f7ff fcbc 	bl	8006e4c <vTaskSwitchContext>
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f380 8811 	msr	BASEPRI, r0
 80074dc:	bc09      	pop	{r0, r3}
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6808      	ldr	r0, [r1, #0]
 80074e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e6:	f01e 0f10 	tst.w	lr, #16
 80074ea:	bf08      	it	eq
 80074ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074f0:	f380 8809 	msr	PSP, r0
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst>:
 8007500:	20004650 	.word	0x20004650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
}
 8007520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007522:	f7ff fbdb 	bl	8006cdc <xTaskIncrementTick>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800752c:	4b06      	ldr	r3, [pc, #24]	; (8007548 <SysTick_Handler+0x40>)
 800752e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f383 8811 	msr	BASEPRI, r3
}
 800753e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	e000ed04 	.word	0xe000ed04

0800754c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007550:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <vPortSetupTimerInterrupt+0x38>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <vPortSetupTimerInterrupt+0x3c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a0a      	ldr	r2, [pc, #40]	; (800758c <vPortSetupTimerInterrupt+0x40>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	099b      	lsrs	r3, r3, #6
 8007568:	4a09      	ldr	r2, [pc, #36]	; (8007590 <vPortSetupTimerInterrupt+0x44>)
 800756a:	3b01      	subs	r3, #1
 800756c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800756e:	4b04      	ldr	r3, [pc, #16]	; (8007580 <vPortSetupTimerInterrupt+0x34>)
 8007570:	2207      	movs	r2, #7
 8007572:	601a      	str	r2, [r3, #0]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	e000e010 	.word	0xe000e010
 8007584:	e000e018 	.word	0xe000e018
 8007588:	20000040 	.word	0x20000040
 800758c:	10624dd3 	.word	0x10624dd3
 8007590:	e000e014 	.word	0xe000e014

08007594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007594:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075a4 <vPortEnableVFP+0x10>
 8007598:	6801      	ldr	r1, [r0, #0]
 800759a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759e:	6001      	str	r1, [r0, #0]
 80075a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075a2:	bf00      	nop
 80075a4:	e000ed88 	.word	0xe000ed88

080075a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075b4:	f7ff fae8 	bl	8006b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075b8:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <pvPortMalloc+0x180>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075c0:	f000 f920 	bl	8007804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <pvPortMalloc+0x184>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 8093 	bne.w	80076f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01d      	beq.n	8007614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075d8:	2208      	movs	r2, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	3308      	adds	r3, #8
 80075f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <pvPortMalloc+0x6c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	617b      	str	r3, [r7, #20]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d06e      	beq.n	80076f8 <pvPortMalloc+0x150>
 800761a:	4b45      	ldr	r3, [pc, #276]	; (8007730 <pvPortMalloc+0x188>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d869      	bhi.n	80076f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007624:	4b43      	ldr	r3, [pc, #268]	; (8007734 <pvPortMalloc+0x18c>)
 8007626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007628:	4b42      	ldr	r3, [pc, #264]	; (8007734 <pvPortMalloc+0x18c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762e:	e004      	b.n	800763a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d903      	bls.n	800764c <pvPortMalloc+0xa4>
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f1      	bne.n	8007630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800764c:	4b36      	ldr	r3, [pc, #216]	; (8007728 <pvPortMalloc+0x180>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	429a      	cmp	r2, r3
 8007654:	d050      	beq.n	80076f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2208      	movs	r2, #8
 800765c:	4413      	add	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	2308      	movs	r3, #8
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	d91f      	bls.n	80076b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <pvPortMalloc+0xf8>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	613b      	str	r3, [r7, #16]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f000 f908 	bl	80078c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <pvPortMalloc+0x188>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <pvPortMalloc+0x188>)
 80076c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076c6:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <pvPortMalloc+0x188>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <pvPortMalloc+0x190>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d203      	bcs.n	80076da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076d2:	4b17      	ldr	r3, [pc, #92]	; (8007730 <pvPortMalloc+0x188>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <pvPortMalloc+0x190>)
 80076d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x184>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <pvPortMalloc+0x194>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a11      	ldr	r2, [pc, #68]	; (800773c <pvPortMalloc+0x194>)
 80076f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076f8:	f7ff fa54 	bl	8006ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <pvPortMalloc+0x174>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <pvPortMalloc+0x172>
	return pvReturn;
 800771c:	69fb      	ldr	r3, [r7, #28]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	2000838c 	.word	0x2000838c
 800772c:	200083a0 	.word	0x200083a0
 8007730:	20008390 	.word	0x20008390
 8007734:	20008384 	.word	0x20008384
 8007738:	20008394 	.word	0x20008394
 800773c:	20008398 	.word	0x20008398

08007740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04d      	beq.n	80077ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007752:	2308      	movs	r3, #8
 8007754:	425b      	negs	r3, r3
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <vPortFree+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4013      	ands	r3, r2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <vPortFree+0x44>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <vPortFree+0x62>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60bb      	str	r3, [r7, #8]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <vPortFree+0xb8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11a      	bne.n	80077ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <vPortFree+0xb8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	401a      	ands	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077c8:	f7ff f9de 	bl	8006b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <vPortFree+0xbc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <vPortFree+0xbc>)
 80077d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077da:	6938      	ldr	r0, [r7, #16]
 80077dc:	f000 f874 	bl	80078c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <vPortFree+0xc0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	4a06      	ldr	r2, [pc, #24]	; (8007800 <vPortFree+0xc0>)
 80077e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ea:	f7ff f9db 	bl	8006ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200083a0 	.word	0x200083a0
 80077fc:	20008390 	.word	0x20008390
 8007800:	2000839c 	.word	0x2000839c

08007804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800780a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800780e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007810:	4b27      	ldr	r3, [pc, #156]	; (80078b0 <prvHeapInit+0xac>)
 8007812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3307      	adds	r3, #7
 8007822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <prvHeapInit+0xac>)
 8007834:	4413      	add	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <prvHeapInit+0xb0>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <prvHeapInit+0xb0>)
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007850:	2208      	movs	r2, #8
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <prvHeapInit+0xb4>)
 8007864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <prvHeapInit+0xb4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <prvHeapInit+0xb4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <prvHeapInit+0xb4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <prvHeapInit+0xb8>)
 8007892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <prvHeapInit+0xbc>)
 800789a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800789c:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <prvHeapInit+0xc0>)
 800789e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20004784 	.word	0x20004784
 80078b4:	20008384 	.word	0x20008384
 80078b8:	2000838c 	.word	0x2000838c
 80078bc:	20008394 	.word	0x20008394
 80078c0:	20008390 	.word	0x20008390
 80078c4:	200083a0 	.word	0x200083a0

080078c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <prvInsertBlockIntoFreeList+0xac>)
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e002      	b.n	80078dc <prvInsertBlockIntoFreeList+0x14>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d8f7      	bhi.n	80078d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d108      	bne.n	800790a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	441a      	add	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d118      	bne.n	8007950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d00d      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e008      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007946:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e003      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d002      	beq.n	8007966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20008384 	.word	0x20008384
 8007978:	2000838c 	.word	0x2000838c

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <_reclaim_reent>:
 800798c:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <_reclaim_reent+0xa8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4283      	cmp	r3, r0
 8007992:	b570      	push	{r4, r5, r6, lr}
 8007994:	4604      	mov	r4, r0
 8007996:	d04b      	beq.n	8007a30 <_reclaim_reent+0xa4>
 8007998:	69c3      	ldr	r3, [r0, #28]
 800799a:	b143      	cbz	r3, 80079ae <_reclaim_reent+0x22>
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d144      	bne.n	8007a2c <_reclaim_reent+0xa0>
 80079a2:	69e3      	ldr	r3, [r4, #28]
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	b111      	cbz	r1, 80079ae <_reclaim_reent+0x22>
 80079a8:	4620      	mov	r0, r4
 80079aa:	f000 f86b 	bl	8007a84 <_free_r>
 80079ae:	6961      	ldr	r1, [r4, #20]
 80079b0:	b111      	cbz	r1, 80079b8 <_reclaim_reent+0x2c>
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f866 	bl	8007a84 <_free_r>
 80079b8:	69e1      	ldr	r1, [r4, #28]
 80079ba:	b111      	cbz	r1, 80079c2 <_reclaim_reent+0x36>
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 f861 	bl	8007a84 <_free_r>
 80079c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80079c4:	b111      	cbz	r1, 80079cc <_reclaim_reent+0x40>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f000 f85c 	bl	8007a84 <_free_r>
 80079cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079ce:	b111      	cbz	r1, 80079d6 <_reclaim_reent+0x4a>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f857 	bl	8007a84 <_free_r>
 80079d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079d8:	b111      	cbz	r1, 80079e0 <_reclaim_reent+0x54>
 80079da:	4620      	mov	r0, r4
 80079dc:	f000 f852 	bl	8007a84 <_free_r>
 80079e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079e2:	b111      	cbz	r1, 80079ea <_reclaim_reent+0x5e>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 f84d 	bl	8007a84 <_free_r>
 80079ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80079ec:	b111      	cbz	r1, 80079f4 <_reclaim_reent+0x68>
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f848 	bl	8007a84 <_free_r>
 80079f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079f6:	b111      	cbz	r1, 80079fe <_reclaim_reent+0x72>
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 f843 	bl	8007a84 <_free_r>
 80079fe:	6a23      	ldr	r3, [r4, #32]
 8007a00:	b1b3      	cbz	r3, 8007a30 <_reclaim_reent+0xa4>
 8007a02:	4620      	mov	r0, r4
 8007a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a08:	4718      	bx	r3
 8007a0a:	5949      	ldr	r1, [r1, r5]
 8007a0c:	b941      	cbnz	r1, 8007a20 <_reclaim_reent+0x94>
 8007a0e:	3504      	adds	r5, #4
 8007a10:	69e3      	ldr	r3, [r4, #28]
 8007a12:	2d80      	cmp	r5, #128	; 0x80
 8007a14:	68d9      	ldr	r1, [r3, #12]
 8007a16:	d1f8      	bne.n	8007a0a <_reclaim_reent+0x7e>
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f000 f833 	bl	8007a84 <_free_r>
 8007a1e:	e7c0      	b.n	80079a2 <_reclaim_reent+0x16>
 8007a20:	680e      	ldr	r6, [r1, #0]
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f82e 	bl	8007a84 <_free_r>
 8007a28:	4631      	mov	r1, r6
 8007a2a:	e7ef      	b.n	8007a0c <_reclaim_reent+0x80>
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	e7ef      	b.n	8007a10 <_reclaim_reent+0x84>
 8007a30:	bd70      	pop	{r4, r5, r6, pc}
 8007a32:	bf00      	nop
 8007a34:	2000009c 	.word	0x2000009c

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4d0d      	ldr	r5, [pc, #52]	; (8007a70 <__libc_init_array+0x38>)
 8007a3c:	4c0d      	ldr	r4, [pc, #52]	; (8007a74 <__libc_init_array+0x3c>)
 8007a3e:	1b64      	subs	r4, r4, r5
 8007a40:	10a4      	asrs	r4, r4, #2
 8007a42:	2600      	movs	r6, #0
 8007a44:	42a6      	cmp	r6, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	4d0b      	ldr	r5, [pc, #44]	; (8007a78 <__libc_init_array+0x40>)
 8007a4a:	4c0c      	ldr	r4, [pc, #48]	; (8007a7c <__libc_init_array+0x44>)
 8007a4c:	f000 f872 	bl	8007b34 <_init>
 8007a50:	1b64      	subs	r4, r4, r5
 8007a52:	10a4      	asrs	r4, r4, #2
 8007a54:	2600      	movs	r6, #0
 8007a56:	42a6      	cmp	r6, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a60:	4798      	blx	r3
 8007a62:	3601      	adds	r6, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a6a:	4798      	blx	r3
 8007a6c:	3601      	adds	r6, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	08007c34 	.word	0x08007c34
 8007a74:	08007c34 	.word	0x08007c34
 8007a78:	08007c34 	.word	0x08007c34
 8007a7c:	08007c38 	.word	0x08007c38

08007a80 <__retarget_lock_acquire_recursive>:
 8007a80:	4770      	bx	lr

08007a82 <__retarget_lock_release_recursive>:
 8007a82:	4770      	bx	lr

08007a84 <_free_r>:
 8007a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a86:	2900      	cmp	r1, #0
 8007a88:	d044      	beq.n	8007b14 <_free_r+0x90>
 8007a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8e:	9001      	str	r0, [sp, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f1a1 0404 	sub.w	r4, r1, #4
 8007a96:	bfb8      	it	lt
 8007a98:	18e4      	addlt	r4, r4, r3
 8007a9a:	f000 f83f 	bl	8007b1c <__malloc_lock>
 8007a9e:	4a1e      	ldr	r2, [pc, #120]	; (8007b18 <_free_r+0x94>)
 8007aa0:	9801      	ldr	r0, [sp, #4]
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	b933      	cbnz	r3, 8007ab4 <_free_r+0x30>
 8007aa6:	6063      	str	r3, [r4, #4]
 8007aa8:	6014      	str	r4, [r2, #0]
 8007aaa:	b003      	add	sp, #12
 8007aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ab0:	f000 b83a 	b.w	8007b28 <__malloc_unlock>
 8007ab4:	42a3      	cmp	r3, r4
 8007ab6:	d908      	bls.n	8007aca <_free_r+0x46>
 8007ab8:	6825      	ldr	r5, [r4, #0]
 8007aba:	1961      	adds	r1, r4, r5
 8007abc:	428b      	cmp	r3, r1
 8007abe:	bf01      	itttt	eq
 8007ac0:	6819      	ldreq	r1, [r3, #0]
 8007ac2:	685b      	ldreq	r3, [r3, #4]
 8007ac4:	1949      	addeq	r1, r1, r5
 8007ac6:	6021      	streq	r1, [r4, #0]
 8007ac8:	e7ed      	b.n	8007aa6 <_free_r+0x22>
 8007aca:	461a      	mov	r2, r3
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b10b      	cbz	r3, 8007ad4 <_free_r+0x50>
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d9fa      	bls.n	8007aca <_free_r+0x46>
 8007ad4:	6811      	ldr	r1, [r2, #0]
 8007ad6:	1855      	adds	r5, r2, r1
 8007ad8:	42a5      	cmp	r5, r4
 8007ada:	d10b      	bne.n	8007af4 <_free_r+0x70>
 8007adc:	6824      	ldr	r4, [r4, #0]
 8007ade:	4421      	add	r1, r4
 8007ae0:	1854      	adds	r4, r2, r1
 8007ae2:	42a3      	cmp	r3, r4
 8007ae4:	6011      	str	r1, [r2, #0]
 8007ae6:	d1e0      	bne.n	8007aaa <_free_r+0x26>
 8007ae8:	681c      	ldr	r4, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	6053      	str	r3, [r2, #4]
 8007aee:	440c      	add	r4, r1
 8007af0:	6014      	str	r4, [r2, #0]
 8007af2:	e7da      	b.n	8007aaa <_free_r+0x26>
 8007af4:	d902      	bls.n	8007afc <_free_r+0x78>
 8007af6:	230c      	movs	r3, #12
 8007af8:	6003      	str	r3, [r0, #0]
 8007afa:	e7d6      	b.n	8007aaa <_free_r+0x26>
 8007afc:	6825      	ldr	r5, [r4, #0]
 8007afe:	1961      	adds	r1, r4, r5
 8007b00:	428b      	cmp	r3, r1
 8007b02:	bf04      	itt	eq
 8007b04:	6819      	ldreq	r1, [r3, #0]
 8007b06:	685b      	ldreq	r3, [r3, #4]
 8007b08:	6063      	str	r3, [r4, #4]
 8007b0a:	bf04      	itt	eq
 8007b0c:	1949      	addeq	r1, r1, r5
 8007b0e:	6021      	streq	r1, [r4, #0]
 8007b10:	6054      	str	r4, [r2, #4]
 8007b12:	e7ca      	b.n	8007aaa <_free_r+0x26>
 8007b14:	b003      	add	sp, #12
 8007b16:	bd30      	pop	{r4, r5, pc}
 8007b18:	200084e0 	.word	0x200084e0

08007b1c <__malloc_lock>:
 8007b1c:	4801      	ldr	r0, [pc, #4]	; (8007b24 <__malloc_lock+0x8>)
 8007b1e:	f7ff bfaf 	b.w	8007a80 <__retarget_lock_acquire_recursive>
 8007b22:	bf00      	nop
 8007b24:	200084dc 	.word	0x200084dc

08007b28 <__malloc_unlock>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__malloc_unlock+0x8>)
 8007b2a:	f7ff bfaa 	b.w	8007a82 <__retarget_lock_release_recursive>
 8007b2e:	bf00      	nop
 8007b30:	200084dc 	.word	0x200084dc

08007b34 <_init>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr

08007b40 <_fini>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr
